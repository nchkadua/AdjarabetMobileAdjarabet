//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `MainTabBar`.
    static let mainTabBar = _R.storyboard.mainTabBar()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MainTabBar", bundle: ...)`
    static func mainTabBar(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainTabBar)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    /// This `R.color.colorGuide` struct is generated, and contains static references to 0 colors.
    struct colorGuide {
      /// This `R.color.colorGuide.neutral` struct is generated, and contains static references to 10 colors.
      struct neutral {
        /// Color `neutral100`.
        static let neutral100 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Neutral/neutral100")
        /// Color `neutral200`.
        static let neutral200 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Neutral/neutral200")
        /// Color `neutral300`.
        static let neutral300 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Neutral/neutral300")
        /// Color `neutral400`.
        static let neutral400 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Neutral/neutral400")
        /// Color `neutral500`.
        static let neutral500 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Neutral/neutral500")
        /// Color `neutral600`.
        static let neutral600 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Neutral/neutral600")
        /// Color `neutral700`.
        static let neutral700 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Neutral/neutral700")
        /// Color `neutral800`.
        static let neutral800 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Neutral/neutral800")
        /// Color `neutral900`.
        static let neutral900 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Neutral/neutral900")
        /// Color `white`.
        static let white = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Neutral/white")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "neutral100", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func neutral100(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.neutral.neutral100, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "neutral200", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func neutral200(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.neutral.neutral200, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "neutral300", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func neutral300(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.neutral.neutral300, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "neutral400", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func neutral400(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.neutral.neutral400, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "neutral500", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func neutral500(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.neutral.neutral500, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "neutral600", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func neutral600(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.neutral.neutral600, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "neutral700", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func neutral700(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.neutral.neutral700, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "neutral800", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func neutral800(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.neutral.neutral800, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "neutral900", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func neutral900(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.neutral.neutral900, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "white", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.neutral.white, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.color.colorGuide.primary` struct is generated, and contains static references to 2 colors.
      struct primary {
        /// Color `primary200`.
        static let primary200 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Primary/primary200")
        /// Color `primary400`.
        static let primary400 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Primary/primary400")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "primary200", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func primary200(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.primary.primary200, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "primary400", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func primary400(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.primary.primary400, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.color.colorGuide.secondary` struct is generated, and contains static references to 2 colors.
      struct secondary {
        /// Color `secondary200`.
        static let secondary200 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Secondary/secondary200")
        /// Color `secondary400`.
        static let secondary400 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Secondary/secondary400")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "secondary200", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func secondary200(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.secondary.secondary200, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "secondary400", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func secondary400(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.secondary.secondary400, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.color.colorGuide.semantic` struct is generated, and contains static references to 3 colors.
      struct semantic {
        /// Color `error`.
        static let error = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Semantic/error")
        /// Color `success`.
        static let success = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Semantic/success")
        /// Color `warning`.
        static let warning = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Semantic/warning")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "error", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.semantic.error, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "success", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.semantic.success, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "warning", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func warning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.semantic.warning, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    /// This `R.color.tabBar` struct is generated, and contains static references to 2 colors.
    struct tabBar {
      /// Color `tintColor`.
      static let tintColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TabBar/tintColor")
      /// Color `unselectedItemTintColor`.
      static let unselectedItemTintColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TabBar/unselectedItemTintColor")

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "tintColor", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func tintColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.tabBar.tintColor, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "unselectedItemTintColor", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func unselectedItemTintColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.tabBar.unselectedItemTintColor, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    struct keychainAccessGroups {
      static let appIdentifierPrefixComAdjarabetMobileCredentials = infoPlistString(path: ["keychain-access-groups"], key: "$(AppIdentifierPrefix)com.adjarabet.Mobile.credentials") ?? "$(AppIdentifierPrefix)com.adjarabet.Mobile.credentials"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 18 files.
  struct file {
    /// Resource file `FiraGO-Bold.ttf`.
    static let firaGOBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Bold", pathExtension: "ttf")
    /// Resource file `FiraGO-Book.ttf`.
    static let firaGOBookTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Book", pathExtension: "ttf")
    /// Resource file `FiraGO-Eight.ttf`.
    static let firaGOEightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Eight", pathExtension: "ttf")
    /// Resource file `FiraGO-ExtraBold.ttf`.
    static let firaGOExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-ExtraBold", pathExtension: "ttf")
    /// Resource file `FiraGO-ExtraLight.ttf`.
    static let firaGOExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-ExtraLight", pathExtension: "ttf")
    /// Resource file `FiraGO-Four.ttf`.
    static let firaGOFourTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Four", pathExtension: "ttf")
    /// Resource file `FiraGO-Hair.ttf`.
    static let firaGOHairTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Hair", pathExtension: "ttf")
    /// Resource file `FiraGO-Heavy.ttf`.
    static let firaGOHeavyTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Heavy", pathExtension: "ttf")
    /// Resource file `FiraGO-Light.ttf`.
    static let firaGOLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Light", pathExtension: "ttf")
    /// Resource file `FiraGO-Medium.ttf`.
    static let firaGOMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Medium", pathExtension: "ttf")
    /// Resource file `FiraGO-Regular.ttf`.
    static let firaGORegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Regular", pathExtension: "ttf")
    /// Resource file `FiraGO-SemiBold.ttf`.
    static let firaGOSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-SemiBold", pathExtension: "ttf")
    /// Resource file `FiraGO-Thin.ttf`.
    static let firaGOThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Thin", pathExtension: "ttf")
    /// Resource file `FiraGO-Two.ttf`.
    static let firaGOTwoTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Two", pathExtension: "ttf")
    /// Resource file `FiraGO-UltraLight.ttf`.
    static let firaGOUltraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-UltraLight", pathExtension: "ttf")
    /// Resource file `PantonMtav3-Bold.otf`.
    static let pantonMtav3BoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "PantonMtav3-Bold", pathExtension: "otf")
    /// Resource file `PantonMtav3-ExtraBold.otf`.
    static let pantonMtav3ExtraBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "PantonMtav3-ExtraBold", pathExtension: "otf")
    /// Resource file `PantonMtav3-Regular.otf`.
    static let pantonMtav3RegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "PantonMtav3-Regular", pathExtension: "otf")

    /// `bundle.url(forResource: "FiraGO-Bold", withExtension: "ttf")`
    static func firaGOBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-Book", withExtension: "ttf")`
    static func firaGOBookTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOBookTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-Eight", withExtension: "ttf")`
    static func firaGOEightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOEightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-ExtraBold", withExtension: "ttf")`
    static func firaGOExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-ExtraLight", withExtension: "ttf")`
    static func firaGOExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-Four", withExtension: "ttf")`
    static func firaGOFourTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOFourTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-Hair", withExtension: "ttf")`
    static func firaGOHairTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOHairTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-Heavy", withExtension: "ttf")`
    static func firaGOHeavyTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOHeavyTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-Light", withExtension: "ttf")`
    static func firaGOLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-Medium", withExtension: "ttf")`
    static func firaGOMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-Regular", withExtension: "ttf")`
    static func firaGORegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGORegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-SemiBold", withExtension: "ttf")`
    static func firaGOSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-Thin", withExtension: "ttf")`
    static func firaGOThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-Two", withExtension: "ttf")`
    static func firaGOTwoTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOTwoTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-UltraLight", withExtension: "ttf")`
    static func firaGOUltraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOUltraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PantonMtav3-Bold", withExtension: "otf")`
    static func pantonMtav3BoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pantonMtav3BoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PantonMtav3-ExtraBold", withExtension: "otf")`
    static func pantonMtav3ExtraBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pantonMtav3ExtraBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PantonMtav3-Regular", withExtension: "otf")`
    static func pantonMtav3RegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pantonMtav3RegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 18 fonts.
  struct font: Rswift.Validatable {
    /// Font `FiraGO-Bold`.
    static let firaGOBold = Rswift.FontResource(fontName: "FiraGO-Bold")
    /// Font `FiraGO-Book`.
    static let firaGOBook = Rswift.FontResource(fontName: "FiraGO-Book")
    /// Font `FiraGO-Eight`.
    static let firaGOEight = Rswift.FontResource(fontName: "FiraGO-Eight")
    /// Font `FiraGO-ExtraBold`.
    static let firaGOExtraBold = Rswift.FontResource(fontName: "FiraGO-ExtraBold")
    /// Font `FiraGO-ExtraLight`.
    static let firaGOExtraLight = Rswift.FontResource(fontName: "FiraGO-ExtraLight")
    /// Font `FiraGO-Four`.
    static let firaGOFour = Rswift.FontResource(fontName: "FiraGO-Four")
    /// Font `FiraGO-Hair`.
    static let firaGOHair = Rswift.FontResource(fontName: "FiraGO-Hair")
    /// Font `FiraGO-Heavy`.
    static let firaGOHeavy = Rswift.FontResource(fontName: "FiraGO-Heavy")
    /// Font `FiraGO-Light`.
    static let firaGOLight = Rswift.FontResource(fontName: "FiraGO-Light")
    /// Font `FiraGO-Medium`.
    static let firaGOMedium = Rswift.FontResource(fontName: "FiraGO-Medium")
    /// Font `FiraGO-Regular`.
    static let firaGORegular = Rswift.FontResource(fontName: "FiraGO-Regular")
    /// Font `FiraGO-SemiBold`.
    static let firaGOSemiBold = Rswift.FontResource(fontName: "FiraGO-SemiBold")
    /// Font `FiraGO-Thin`.
    static let firaGOThin = Rswift.FontResource(fontName: "FiraGO-Thin")
    /// Font `FiraGO-Two`.
    static let firaGOTwo = Rswift.FontResource(fontName: "FiraGO-Two")
    /// Font `FiraGO-UltraLight`.
    static let firaGOUltraLight = Rswift.FontResource(fontName: "FiraGO-UltraLight")
    /// Font `PantonMtav3-Bold`.
    static let pantonMtav3Bold = Rswift.FontResource(fontName: "PantonMtav3-Bold")
    /// Font `PantonMtav3-ExtraBold`.
    static let pantonMtav3ExtraBold = Rswift.FontResource(fontName: "PantonMtav3-ExtraBold")
    /// Font `PantonMtav3-Regular`.
    static let pantonMtav3Regular = Rswift.FontResource(fontName: "PantonMtav3-Regular")

    /// `UIFont(name: "FiraGO-Bold", size: ...)`
    static func firaGOBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOBold, size: size)
    }

    /// `UIFont(name: "FiraGO-Book", size: ...)`
    static func firaGOBook(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOBook, size: size)
    }

    /// `UIFont(name: "FiraGO-Eight", size: ...)`
    static func firaGOEight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOEight, size: size)
    }

    /// `UIFont(name: "FiraGO-ExtraBold", size: ...)`
    static func firaGOExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOExtraBold, size: size)
    }

    /// `UIFont(name: "FiraGO-ExtraLight", size: ...)`
    static func firaGOExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOExtraLight, size: size)
    }

    /// `UIFont(name: "FiraGO-Four", size: ...)`
    static func firaGOFour(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOFour, size: size)
    }

    /// `UIFont(name: "FiraGO-Hair", size: ...)`
    static func firaGOHair(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOHair, size: size)
    }

    /// `UIFont(name: "FiraGO-Heavy", size: ...)`
    static func firaGOHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOHeavy, size: size)
    }

    /// `UIFont(name: "FiraGO-Light", size: ...)`
    static func firaGOLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOLight, size: size)
    }

    /// `UIFont(name: "FiraGO-Medium", size: ...)`
    static func firaGOMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOMedium, size: size)
    }

    /// `UIFont(name: "FiraGO-Regular", size: ...)`
    static func firaGORegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGORegular, size: size)
    }

    /// `UIFont(name: "FiraGO-SemiBold", size: ...)`
    static func firaGOSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOSemiBold, size: size)
    }

    /// `UIFont(name: "FiraGO-Thin", size: ...)`
    static func firaGOThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOThin, size: size)
    }

    /// `UIFont(name: "FiraGO-Two", size: ...)`
    static func firaGOTwo(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOTwo, size: size)
    }

    /// `UIFont(name: "FiraGO-UltraLight", size: ...)`
    static func firaGOUltraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOUltraLight, size: size)
    }

    /// `UIFont(name: "PantonMtav3-Bold", size: ...)`
    static func pantonMtav3Bold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: pantonMtav3Bold, size: size)
    }

    /// `UIFont(name: "PantonMtav3-ExtraBold", size: ...)`
    static func pantonMtav3ExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: pantonMtav3ExtraBold, size: size)
    }

    /// `UIFont(name: "PantonMtav3-Regular", size: ...)`
    static func pantonMtav3Regular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: pantonMtav3Regular, size: size)
    }

    static func validate() throws {
      if R.font.firaGOBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Bold' could not be loaded, is 'FiraGO-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOBook(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Book' could not be loaded, is 'FiraGO-Book.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOEight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Eight' could not be loaded, is 'FiraGO-Eight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-ExtraBold' could not be loaded, is 'FiraGO-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-ExtraLight' could not be loaded, is 'FiraGO-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOFour(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Four' could not be loaded, is 'FiraGO-Four.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOHair(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Hair' could not be loaded, is 'FiraGO-Hair.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Heavy' could not be loaded, is 'FiraGO-Heavy.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Light' could not be loaded, is 'FiraGO-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Medium' could not be loaded, is 'FiraGO-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGORegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Regular' could not be loaded, is 'FiraGO-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-SemiBold' could not be loaded, is 'FiraGO-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Thin' could not be loaded, is 'FiraGO-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOTwo(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Two' could not be loaded, is 'FiraGO-Two.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOUltraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-UltraLight' could not be loaded, is 'FiraGO-UltraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.pantonMtav3Bold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'PantonMtav3-Bold' could not be loaded, is 'PantonMtav3-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.pantonMtav3ExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'PantonMtav3-ExtraBold' could not be loaded, is 'PantonMtav3-ExtraBold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.pantonMtav3Regular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'PantonMtav3-Regular' could not be loaded, is 'PantonMtav3-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 3 images.
  struct image {
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `face`.
    static let face = Rswift.ImageResource(bundle: R.hostingBundle, name: "face")
    /// Image `touch`.
    static let touch = Rswift.ImageResource(bundle: R.hostingBundle, name: "touch")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "face", bundle: ..., traitCollection: ...)`
    static func face(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.face, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "touch", bundle: ..., traitCollection: ...)`
    static func touch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touch, compatibleWith: traitCollection)
    }
    #endif

    /// This `R.image.tabBar` struct is generated, and contains static references to 9 images.
    struct tabBar {
      /// Image `addProduct`.
      static let addProduct = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/addProduct")
      /// Image `chatSelected`.
      static let chatSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/chatSelected")
      /// Image `chat`.
      static let chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/chat")
      /// Image `discoverSelected`.
      static let discoverSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/discoverSelected")
      /// Image `discover`.
      static let discover = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/discover")
      /// Image `homeSelected`.
      static let homeSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/homeSelected")
      /// Image `home`.
      static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/home")
      /// Image `settgins`.
      static let settgins = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/settgins")
      /// Image `settingsSelected`.
      static let settingsSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/settingsSelected")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "addProduct", bundle: ..., traitCollection: ...)`
      static func addProduct(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.addProduct, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "chat", bundle: ..., traitCollection: ...)`
      static func chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.chat, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "chatSelected", bundle: ..., traitCollection: ...)`
      static func chatSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.chatSelected, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "discover", bundle: ..., traitCollection: ...)`
      static func discover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.discover, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "discoverSelected", bundle: ..., traitCollection: ...)`
      static func discoverSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.discoverSelected, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
      static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.home, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "homeSelected", bundle: ..., traitCollection: ...)`
      static func homeSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.homeSelected, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "settgins", bundle: ..., traitCollection: ...)`
      static func settgins(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.settgins, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "settingsSelected", bundle: ..., traitCollection: ...)`
      static func settingsSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.settingsSelected, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try login.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mainTabBar.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let appNavigationController = StoryboardViewControllerResource<AppNavigationController>(identifier: "AppNavigationController")
      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Login"
      let welcomeViewController = StoryboardViewControllerResource<WelcomeViewController>(identifier: "WelcomeViewController")

      func appNavigationController(_: Void = ()) -> AppNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: appNavigationController)
      }

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      func welcomeViewController(_: Void = ()) -> WelcomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: welcomeViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "face", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'face' is used in storyboard 'Login', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.login().appNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'appNavigationController' could not be loaded from storyboard 'Login' as 'AppNavigationController'.") }
        if _R.storyboard.login().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
        if _R.storyboard.login().welcomeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'welcomeViewController' could not be loaded from storyboard 'Login' as 'WelcomeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mainTabBar: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let emptyViewController = StoryboardViewControllerResource<EmptyViewController>(identifier: "EmptyViewController")
      let mainTabBarViewController = StoryboardViewControllerResource<MainTabBarViewController>(identifier: "MainTabBarViewController")
      let name = "MainTabBar"

      func emptyViewController(_: Void = ()) -> EmptyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: emptyViewController)
      }

      func mainTabBarViewController(_: Void = ()) -> MainTabBarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabBarViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.mainTabBar().emptyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'emptyViewController' could not be loaded from storyboard 'MainTabBar' as 'EmptyViewController'.") }
        if _R.storyboard.mainTabBar().mainTabBarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabBarViewController' could not be loaded from storyboard 'MainTabBar' as 'MainTabBarViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
