//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 22 storyboards.
  struct storyboard {
    /// Storyboard `AccountInfo`.
    static let accountInfo = _R.storyboard.accountInfo()
    /// Storyboard `AddressChange`.
    static let addressChange = _R.storyboard.addressChange()
    /// Storyboard `BiometricSettingsView`.
    static let biometricSettingsView = _R.storyboard.biometricSettingsView()
    /// Storyboard `CashFlow`.
    static let cashFlow = _R.storyboard.cashFlow()
    /// Storyboard `Deposit`.
    static let deposit = _R.storyboard.deposit()
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `MailChange`.
    static let mailChange = _R.storyboard.mailChange()
    /// Storyboard `MainTabBar`.
    static let mainTabBar = _R.storyboard.mainTabBar()
    /// Storyboard `NotificationContent`.
    static let notificationContent = _R.storyboard.notificationContent()
    /// Storyboard `Notifications`.
    static let notifications = _R.storyboard.notifications()
    /// Storyboard `P2PTransferView`.
    static let p2PTransferView = _R.storyboard.p2PTransferView()
    /// Storyboard `PasswordChange`.
    static let passwordChange = _R.storyboard.passwordChange()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `Promotions`.
    static let promotions = _R.storyboard.promotions()
    /// Storyboard `SMSLogin`.
    static let smsLogin = _R.storyboard.smsLogin()
    /// Storyboard `SelfSuspend`.
    static let selfSuspend = _R.storyboard.selfSuspend()
    /// Storyboard `Sports`.
    static let sports = _R.storyboard.sports()
    /// Storyboard `TransactionDetails`.
    static let transactionDetails = _R.storyboard.transactionDetails()
    /// Storyboard `Transactions`.
    static let transactions = _R.storyboard.transactions()
    /// Storyboard `Withdraw`.
    static let withdraw = _R.storyboard.withdraw()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AccountInfo", bundle: ...)`
    static func accountInfo(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.accountInfo)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AddressChange", bundle: ...)`
    static func addressChange(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addressChange)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "BiometricSettingsView", bundle: ...)`
    static func biometricSettingsView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.biometricSettingsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CashFlow", bundle: ...)`
    static func cashFlow(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.cashFlow)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Deposit", bundle: ...)`
    static func deposit(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.deposit)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MailChange", bundle: ...)`
    static func mailChange(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mailChange)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MainTabBar", bundle: ...)`
    static func mainTabBar(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainTabBar)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "NotificationContent", bundle: ...)`
    static func notificationContent(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.notificationContent)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Notifications", bundle: ...)`
    static func notifications(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.notifications)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "P2PTransferView", bundle: ...)`
    static func p2PTransferView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.p2PTransferView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "PasswordChange", bundle: ...)`
    static func passwordChange(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.passwordChange)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Promotions", bundle: ...)`
    static func promotions(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.promotions)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SMSLogin", bundle: ...)`
    static func smsLogin(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.smsLogin)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SelfSuspend", bundle: ...)`
    static func selfSuspend(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.selfSuspend)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Sports", bundle: ...)`
    static func sports(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sports)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "TransactionDetails", bundle: ...)`
    static func transactionDetails(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.transactionDetails)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Transactions", bundle: ...)`
    static func transactions(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.transactions)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Withdraw", bundle: ...)`
    static func withdraw(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.withdraw)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    /// This `R.color.colorGuide` struct is generated, and contains static references to 0 colors.
    struct colorGuide {
      /// This `R.color.colorGuide.adjaraSolids` struct is generated, and contains static references to 4 colors.
      struct adjaraSolids {
        /// Color `primaryGreenNeutral`.
        static let primaryGreenNeutral = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/AdjaraSolids/primaryGreenNeutral")
        /// Color `primaryRedDark`.
        static let primaryRedDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/AdjaraSolids/primaryRedDark")
        /// Color `primaryRedNeutral`.
        static let primaryRedNeutral = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/AdjaraSolids/primaryRedNeutral")
        /// Color `primaryRed`.
        static let primaryRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/AdjaraSolids/primaryRed")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "primaryGreenNeutral", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func primaryGreenNeutral(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.adjaraSolids.primaryGreenNeutral, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "primaryRed", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func primaryRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.adjaraSolids.primaryRed, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "primaryRedDark", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func primaryRedDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.adjaraSolids.primaryRedDark, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "primaryRedNeutral", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func primaryRedNeutral(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.adjaraSolids.primaryRedNeutral, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.color.colorGuide.fillColors` struct is generated, and contains static references to 4 colors.
      struct fillColors {
        /// Color `primary`.
        static let primary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/FillColors/primary")
        /// Color `querternary`.
        static let querternary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/FillColors/querternary")
        /// Color `secondary`.
        static let secondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/FillColors/secondary")
        /// Color `tertiary`.
        static let tertiary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/FillColors/tertiary")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "primary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func primary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.fillColors.primary, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "querternary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func querternary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.fillColors.querternary, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "secondary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func secondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.fillColors.secondary, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "tertiary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func tertiary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.fillColors.tertiary, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.color.colorGuide.materials` struct is generated, and contains static references to 6 colors.
      struct materials {
        /// Color `Ultrathin`.
        static let ultrathin = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Materials/Ultrathin")
        /// Color `navBar`.
        static let navBar = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Materials/navBar")
        /// Color `regular`.
        static let regular = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Materials/regular")
        /// Color `tabBar`.
        static let tabBar = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Materials/tabBar")
        /// Color `thick`.
        static let thick = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Materials/thick")
        /// Color `thin`.
        static let thin = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Materials/thin")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "Ultrathin", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func ultrathin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.materials.ultrathin, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "navBar", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func navBar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.materials.navBar, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "regular", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func regular(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.materials.regular, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "tabBar", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func tabBar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.materials.tabBar, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "thick", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func thick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.materials.thick, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "thin", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func thin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.materials.thin, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.color.colorGuide.separator` struct is generated, and contains static references to 2 colors.
      struct separator {
        /// Color `non_opaque`.
        static let non_opaque = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Separator/non_opaque")
        /// Color `opaque`.
        static let opaque = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Separator/opaque")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "non_opaque", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func non_opaque(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.separator.non_opaque, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "opaque", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func opaque(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.separator.opaque, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.color.colorGuide.systemBackground` struct is generated, and contains static references to 4 colors.
      struct systemBackground {
        /// Color `primary`.
        static let primary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemBackground/primary")
        /// Color `querternary`.
        static let querternary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemBackground/querternary")
        /// Color `secondary`.
        static let secondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemBackground/secondary")
        /// Color `tertiary`.
        static let tertiary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemBackground/tertiary")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "primary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func primary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemBackground.primary, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "querternary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func querternary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemBackground.querternary, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "secondary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func secondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemBackground.secondary, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "tertiary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func tertiary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemBackground.tertiary, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.color.colorGuide.systemGrays` struct is generated, and contains static references to 6 colors.
      struct systemGrays {
        /// Color `systemGrey2`.
        static let systemGrey2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemGrays/systemGrey2")
        /// Color `systemGrey3`.
        static let systemGrey3 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemGrays/systemGrey3")
        /// Color `systemGrey4`.
        static let systemGrey4 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemGrays/systemGrey4")
        /// Color `systemGrey5`.
        static let systemGrey5 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemGrays/systemGrey5")
        /// Color `systemGrey6`.
        static let systemGrey6 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemGrays/systemGrey6")
        /// Color `systemGrey`.
        static let systemGrey = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemGrays/systemGrey")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemGrey", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemGrays.systemGrey, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemGrey2", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemGrey2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemGrays.systemGrey2, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemGrey3", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemGrey3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemGrays.systemGrey3, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemGrey4", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemGrey4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemGrays.systemGrey4, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemGrey5", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemGrey5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemGrays.systemGrey5, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemGrey6", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemGrey6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemGrays.systemGrey6, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.color.colorGuide.systemTints` struct is generated, and contains static references to 7 colors.
      struct systemTints {
        /// Color `systemBlue`.
        static let systemBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemTints/systemBlue")
        /// Color `systemGreen`.
        static let systemGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemTints/systemGreen")
        /// Color `systemIndigo`.
        static let systemIndigo = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemTints/systemIndigo")
        /// Color `systemOrange`.
        static let systemOrange = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemTints/systemOrange")
        /// Color `systemRed`.
        static let systemRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemTints/systemRed")
        /// Color `systemTeal`.
        static let systemTeal = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemTints/systemTeal")
        /// Color `systemYellow`.
        static let systemYellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemTints/systemYellow")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemBlue", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemTints.systemBlue, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemGreen", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemTints.systemGreen, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemIndigo", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemIndigo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemTints.systemIndigo, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemOrange", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemTints.systemOrange, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemRed", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemTints.systemRed, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemTeal", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemTeal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemTints.systemTeal, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemYellow", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemTints.systemYellow, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.color.colorGuide.textColors` struct is generated, and contains static references to 4 colors.
      struct textColors {
        /// Color `primary`.
        static let primary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/TextColors/primary")
        /// Color `querternary`.
        static let querternary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/TextColors/querternary")
        /// Color `secondary`.
        static let secondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/TextColors/secondary")
        /// Color `tertiary`.
        static let tertiary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/TextColors/tertiary")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "primary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func primary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.textColors.primary, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "querternary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func querternary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.textColors.querternary, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "secondary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func secondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.textColors.secondary, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "tertiary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func tertiary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.textColors.tertiary, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 3 properties.
  struct entitlements {
    struct comAppleDeveloperAssociatedDomains {
      static let webcredentialsAdjarabetCom = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "webcredentials:adjarabet.com") ?? "webcredentials:adjarabet.com"

      fileprivate init() {}
    }

    struct comAppleSecurityApplicationGroups {
      static let groupAdjarabetMobileCoockie = infoPlistString(path: ["com.apple.security.application-groups"], key: "group.adjarabet.mobile.coockie") ?? "group.adjarabet.mobile.coockie"

      fileprivate init() {}
    }

    struct keychainAccessGroups {
      static let appIdentifierPrefixComAdjarabetMobileCredentials = infoPlistString(path: ["keychain-access-groups"], key: "$(AppIdentifierPrefix)com.adjarabet.Mobile.credentials") ?? "$(AppIdentifierPrefix)com.adjarabet.Mobile.credentials"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 28 files.
  struct file {
    /// Resource file `FiraGO-Bold.ttf`.
    static let firaGOBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Bold", pathExtension: "ttf")
    /// Resource file `FiraGO-Book.ttf`.
    static let firaGOBookTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Book", pathExtension: "ttf")
    /// Resource file `FiraGO-Eight.ttf`.
    static let firaGOEightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Eight", pathExtension: "ttf")
    /// Resource file `FiraGO-ExtraBold.ttf`.
    static let firaGOExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-ExtraBold", pathExtension: "ttf")
    /// Resource file `FiraGO-ExtraLight.ttf`.
    static let firaGOExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-ExtraLight", pathExtension: "ttf")
    /// Resource file `FiraGO-Four.ttf`.
    static let firaGOFourTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Four", pathExtension: "ttf")
    /// Resource file `FiraGO-Hair.ttf`.
    static let firaGOHairTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Hair", pathExtension: "ttf")
    /// Resource file `FiraGO-Heavy.ttf`.
    static let firaGOHeavyTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Heavy", pathExtension: "ttf")
    /// Resource file `FiraGO-Light.ttf`.
    static let firaGOLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Light", pathExtension: "ttf")
    /// Resource file `FiraGO-Medium.ttf`.
    static let firaGOMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Medium", pathExtension: "ttf")
    /// Resource file `FiraGO-Regular.ttf`.
    static let firaGORegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Regular", pathExtension: "ttf")
    /// Resource file `FiraGO-SemiBold.ttf`.
    static let firaGOSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-SemiBold", pathExtension: "ttf")
    /// Resource file `FiraGO-Thin.ttf`.
    static let firaGOThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Thin", pathExtension: "ttf")
    /// Resource file `FiraGO-Two.ttf`.
    static let firaGOTwoTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-Two", pathExtension: "ttf")
    /// Resource file `FiraGO-UltraLight.ttf`.
    static let firaGOUltraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FiraGO-UltraLight", pathExtension: "ttf")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `NotoSansArmenian-Bold.ttf`.
    static let notoSansArmenianBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NotoSansArmenian-Bold", pathExtension: "ttf")
    /// Resource file `NotoSansArmenian-Medium.ttf`.
    static let notoSansArmenianMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NotoSansArmenian-Medium", pathExtension: "ttf")
    /// Resource file `NotoSansArmenian-Regular.ttf`.
    static let notoSansArmenianRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NotoSansArmenian-Regular", pathExtension: "ttf")
    /// Resource file `NotoSansArmenian-SemiBold.ttf`.
    static let notoSansArmenianSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NotoSansArmenian-SemiBold", pathExtension: "ttf")
    /// Resource file `PantonAM-Bold.otf`.
    static let pantonAMBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "PantonAM-Bold", pathExtension: "otf")
    /// Resource file `PantonAM-ExtraBold.otf`.
    static let pantonAMExtraBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "PantonAM-ExtraBold", pathExtension: "otf")
    /// Resource file `PantonAM-Regular.otf`.
    static let pantonAMRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "PantonAM-Regular", pathExtension: "otf")
    /// Resource file `PantonMtav3-Bold.otf`.
    static let pantonMtav3BoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "PantonMtav3-Bold", pathExtension: "otf")
    /// Resource file `PantonMtav3-ExtraBold.otf`.
    static let pantonMtav3ExtraBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "PantonMtav3-ExtraBold", pathExtension: "otf")
    /// Resource file `PantonMtav3-Regular.otf`.
    static let pantonMtav3RegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "PantonMtav3-Regular", pathExtension: "otf")
    /// Resource file `PantonNusx3-Bold.otf`.
    static let pantonNusx3BoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "PantonNusx3-Bold", pathExtension: "otf")
    /// Resource file `PantonNusx3-Regular.otf`.
    static let pantonNusx3RegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "PantonNusx3-Regular", pathExtension: "otf")

    /// `bundle.url(forResource: "FiraGO-Bold", withExtension: "ttf")`
    static func firaGOBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-Book", withExtension: "ttf")`
    static func firaGOBookTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOBookTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-Eight", withExtension: "ttf")`
    static func firaGOEightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOEightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-ExtraBold", withExtension: "ttf")`
    static func firaGOExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-ExtraLight", withExtension: "ttf")`
    static func firaGOExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-Four", withExtension: "ttf")`
    static func firaGOFourTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOFourTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-Hair", withExtension: "ttf")`
    static func firaGOHairTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOHairTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-Heavy", withExtension: "ttf")`
    static func firaGOHeavyTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOHeavyTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-Light", withExtension: "ttf")`
    static func firaGOLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-Medium", withExtension: "ttf")`
    static func firaGOMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-Regular", withExtension: "ttf")`
    static func firaGORegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGORegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-SemiBold", withExtension: "ttf")`
    static func firaGOSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-Thin", withExtension: "ttf")`
    static func firaGOThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-Two", withExtension: "ttf")`
    static func firaGOTwoTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOTwoTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FiraGO-UltraLight", withExtension: "ttf")`
    static func firaGOUltraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firaGOUltraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NotoSansArmenian-Bold", withExtension: "ttf")`
    static func notoSansArmenianBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.notoSansArmenianBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NotoSansArmenian-Medium", withExtension: "ttf")`
    static func notoSansArmenianMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.notoSansArmenianMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NotoSansArmenian-Regular", withExtension: "ttf")`
    static func notoSansArmenianRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.notoSansArmenianRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NotoSansArmenian-SemiBold", withExtension: "ttf")`
    static func notoSansArmenianSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.notoSansArmenianSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PantonAM-Bold", withExtension: "otf")`
    static func pantonAMBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pantonAMBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PantonAM-ExtraBold", withExtension: "otf")`
    static func pantonAMExtraBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pantonAMExtraBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PantonAM-Regular", withExtension: "otf")`
    static func pantonAMRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pantonAMRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PantonMtav3-Bold", withExtension: "otf")`
    static func pantonMtav3BoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pantonMtav3BoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PantonMtav3-ExtraBold", withExtension: "otf")`
    static func pantonMtav3ExtraBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pantonMtav3ExtraBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PantonMtav3-Regular", withExtension: "otf")`
    static func pantonMtav3RegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pantonMtav3RegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PantonNusx3-Bold", withExtension: "otf")`
    static func pantonNusx3BoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pantonNusx3BoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PantonNusx3-Regular", withExtension: "otf")`
    static func pantonNusx3RegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pantonNusx3RegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 27 fonts.
  struct font: Rswift.Validatable {
    /// Font `FiraGO-Bold`.
    static let firaGOBold = Rswift.FontResource(fontName: "FiraGO-Bold")
    /// Font `FiraGO-Book`.
    static let firaGOBook = Rswift.FontResource(fontName: "FiraGO-Book")
    /// Font `FiraGO-Eight`.
    static let firaGOEight = Rswift.FontResource(fontName: "FiraGO-Eight")
    /// Font `FiraGO-ExtraBold`.
    static let firaGOExtraBold = Rswift.FontResource(fontName: "FiraGO-ExtraBold")
    /// Font `FiraGO-ExtraLight`.
    static let firaGOExtraLight = Rswift.FontResource(fontName: "FiraGO-ExtraLight")
    /// Font `FiraGO-Four`.
    static let firaGOFour = Rswift.FontResource(fontName: "FiraGO-Four")
    /// Font `FiraGO-Hair`.
    static let firaGOHair = Rswift.FontResource(fontName: "FiraGO-Hair")
    /// Font `FiraGO-Heavy`.
    static let firaGOHeavy = Rswift.FontResource(fontName: "FiraGO-Heavy")
    /// Font `FiraGO-Light`.
    static let firaGOLight = Rswift.FontResource(fontName: "FiraGO-Light")
    /// Font `FiraGO-Medium`.
    static let firaGOMedium = Rswift.FontResource(fontName: "FiraGO-Medium")
    /// Font `FiraGO-Regular`.
    static let firaGORegular = Rswift.FontResource(fontName: "FiraGO-Regular")
    /// Font `FiraGO-SemiBold`.
    static let firaGOSemiBold = Rswift.FontResource(fontName: "FiraGO-SemiBold")
    /// Font `FiraGO-Thin`.
    static let firaGOThin = Rswift.FontResource(fontName: "FiraGO-Thin")
    /// Font `FiraGO-Two`.
    static let firaGOTwo = Rswift.FontResource(fontName: "FiraGO-Two")
    /// Font `FiraGO-UltraLight`.
    static let firaGOUltraLight = Rswift.FontResource(fontName: "FiraGO-UltraLight")
    /// Font `NotoSansArmenian-Bold`.
    static let notoSansArmenianBold = Rswift.FontResource(fontName: "NotoSansArmenian-Bold")
    /// Font `NotoSansArmenian-Medium`.
    static let notoSansArmenianMedium = Rswift.FontResource(fontName: "NotoSansArmenian-Medium")
    /// Font `NotoSansArmenian-Regular`.
    static let notoSansArmenianRegular = Rswift.FontResource(fontName: "NotoSansArmenian-Regular")
    /// Font `NotoSansArmenian-SemiBold`.
    static let notoSansArmenianSemiBold = Rswift.FontResource(fontName: "NotoSansArmenian-SemiBold")
    /// Font `PantonAM-Bold`.
    static let pantonAMBold = Rswift.FontResource(fontName: "PantonAM-Bold")
    /// Font `PantonAM-ExtraBold`.
    static let pantonAMExtraBold = Rswift.FontResource(fontName: "PantonAM-ExtraBold")
    /// Font `PantonAM-Regular`.
    static let pantonAMRegular = Rswift.FontResource(fontName: "PantonAM-Regular")
    /// Font `PantonMtav3-Bold`.
    static let pantonMtav3Bold = Rswift.FontResource(fontName: "PantonMtav3-Bold")
    /// Font `PantonMtav3-ExtraBold`.
    static let pantonMtav3ExtraBold = Rswift.FontResource(fontName: "PantonMtav3-ExtraBold")
    /// Font `PantonMtav3-Regular`.
    static let pantonMtav3Regular = Rswift.FontResource(fontName: "PantonMtav3-Regular")
    /// Font `PantonNusx3-Bold`.
    static let pantonNusx3Bold = Rswift.FontResource(fontName: "PantonNusx3-Bold")
    /// Font `PantonNusx3-Regular`.
    static let pantonNusx3Regular = Rswift.FontResource(fontName: "PantonNusx3-Regular")

    /// `UIFont(name: "FiraGO-Bold", size: ...)`
    static func firaGOBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOBold, size: size)
    }

    /// `UIFont(name: "FiraGO-Book", size: ...)`
    static func firaGOBook(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOBook, size: size)
    }

    /// `UIFont(name: "FiraGO-Eight", size: ...)`
    static func firaGOEight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOEight, size: size)
    }

    /// `UIFont(name: "FiraGO-ExtraBold", size: ...)`
    static func firaGOExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOExtraBold, size: size)
    }

    /// `UIFont(name: "FiraGO-ExtraLight", size: ...)`
    static func firaGOExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOExtraLight, size: size)
    }

    /// `UIFont(name: "FiraGO-Four", size: ...)`
    static func firaGOFour(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOFour, size: size)
    }

    /// `UIFont(name: "FiraGO-Hair", size: ...)`
    static func firaGOHair(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOHair, size: size)
    }

    /// `UIFont(name: "FiraGO-Heavy", size: ...)`
    static func firaGOHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOHeavy, size: size)
    }

    /// `UIFont(name: "FiraGO-Light", size: ...)`
    static func firaGOLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOLight, size: size)
    }

    /// `UIFont(name: "FiraGO-Medium", size: ...)`
    static func firaGOMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOMedium, size: size)
    }

    /// `UIFont(name: "FiraGO-Regular", size: ...)`
    static func firaGORegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGORegular, size: size)
    }

    /// `UIFont(name: "FiraGO-SemiBold", size: ...)`
    static func firaGOSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOSemiBold, size: size)
    }

    /// `UIFont(name: "FiraGO-Thin", size: ...)`
    static func firaGOThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOThin, size: size)
    }

    /// `UIFont(name: "FiraGO-Two", size: ...)`
    static func firaGOTwo(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOTwo, size: size)
    }

    /// `UIFont(name: "FiraGO-UltraLight", size: ...)`
    static func firaGOUltraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: firaGOUltraLight, size: size)
    }

    /// `UIFont(name: "NotoSansArmenian-Bold", size: ...)`
    static func notoSansArmenianBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: notoSansArmenianBold, size: size)
    }

    /// `UIFont(name: "NotoSansArmenian-Medium", size: ...)`
    static func notoSansArmenianMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: notoSansArmenianMedium, size: size)
    }

    /// `UIFont(name: "NotoSansArmenian-Regular", size: ...)`
    static func notoSansArmenianRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: notoSansArmenianRegular, size: size)
    }

    /// `UIFont(name: "NotoSansArmenian-SemiBold", size: ...)`
    static func notoSansArmenianSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: notoSansArmenianSemiBold, size: size)
    }

    /// `UIFont(name: "PantonAM-Bold", size: ...)`
    static func pantonAMBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: pantonAMBold, size: size)
    }

    /// `UIFont(name: "PantonAM-ExtraBold", size: ...)`
    static func pantonAMExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: pantonAMExtraBold, size: size)
    }

    /// `UIFont(name: "PantonAM-Regular", size: ...)`
    static func pantonAMRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: pantonAMRegular, size: size)
    }

    /// `UIFont(name: "PantonMtav3-Bold", size: ...)`
    static func pantonMtav3Bold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: pantonMtav3Bold, size: size)
    }

    /// `UIFont(name: "PantonMtav3-ExtraBold", size: ...)`
    static func pantonMtav3ExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: pantonMtav3ExtraBold, size: size)
    }

    /// `UIFont(name: "PantonMtav3-Regular", size: ...)`
    static func pantonMtav3Regular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: pantonMtav3Regular, size: size)
    }

    /// `UIFont(name: "PantonNusx3-Bold", size: ...)`
    static func pantonNusx3Bold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: pantonNusx3Bold, size: size)
    }

    /// `UIFont(name: "PantonNusx3-Regular", size: ...)`
    static func pantonNusx3Regular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: pantonNusx3Regular, size: size)
    }

    static func validate() throws {
      if R.font.firaGOBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Bold' could not be loaded, is 'FiraGO-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOBook(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Book' could not be loaded, is 'FiraGO-Book.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOEight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Eight' could not be loaded, is 'FiraGO-Eight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-ExtraBold' could not be loaded, is 'FiraGO-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-ExtraLight' could not be loaded, is 'FiraGO-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOFour(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Four' could not be loaded, is 'FiraGO-Four.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOHair(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Hair' could not be loaded, is 'FiraGO-Hair.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Heavy' could not be loaded, is 'FiraGO-Heavy.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Light' could not be loaded, is 'FiraGO-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Medium' could not be loaded, is 'FiraGO-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGORegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Regular' could not be loaded, is 'FiraGO-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-SemiBold' could not be loaded, is 'FiraGO-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Thin' could not be loaded, is 'FiraGO-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOTwo(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-Two' could not be loaded, is 'FiraGO-Two.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.firaGOUltraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FiraGO-UltraLight' could not be loaded, is 'FiraGO-UltraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.notoSansArmenianBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NotoSansArmenian-Bold' could not be loaded, is 'NotoSansArmenian-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.notoSansArmenianMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NotoSansArmenian-Medium' could not be loaded, is 'NotoSansArmenian-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.notoSansArmenianRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NotoSansArmenian-Regular' could not be loaded, is 'NotoSansArmenian-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.notoSansArmenianSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NotoSansArmenian-SemiBold' could not be loaded, is 'NotoSansArmenian-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.pantonAMBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'PantonAM-Bold' could not be loaded, is 'PantonAM-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.pantonAMExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'PantonAM-ExtraBold' could not be loaded, is 'PantonAM-ExtraBold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.pantonAMRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'PantonAM-Regular' could not be loaded, is 'PantonAM-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.pantonMtav3Bold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'PantonMtav3-Bold' could not be loaded, is 'PantonMtav3-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.pantonMtav3ExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'PantonMtav3-ExtraBold' could not be loaded, is 'PantonMtav3-ExtraBold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.pantonMtav3Regular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'PantonMtav3-Regular' could not be loaded, is 'PantonMtav3-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.pantonNusx3Bold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'PantonNusx3-Bold' could not be loaded, is 'PantonNusx3-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.pantonNusx3Regular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'PantonNusx3-Regular' could not be loaded, is 'PantonNusx3-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    #endif

    /// This `R.image.biometric` struct is generated, and contains static references to 3 images.
    struct biometric {
      /// Image `TouchID`.
      static let touchID = Rswift.ImageResource(bundle: R.hostingBundle, name: "Biometric/TouchID")
      /// Image `biometry`.
      static let biometry = Rswift.ImageResource(bundle: R.hostingBundle, name: "Biometric/biometry")
      /// Image `faceID`.
      static let faceID = Rswift.ImageResource(bundle: R.hostingBundle, name: "Biometric/faceID")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "TouchID", bundle: ..., traitCollection: ...)`
      static func touchID(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.biometric.touchID, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "biometry", bundle: ..., traitCollection: ...)`
      static func biometry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.biometric.biometry, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "faceID", bundle: ..., traitCollection: ...)`
      static func faceID(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.biometric.faceID, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.components` struct is generated, and contains static references to 0 images.
    struct components {
      /// This `R.image.components.accountInfo` struct is generated, and contains static references to 2 images.
      struct accountInfo {
        /// Image `edit`.
        static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/AccountInfo/edit")
        /// Image `oval`.
        static let oval = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/AccountInfo/oval")

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
        static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.accountInfo.edit, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "oval", bundle: ..., traitCollection: ...)`
        static func oval(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.accountInfo.oval, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.image.components.gameLauncher` struct is generated, and contains static references to 1 images.
      struct gameLauncher {
        /// Image `in`.
        static let `in` = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/GameLauncher/in")

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "in", bundle: ..., traitCollection: ...)`
        static func `in`(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.gameLauncher.`in`, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.image.components.profileCell` struct is generated, and contains static references to 4 images.
      struct profileCell {
        /// Image `adjarabet_logo`.
        static let adjarabet_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/ProfileCell/adjarabet_logo")
        /// Image `arrow`.
        static let arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/ProfileCell/arrow")
        /// Image `copy`.
        static let copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/ProfileCell/copy")
        /// Image `verified`.
        static let verified = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/ProfileCell/verified")

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "adjarabet_logo", bundle: ..., traitCollection: ...)`
        static func adjarabet_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.profileCell.adjarabet_logo, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "arrow", bundle: ..., traitCollection: ...)`
        static func arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.profileCell.arrow, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "copy", bundle: ..., traitCollection: ...)`
        static func copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.profileCell.copy, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "verified", bundle: ..., traitCollection: ...)`
        static func verified(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.profileCell.verified, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.image.components.quickAction` struct is generated, and contains static references to 11 images.
      struct quickAction {
        /// Image `account`.
        static let account = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/account")
        /// Image `biometry`.
        static let biometry = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/biometry")
        /// Image `deposit`.
        static let deposit = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/deposit")
        /// Image `incognito`.
        static let incognito = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/incognito")
        /// Image `logout`.
        static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/logout")
        /// Image `my_bonuses`.
        static let my_bonuses = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/my_bonuses")
        /// Image `my_cards`.
        static let my_cards = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/my_cards")
        /// Image `parameters`.
        static let parameters = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/parameters")
        /// Image `transaction_history`.
        static let transaction_history = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/transaction_history")
        /// Image `transfer`.
        static let transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/transfer")
        /// Image `withdraw`.
        static let withdraw = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/withdraw")

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "account", bundle: ..., traitCollection: ...)`
        static func account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.account, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "biometry", bundle: ..., traitCollection: ...)`
        static func biometry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.biometry, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "deposit", bundle: ..., traitCollection: ...)`
        static func deposit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.deposit, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "incognito", bundle: ..., traitCollection: ...)`
        static func incognito(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.incognito, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
        static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.logout, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "my_bonuses", bundle: ..., traitCollection: ...)`
        static func my_bonuses(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.my_bonuses, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "my_cards", bundle: ..., traitCollection: ...)`
        static func my_cards(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.my_cards, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "parameters", bundle: ..., traitCollection: ...)`
        static func parameters(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.parameters, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "transaction_history", bundle: ..., traitCollection: ...)`
        static func transaction_history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.transaction_history, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "transfer", bundle: ..., traitCollection: ...)`
        static func transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.transfer, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "withdraw", bundle: ..., traitCollection: ...)`
        static func withdraw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.withdraw, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    /// This `R.image.deposit` struct is generated, and contains static references to 1 images.
    struct deposit {
      /// Image `addCard`.
      static let addCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "Deposit/addCard")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "addCard", bundle: ..., traitCollection: ...)`
      static func addCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.deposit.addCard, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.login` struct is generated, and contains static references to 7 images.
    struct login {
      /// Image `legal`.
      static let legal = Rswift.ImageResource(bundle: R.hostingBundle, name: "Login/legal")
      /// Image `logo`.
      static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Login/logo")
      /// Image `oval`.
      static let oval = Rswift.ImageResource(bundle: R.hostingBundle, name: "Login/oval")
      /// Image `password`.
      static let password = Rswift.ImageResource(bundle: R.hostingBundle, name: "Login/password")
      /// Image `sms_back`.
      static let sms_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "Login/sms_back")
      /// Image `username`.
      static let username = Rswift.ImageResource(bundle: R.hostingBundle, name: "Login/username")
      /// Image `well_done`.
      static let well_done = Rswift.ImageResource(bundle: R.hostingBundle, name: "Login/well_done")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "legal", bundle: ..., traitCollection: ...)`
      static func legal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.login.legal, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
      static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.login.logo, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "oval", bundle: ..., traitCollection: ...)`
      static func oval(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.login.oval, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "password", bundle: ..., traitCollection: ...)`
      static func password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.login.password, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "sms_back", bundle: ..., traitCollection: ...)`
      static func sms_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.login.sms_back, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "username", bundle: ..., traitCollection: ...)`
      static func username(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.login.username, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "well_done", bundle: ..., traitCollection: ...)`
      static func well_done(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.login.well_done, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.notifications` struct is generated, and contains static references to 3 images.
    struct notifications {
      /// Image `oval`.
      static let oval = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notifications/oval")
      /// Image `settings`.
      static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notifications/settings")
      /// Image `trash`.
      static let trash = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notifications/trash")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "oval", bundle: ..., traitCollection: ...)`
      static func oval(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.notifications.oval, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
      static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.notifications.settings, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "trash", bundle: ..., traitCollection: ...)`
      static func trash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.notifications.trash, compatibleWith: traitCollection)
      }
      #endif

      /// This `R.image.notifications.temporary` struct is generated, and contains static references to 4 images.
      struct temporary {
        /// Image `Cover1`.
        static let cover1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notifications/Temporary/Cover1")
        /// Image `icon1`.
        static let icon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notifications/Temporary/icon1")
        /// Image `icon2`.
        static let icon2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notifications/Temporary/icon2")
        /// Image `icon_seen`.
        static let icon_seen = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notifications/Temporary/icon_seen")

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "Cover1", bundle: ..., traitCollection: ...)`
        static func cover1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.notifications.temporary.cover1, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "icon1", bundle: ..., traitCollection: ...)`
        static func icon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.notifications.temporary.icon1, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "icon2", bundle: ..., traitCollection: ...)`
        static func icon2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.notifications.temporary.icon2, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "icon_seen", bundle: ..., traitCollection: ...)`
        static func icon_seen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.notifications.temporary.icon_seen, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    /// This `R.image.p2P` struct is generated, and contains static references to 1 images.
    struct p2P {
      /// Image `check`.
      static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "P2P/check")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
      static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.p2P.check, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.promotions` struct is generated, and contains static references to 2 images.
    struct promotions {
      /// Image `casino_icon`.
      static let casino_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Promotions/casino_icon")
      /// Image `sport_icon`.
      static let sport_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Promotions/sport_icon")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "casino_icon", bundle: ..., traitCollection: ...)`
      static func casino_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.promotions.casino_icon, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "sport_icon", bundle: ..., traitCollection: ...)`
      static func sport_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.promotions.sport_icon, compatibleWith: traitCollection)
      }
      #endif

      /// This `R.image.promotions.temporary` struct is generated, and contains static references to 5 images.
      struct temporary {
        /// Image `Cover1`.
        static let cover1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Promotions/Temporary/Cover1")
        /// Image `Cover2`.
        static let cover2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Promotions/Temporary/Cover2")
        /// Image `Cover3`.
        static let cover3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Promotions/Temporary/Cover3")
        /// Image `Cover4`.
        static let cover4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Promotions/Temporary/Cover4")
        /// Image `Cover5`.
        static let cover5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Promotions/Temporary/Cover5")

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "Cover1", bundle: ..., traitCollection: ...)`
        static func cover1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.promotions.temporary.cover1, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "Cover2", bundle: ..., traitCollection: ...)`
        static func cover2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.promotions.temporary.cover2, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "Cover3", bundle: ..., traitCollection: ...)`
        static func cover3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.promotions.temporary.cover3, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "Cover4", bundle: ..., traitCollection: ...)`
        static func cover4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.promotions.temporary.cover4, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "Cover5", bundle: ..., traitCollection: ...)`
        static func cover5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.promotions.temporary.cover5, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    /// This `R.image.shared` struct is generated, and contains static references to 9 images.
    struct shared {
      /// Image `back`.
      static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shared/back")
      /// Image `close`.
      static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shared/close")
      /// Image `dropDown`.
      static let dropDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shared/dropDown")
      /// Image `faceID`.
      static let faceID = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shared/faceID")
      /// Image `hideText`.
      static let hideText = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shared/hideText")
      /// Image `phone`.
      static let phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shared/phone")
      /// Image `search`.
      static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shared/search")
      /// Image `touchID`.
      static let touchID = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shared/touchID")
      /// Image `viewText`.
      static let viewText = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shared/viewText")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
      static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.shared.back, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
      static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.shared.close, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "dropDown", bundle: ..., traitCollection: ...)`
      static func dropDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.shared.dropDown, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "faceID", bundle: ..., traitCollection: ...)`
      static func faceID(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.shared.faceID, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "hideText", bundle: ..., traitCollection: ...)`
      static func hideText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.shared.hideText, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "phone", bundle: ..., traitCollection: ...)`
      static func phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.shared.phone, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
      static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.shared.search, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "touchID", bundle: ..., traitCollection: ...)`
      static func touchID(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.shared.touchID, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "viewText", bundle: ..., traitCollection: ...)`
      static func viewText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.shared.viewText, compatibleWith: traitCollection)
      }
      #endif

      /// This `R.image.shared.navBar` struct is generated, and contains static references to 1 images.
      struct navBar {
        /// Image `profile`.
        static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shared/NavBar/profile")

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
        static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.shared.navBar.profile, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    /// This `R.image.smsLogin` struct is generated, and contains static references to 1 images.
    struct smsLogin {
      /// Image `resend`.
      static let resend = Rswift.ImageResource(bundle: R.hostingBundle, name: "SMSLogin/resend")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "resend", bundle: ..., traitCollection: ...)`
      static func resend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.smsLogin.resend, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.tabBar` struct is generated, and contains static references to 4 images.
    struct tabBar {
      /// Image `home`.
      static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/home")
      /// Image `notification`.
      static let notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/notification")
      /// Image `promotions`.
      static let promotions = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/promotions")
      /// Image `sports`.
      static let sports = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/sports")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
      static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.home, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "notification", bundle: ..., traitCollection: ...)`
      static func notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.notification, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "promotions", bundle: ..., traitCollection: ...)`
      static func promotions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.promotions, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "sports", bundle: ..., traitCollection: ...)`
      static func sports(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.sports, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.transactionsHistory` struct is generated, and contains static references to 2 images.
    struct transactionsHistory {
      /// Image `deposit`.
      static let deposit = Rswift.ImageResource(bundle: R.hostingBundle, name: "TransactionsHistory/deposit")
      /// Image `withdraw`.
      static let withdraw = Rswift.ImageResource(bundle: R.hostingBundle, name: "TransactionsHistory/withdraw")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "deposit", bundle: ..., traitCollection: ...)`
      static func deposit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.transactionsHistory.deposit, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "withdraw", bundle: ..., traitCollection: ...)`
      static func withdraw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.transactionsHistory.withdraw, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.withdraw` struct is generated, and contains static references to 1 images.
    struct withdraw {
      /// Image `info`.
      static let info = Rswift.ImageResource(bundle: R.hostingBundle, name: "Withdraw/info")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "info", bundle: ..., traitCollection: ...)`
      static func info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.withdraw.info, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 39 nibs.
  struct nib {
    /// Nib `ABInputView`.
    static let abInputView = _R.nib._ABInputView()
    /// Nib `AccountInfoComponentView`.
    static let accountInfoComponentView = _R.nib._AccountInfoComponentView()
    /// Nib `BalanceComponentView`.
    static let balanceComponentView = _R.nib._BalanceComponentView()
    /// Nib `BalanceTableViewCell`.
    static let balanceTableViewCell = _R.nib._BalanceTableViewCell()
    /// Nib `CashFlowTabComponentView`.
    static let cashFlowTabComponentView = _R.nib._CashFlowTabComponentView()
    /// Nib `DepositInstructionView`.
    static let depositInstructionView = _R.nib._DepositInstructionView()
    /// Nib `FooterComponentView`.
    static let footerComponentView = _R.nib._FooterComponentView()
    /// Nib `FooterTableViewCell`.
    static let footerTableViewCell = _R.nib._FooterTableViewCell()
    /// Nib `GameLauncherCollectionViewCell`.
    static let gameLauncherCollectionViewCell = _R.nib._GameLauncherCollectionViewCell()
    /// Nib `GameLauncherComponentView`.
    static let gameLauncherComponentView = _R.nib._GameLauncherComponentView()
    /// Nib `LabelComponentView`.
    static let labelComponentView = _R.nib._LabelComponentView()
    /// Nib `LoadingCollectionViewCell`.
    static let loadingCollectionViewCell = _R.nib._LoadingCollectionViewCell()
    /// Nib `LoadingComponentView`.
    static let loadingComponentView = _R.nib._LoadingComponentView()
    /// Nib `NotificationComponentView`.
    static let notificationComponentView = _R.nib._NotificationComponentView()
    /// Nib `NotificationTableViewCell`.
    static let notificationTableViewCell = _R.nib._NotificationTableViewCell()
    /// Nib `NotificationsHeaderCell`.
    static let notificationsHeaderCell = _R.nib._NotificationsHeaderCell()
    /// Nib `NotificationsHeaderComponentView`.
    static let notificationsHeaderComponentView = _R.nib._NotificationsHeaderComponentView()
    /// Nib `PasswordChangeRulesView`.
    static let passwordChangeRulesView = _R.nib._PasswordChangeRulesView()
    /// Nib `PlayedGameLauncherCollectionViewCell`.
    static let playedGameLauncherCollectionViewCell = _R.nib._PlayedGameLauncherCollectionViewCell()
    /// Nib `PlayedGameLauncherComponentView`.
    static let playedGameLauncherComponentView = _R.nib._PlayedGameLauncherComponentView()
    /// Nib `ProfileInfoComponentView`.
    static let profileInfoComponentView = _R.nib._ProfileInfoComponentView()
    /// Nib `ProfileInfoTableViewCell`.
    static let profileInfoTableViewCell = _R.nib._ProfileInfoTableViewCell()
    /// Nib `PromotionComponentView`.
    static let promotionComponentView = _R.nib._PromotionComponentView()
    /// Nib `PromotionTableViewCell`.
    static let promotionTableViewCell = _R.nib._PromotionTableViewCell()
    /// Nib `QuickActionComponentView`.
    static let quickActionComponentView = _R.nib._QuickActionComponentView()
    /// Nib `QuickActionTableViewCell`.
    static let quickActionTableViewCell = _R.nib._QuickActionTableViewCell()
    /// Nib `QuickActionsHeaderCell`.
    static let quickActionsHeaderCell = _R.nib._QuickActionsHeaderCell()
    /// Nib `QuickActionsHeaderView`.
    static let quickActionsHeaderView = _R.nib._QuickActionsHeaderView()
    /// Nib `RecentlyPlayedCollectionViewCell`.
    static let recentlyPlayedCollectionViewCell = _R.nib._RecentlyPlayedCollectionViewCell()
    /// Nib `RecentlyPlayedComponentView`.
    static let recentlyPlayedComponentView = _R.nib._RecentlyPlayedComponentView()
    /// Nib `TimerComponentView`.
    static let timerComponentView = _R.nib._TimerComponentView()
    /// Nib `TransactionDetailsComponentView`.
    static let transactionDetailsComponentView = _R.nib._TransactionDetailsComponentView()
    /// Nib `TransactionDetailsTableViewCell`.
    static let transactionDetailsTableViewCell = _R.nib._TransactionDetailsTableViewCell()
    /// Nib `TransactionHistoryComponentView`.
    static let transactionHistoryComponentView = _R.nib._TransactionHistoryComponentView()
    /// Nib `TransactionHistoryHeaderCell`.
    static let transactionHistoryHeaderCell = _R.nib._TransactionHistoryHeaderCell()
    /// Nib `TransactionHistoryHeaderComponentView`.
    static let transactionHistoryHeaderComponentView = _R.nib._TransactionHistoryHeaderComponentView()
    /// Nib `TransactionHistoryTableViewCell`.
    static let transactionHistoryTableViewCell = _R.nib._TransactionHistoryTableViewCell()
    /// Nib `WithdrawInstructionView`.
    static let withdrawInstructionView = _R.nib._WithdrawInstructionView()
    /// Nib `WithdrawTermsView`.
    static let withdrawTermsView = _R.nib._WithdrawTermsView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ABInputView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.abInputView) instead")
    static func abInputView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.abInputView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AccountInfoComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountInfoComponentView) instead")
    static func accountInfoComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountInfoComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BalanceComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.balanceComponentView) instead")
    static func balanceComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.balanceComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BalanceTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.balanceTableViewCell) instead")
    static func balanceTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.balanceTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CashFlowTabComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cashFlowTabComponentView) instead")
    static func cashFlowTabComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cashFlowTabComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DepositInstructionView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.depositInstructionView) instead")
    static func depositInstructionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.depositInstructionView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FooterComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.footerComponentView) instead")
    static func footerComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.footerComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FooterTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.footerTableViewCell) instead")
    static func footerTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.footerTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GameLauncherCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gameLauncherCollectionViewCell) instead")
    static func gameLauncherCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gameLauncherCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GameLauncherComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gameLauncherComponentView) instead")
    static func gameLauncherComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gameLauncherComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LabelComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.labelComponentView) instead")
    static func labelComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.labelComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoadingCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loadingCollectionViewCell) instead")
    static func loadingCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loadingCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoadingComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loadingComponentView) instead")
    static func loadingComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loadingComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationComponentView) instead")
    static func notificationComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationTableViewCell) instead")
    static func notificationTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationsHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationsHeaderCell) instead")
    static func notificationsHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationsHeaderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationsHeaderComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationsHeaderComponentView) instead")
    static func notificationsHeaderComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationsHeaderComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PasswordChangeRulesView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.passwordChangeRulesView) instead")
    static func passwordChangeRulesView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.passwordChangeRulesView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlayedGameLauncherCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.playedGameLauncherCollectionViewCell) instead")
    static func playedGameLauncherCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.playedGameLauncherCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlayedGameLauncherComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.playedGameLauncherComponentView) instead")
    static func playedGameLauncherComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.playedGameLauncherComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileInfoComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileInfoComponentView) instead")
    static func profileInfoComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileInfoComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileInfoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileInfoTableViewCell) instead")
    static func profileInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileInfoTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PromotionComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.promotionComponentView) instead")
    static func promotionComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.promotionComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PromotionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.promotionTableViewCell) instead")
    static func promotionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.promotionTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuickActionComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quickActionComponentView) instead")
    static func quickActionComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quickActionComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuickActionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quickActionTableViewCell) instead")
    static func quickActionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quickActionTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuickActionsHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quickActionsHeaderCell) instead")
    static func quickActionsHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quickActionsHeaderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuickActionsHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quickActionsHeaderView) instead")
    static func quickActionsHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quickActionsHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RecentlyPlayedCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.recentlyPlayedCollectionViewCell) instead")
    static func recentlyPlayedCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.recentlyPlayedCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RecentlyPlayedComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.recentlyPlayedComponentView) instead")
    static func recentlyPlayedComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.recentlyPlayedComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TimerComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.timerComponentView) instead")
    static func timerComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.timerComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TransactionDetailsComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionDetailsComponentView) instead")
    static func transactionDetailsComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionDetailsComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TransactionDetailsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionDetailsTableViewCell) instead")
    static func transactionDetailsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionDetailsTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TransactionHistoryComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionHistoryComponentView) instead")
    static func transactionHistoryComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionHistoryComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TransactionHistoryHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionHistoryHeaderCell) instead")
    static func transactionHistoryHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionHistoryHeaderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TransactionHistoryHeaderComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionHistoryHeaderComponentView) instead")
    static func transactionHistoryHeaderComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionHistoryHeaderComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TransactionHistoryTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionHistoryTableViewCell) instead")
    static func transactionHistoryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionHistoryTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WithdrawInstructionView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.withdrawInstructionView) instead")
    static func withdrawInstructionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.withdrawInstructionView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WithdrawTermsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.withdrawTermsView) instead")
    static func withdrawTermsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.withdrawTermsView)
    }
    #endif

    static func abInputView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.abInputView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func accountInfoComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.accountInfoComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func balanceComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.balanceComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func balanceTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BalanceTableViewCell? {
      return R.nib.balanceTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BalanceTableViewCell
    }

    static func cashFlowTabComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.cashFlowTabComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func depositInstructionView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.depositInstructionView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func footerComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.footerComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func footerTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FooterTableViewCell? {
      return R.nib.footerTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FooterTableViewCell
    }

    static func gameLauncherCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GameLauncherCollectionViewCell? {
      return R.nib.gameLauncherCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GameLauncherCollectionViewCell
    }

    static func gameLauncherComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.gameLauncherComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func labelComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.labelComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func loadingCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoadingCollectionViewCell? {
      return R.nib.loadingCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoadingCollectionViewCell
    }

    static func loadingComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loadingComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func notificationComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.notificationComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func notificationTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationTableViewCell? {
      return R.nib.notificationTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTableViewCell
    }

    static func notificationsHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationsHeaderCell? {
      return R.nib.notificationsHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationsHeaderCell
    }

    static func notificationsHeaderComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.notificationsHeaderComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func passwordChangeRulesView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.passwordChangeRulesView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func playedGameLauncherCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlayedGameLauncherCollectionViewCell? {
      return R.nib.playedGameLauncherCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlayedGameLauncherCollectionViewCell
    }

    static func playedGameLauncherComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.playedGameLauncherComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func profileInfoComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.profileInfoComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func profileInfoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileInfoTableViewCell? {
      return R.nib.profileInfoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileInfoTableViewCell
    }

    static func promotionComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.promotionComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func promotionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PromotionTableViewCell? {
      return R.nib.promotionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PromotionTableViewCell
    }

    static func quickActionComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quickActionComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quickActionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuickActionTableViewCell? {
      return R.nib.quickActionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuickActionTableViewCell
    }

    static func quickActionsHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuickActionsHeaderCell? {
      return R.nib.quickActionsHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuickActionsHeaderCell
    }

    static func quickActionsHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quickActionsHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func recentlyPlayedCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecentlyPlayedCollectionViewCell? {
      return R.nib.recentlyPlayedCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecentlyPlayedCollectionViewCell
    }

    static func recentlyPlayedComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.recentlyPlayedComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func timerComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.timerComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func transactionDetailsComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.transactionDetailsComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func transactionDetailsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionDetailsTableViewCell? {
      return R.nib.transactionDetailsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionDetailsTableViewCell
    }

    static func transactionHistoryComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.transactionHistoryComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func transactionHistoryHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionHistoryHeaderCell? {
      return R.nib.transactionHistoryHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionHistoryHeaderCell
    }

    static func transactionHistoryHeaderComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.transactionHistoryHeaderComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func transactionHistoryTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionHistoryTableViewCell? {
      return R.nib.transactionHistoryTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionHistoryTableViewCell
    }

    static func withdrawInstructionView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.withdrawInstructionView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func withdrawTermsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.withdrawTermsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localization` struct is generated, and contains static references to 120 localization keys.
    struct localization {
      /// en translation: Account Information
      ///
      /// Locales: en, ka, hy
      static let account_information = Rswift.StringResource(key: "account_information", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Account Information
      ///
      /// Locales: en, ka, hy
      static let account_information_title = Rswift.StringResource(key: "account_information_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Account Parameters
      ///
      /// Locales: en, ka, hy
      static let account_parameters = Rswift.StringResource(key: "account_parameters", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Account Parameters
      ///
      /// Locales: en, ka, hy
      static let profile_page_title = Rswift.StringResource(key: "profile_page_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Activate Biometry
      ///
      /// Locales: en, ka, hy
      static let biometric_settings_activate_biometry = Rswift.StringResource(key: "biometric_settings_activate_biometry", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Activate Face ID
      ///
      /// Locales: en, ka, hy
      static let biometric_settings_activate_face_id = Rswift.StringResource(key: "biometric_settings_activate_face_id", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Activate Touch ID
      ///
      /// Locales: en, ka, hy
      static let biometric_settings_activate_touch_id = Rswift.StringResource(key: "biometric_settings_activate_touch_id", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: en, ka, hy
      static let account_info_address = Rswift.StringResource(key: "account_info_address", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Approve
      ///
      /// Locales: en, ka, hy
      static let approve_address_button_title = Rswift.StringResource(key: "approve_address_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Biometry Authentication Parameters
      ///
      /// Locales: en, ka, hy
      static let biomatry_authentication_parameters = Rswift.StringResource(key: "biomatry_authentication_parameters", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Biometry is not available
      ///
      /// Locales: en, ka, hy
      static let biometric_settings_not_available = Rswift.StringResource(key: "biometric_settings_not_available", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Birth Date
      ///
      /// Locales: en, ka, hy
      static let account_info_birth_date = Rswift.StringResource(key: "account_info_birth_date", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Block Account
      ///
      /// Locales: en, ka, hy
      static let block_accound = Rswift.StringResource(key: "block_accound", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, ka, hy
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Change Address
      ///
      /// Locales: en, ka, hy
      static let address_change_title = Rswift.StringResource(key: "address_change_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Change E-Mail
      ///
      /// Locales: en, ka, hy
      static let mail_change_title = Rswift.StringResource(key: "mail_change_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: en, ka, hy
      static let password_change_title = Rswift.StringResource(key: "password_change_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Code is sent to yout number
      ///
      /// Locales: en, ka, hy
      static let sms_confirmation_description = Rswift.StringResource(key: "sms_confirmation_description", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, ka, hy
      static let p2p_transfer_confirm = Rswift.StringResource(key: "p2p_transfer_confirm", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Contact Information
      ///
      /// Locales: en, ka, hy
      static let account_info_contact_info_title = Rswift.StringResource(key: "account_info_contact_info_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Contact us
      ///
      /// Locales: en, ka, hy
      static let contact_us_button_title = Rswift.StringResource(key: "contact_us_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Country
      ///
      /// Locales: en, ka, hy
      static let account_info_country = Rswift.StringResource(key: "account_info_country", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en, ka, hy
      static let delete_button_title = Rswift.StringResource(key: "delete_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en, ka, hy
      static let notifications_page_delete_title = Rswift.StringResource(key: "notifications_page_delete_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Deposit
      ///
      /// Locales: en, ka, hy
      static let deposit_button_title = Rswift.StringResource(key: "deposit_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Did not receive message?
      ///
      /// Locales: en, ka, hy
      static let sms_did_not_receive_message = Rswift.StringResource(key: "sms_did_not_receive_message", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, ka, hy
      static let cashflow_done_button_title = Rswift.StringResource(key: "cashflow_done_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Enter New Address
      ///
      /// Locales: en, ka, hy
      static let new_address_placeholder = Rswift.StringResource(key: "new_address_placeholder", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Enter New Address
      ///
      /// Locales: en, ka, hy
      static let new_address_subtitle = Rswift.StringResource(key: "new_address_subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Forgot Password?
      ///
      /// Locales: en, ka, hy
      static let login_forgot_password = Rswift.StringResource(key: "login_forgot_password", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Forgot Username?
      ///
      /// Locales: en, ka, hy
      static let login_forgot_username = Rswift.StringResource(key: "login_forgot_username", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Friend ID
      ///
      /// Locales: en, ka, hy
      static let p2p_transfer_friend_id = Rswift.StringResource(key: "p2p_transfer_friend_id", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Games
      ///
      /// Locales: en, ka, hy
      static let home_page_title = Rswift.StringResource(key: "home_page_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Gender
      ///
      /// Locales: en, ka, hy
      static let account_info_gender = Rswift.StringResource(key: "account_info_gender", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Incognito Card
      ///
      /// Locales: en, ka, hy
      static let incognito_card = Rswift.StringResource(key: "incognito_card", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Join now
      ///
      /// Locales: en, ka, hy
      static let join_now = Rswift.StringResource(key: "join_now", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: LOG IN
      ///
      /// Locales: en, ka, hy
      static let login_button_title = Rswift.StringResource(key: "login_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Log Out
      ///
      /// Locales: en, ka, hy
      static let log_out = Rswift.StringResource(key: "log_out", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Log in to
      ///
      /// Locales: en, ka, hy
      static let login_page_title = Rswift.StringResource(key: "login_page_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Log in with face ID
      ///
      /// Locales: en, ka, hy
      static let login_with_face_id_title = Rswift.StringResource(key: "login_with_face_id_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Log in with touch ID
      ///
      /// Locales: en, ka, hy
      static let login_with_touch_id_title = Rswift.StringResource(key: "login_with_touch_id_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en, ka, hy
      static let login = Rswift.StringResource(key: "login", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Mail
      ///
      /// Locales: en, ka, hy
      static let account_info_mail = Rswift.StringResource(key: "account_info_mail", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: My Balance
      ///
      /// Locales: en, ka, hy
      static let balance_title = Rswift.StringResource(key: "balance_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: My Bonuses
      ///
      /// Locales: en, ka, hy
      static let my_bonuses = Rswift.StringResource(key: "my_bonuses", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: My Cards
      ///
      /// Locales: en, ka, hy
      static let my_cards = Rswift.StringResource(key: "my_cards", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, ka, hy
      static let account_info_name = Rswift.StringResource(key: "account_info_name", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: New Password
      ///
      /// Locales: en, ka, hy
      static let new_password = Rswift.StringResource(key: "new_password", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Not a member?
      ///
      /// Locales: en, ka, hy
      static let not_member = Rswift.StringResource(key: "not_member", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Notifications
      ///
      /// Locales: en, ka, hy
      static let notifications_page_title = Rswift.StringResource(key: "notifications_page_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Old Password
      ///
      /// Locales: en, ka, hy
      static let old_password = Rswift.StringResource(key: "old_password", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Online bookmaking is operated by Cosmos LLC, (I/according to the Permit #19-05/284. Legal address: E. Akhvlediani Ascent, N6, Chugureti District, Tbilisi, Georgia. Online games of chance is operated by Aviator LLC (I/N 405076304), according to the Permit #19-06/252. Legal address: E. Akhvlediani Ascent, N6, Chugureti District, Tbilisi, Georgia
      ///
      /// Locales: en, ka, hy
      static let login_legal = Rswift.StringResource(key: "login_legal", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: P2P Transfer
      ///
      /// Locales: en, ka, hy
      static let p2p_transfer_p2p_transfer = Rswift.StringResource(key: "p2p_transfer_p2p_transfer", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, ka, hy
      static let account_info_password = Rswift.StringResource(key: "account_info_password", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, ka, hy
      static let login_password_input_title = Rswift.StringResource(key: "login_password_input_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Personal ID
      ///
      /// Locales: en, ka, hy
      static let account_info_personal_id = Rswift.StringResource(key: "account_info_personal_id", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Personal Information
      ///
      /// Locales: en, ka, hy
      static let account_info_personal_info_title = Rswift.StringResource(key: "account_info_personal_info_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Phone Number
      ///
      /// Locales: en, ka, hy
      static let account_info_phone_number = Rswift.StringResource(key: "account_info_phone_number", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Poker Balance
      ///
      /// Locales: en, ka, hy
      static let poker_balance = Rswift.StringResource(key: "poker_balance", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Private Information
      ///
      /// Locales: en, ka, hy
      static let account_info_private_info_title = Rswift.StringResource(key: "account_info_private_info_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Proceed
      ///
      /// Locales: en, ka, hy
      static let deposit_proceed_button_title = Rswift.StringResource(key: "deposit_proceed_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Proceed
      ///
      /// Locales: en, ka, hy
      static let withdraw_proceed_button_title = Rswift.StringResource(key: "withdraw_proceed_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Promotions
      ///
      /// Locales: en, ka, hy
      static let promotions_page_title = Rswift.StringResource(key: "promotions_page_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Quick Actions
      ///
      /// Locales: en, ka, hy
      static let quick_actions_header_title = Rswift.StringResource(key: "quick_actions_header_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Recently Played
      ///
      /// Locales: en, ka, hy
      static let recently_played = Rswift.StringResource(key: "recently_played", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Repeat New Password
      ///
      /// Locales: en, ka, hy
      static let repeat_password = Rswift.StringResource(key: "repeat_password", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Resend SMS
      ///
      /// Locales: en, ka, hy
      static let sms_resend = Rswift.StringResource(key: "sms_resend", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Resend in
      ///
      /// Locales: en, ka, hy
      static let sms_resend_title = Rswift.StringResource(key: "sms_resend_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: SELF SUSPEND
      ///
      /// Locales: en, ka, hy
      static let account_info_status_button_title = Rswift.StringResource(key: "account_info_status_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: SMS LOGIN
      ///
      /// Locales: en, ka, hy
      static let sms_login_page_title = Rswift.StringResource(key: "sms_login_page_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: SMS Login
      ///
      /// Locales: en, ka, hy
      static let login_sms_login = Rswift.StringResource(key: "login_sms_login", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en, ka, hy
      static let account_info_save_button_title = Rswift.StringResource(key: "account_info_save_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Search for games
      ///
      /// Locales: en, ka, hy
      static let home_search_placeholder = Rswift.StringResource(key: "home_search_placeholder", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Seconds
      ///
      /// Locales: en, ka, hy
      static let sms_resend_time = Rswift.StringResource(key: "sms_resend_time", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Self Suspend
      ///
      /// Locales: en, ka, hy
      static let self_suspend_title = Rswift.StringResource(key: "self_suspend_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, ka, hy
      static let settings = Rswift.StringResource(key: "settings", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Sports
      ///
      /// Locales: en, ka, hy
      static let sports_page_title = Rswift.StringResource(key: "sports_page_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Status
      ///
      /// Locales: en, ka, hy
      static let account_info_status = Rswift.StringResource(key: "account_info_status", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Surname
      ///
      /// Locales: en, ka, hy
      static let account_info_surname = Rswift.StringResource(key: "account_info_surname", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Suspend Duration
      ///
      /// Locales: en, ka, hy
      static let suspend_duration = Rswift.StringResource(key: "suspend_duration", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Total Balance
      ///
      /// Locales: en, ka, hy
      static let total_balance = Rswift.StringResource(key: "total_balance", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Total amount
      ///
      /// Locales: en, ka, hy
      static let p2p_transfer_total_amount = Rswift.StringResource(key: "p2p_transfer_total_amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Transaction History
      ///
      /// Locales: en, ka, hy
      static let transaction_history = Rswift.StringResource(key: "transaction_history", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Transaction commission
      ///
      /// Locales: en, ka, hy
      static let p2p_transfer_transaction_commission = Rswift.StringResource(key: "p2p_transfer_transaction_commission", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Transfer amount
      ///
      /// Locales: en, ka, hy
      static let p2p_transfer_tranfer_amount = Rswift.StringResource(key: "p2p_transfer_tranfer_amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Transfer to a Friend
      ///
      /// Locales: en, ka, hy
      static let transfer_to_a_friend = Rswift.StringResource(key: "transfer_to_a_friend", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Update Password
      ///
      /// Locales: en, ka, hy
      static let update_password_button_title = Rswift.StringResource(key: "update_password_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: User ID
      ///
      /// Locales: en, ka, hy
      static let account_info_user_id = Rswift.StringResource(key: "account_info_user_id", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Username
      ///
      /// Locales: en, ka, hy
      static let account_info_username = Rswift.StringResource(key: "account_info_username", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Username
      ///
      /// Locales: en, ka, hy
      static let login_username_input_title = Rswift.StringResource(key: "login_username_input_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: View All
      ///
      /// Locales: en, ka, hy
      static let view_all = Rswift.StringResource(key: "view_all", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Well done!
      ///
      /// Locales: en, ka, hy
      static let sms_well_done = Rswift.StringResource(key: "sms_well_done", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Withdraw
      ///
      /// Locales: en, ka, hy
      static let withdraw_button_title = Rswift.StringResource(key: "withdraw_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: You are transfering to
      ///
      /// Locales: en, ka, hy
      static let p2p_transfer_you_are_transfering_to = Rswift.StringResource(key: "p2p_transfer_you_are_transfering_to", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Your Account is Verified
      ///
      /// Locales: en, ka, hy
      static let verified = Rswift.StringResource(key: "verified", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: აირჩიეთ სასურველი ბარათი
      ///
      /// Locales: en, ka, hy
      static let withdraw_description_card = Rswift.StringResource(key: "withdraw_description_card", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: ახალი ელ.ფოსტის მისამართი
      ///
      /// Locales: en, ka, hy
      static let new_mail_title = Rswift.StringResource(key: "new_mail_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: ბარათზე თანხის გასატანად, აუცილებელია ვებგვერდზე ატვირთული გქონდეთ პირადობის მოწმობის ფერადი ფოტო
      ///
      /// Locales: en, ka, hy
      static let withdraw_rule1 = Rswift.StringResource(key: "withdraw_rule1", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: ბარათი
      ///
      /// Locales: en, ka, hy
      static let deposit_card_title = Rswift.StringResource(key: "deposit_card_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: ბარათი
      ///
      /// Locales: en, ka, hy
      static let withdraw_card_title = Rswift.StringResource(key: "withdraw_card_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: გადახდის მეთოდი
      ///
      /// Locales: en, ka, hy
      static let deposit_payment_method_title = Rswift.StringResource(key: "deposit_payment_method_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: გაიარეთ ავტორიზაცია
      ///
      /// Locales: en, ka, hy
      static let login_sms_login_title = Rswift.StringResource(key: "login_sms_login_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: გაითვალისწინეთ, რომ განაღდების საკომისიო შეადგენს თანხის 1%-ს
      ///
      /// Locales: en, ka, hy
      static let withdraw_rule2 = Rswift.StringResource(key: "withdraw_rule2", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: გამოიყენეთ ერთი ან მეტი (e.g @$&!)
      ///
      /// Locales: en, ka, hy
      static let rule2 = Rswift.StringResource(key: "rule2", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: გამოიყენეთ მთავრული სიმბოლოები
      ///
      /// Locales: en, ka, hy
      static let rule1 = Rswift.StringResource(key: "rule1", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: გატანის ინსტრუქცია
      ///
      /// Locales: en, ka, hy
      static let withdraw_description_title = Rswift.StringResource(key: "withdraw_description_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: გრაფაში 'თანხა' ჩაწერეთ თვენთვის სასურველი თანხა
      ///
      /// Locales: en, ka, hy
      static let withdraw_description_amount = Rswift.StringResource(key: "withdraw_description_amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: დაადასტურეთ პაროლი უსაფრთხოებისთვის
      ///
      /// Locales: en, ka, hy
      static let approve_password = Rswift.StringResource(key: "approve_password", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: დააჭირეთ ღილაკს 'გაგრძელება' და თანხა გადაირიცხება თქვენს ბარათზე
      ///
      /// Locales: en, ka, hy
      static let withdraw_description_proceed = Rswift.StringResource(key: "withdraw_description_proceed", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: დააჭირეთ ღილაკს გადახდა
      ///
      /// Locales: en, ka, hy
      static let deposit_description_proceed = Rswift.StringResource(key: "deposit_description_proceed", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: ელ.ფოსტის შეცვლა
      ///
      /// Locales: en, ka, hy
      static let change_mail_button_title = Rswift.StringResource(key: "change_mail_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: თანხა
      ///
      /// Locales: en, ka, hy
      static let deposit_amount_title = Rswift.StringResource(key: "deposit_amount_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: თანხა
      ///
      /// Locales: en, ka, hy
      static let withdraw_amount_title = Rswift.StringResource(key: "withdraw_amount_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: თუ გსურთ ანგარიშის ბლოკირებული ვადის გახანგრძლივება დაგვიკავშირდით ცხელ ხაზზე
      ///
      /// Locales: en, ka, hy
      static let suspend_subtitle = Rswift.StringResource(key: "suspend_subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: ლიმიტი ერთ ბარათზე
      ///
      /// Locales: en, ka, hy
      static let deposit_description_title = Rswift.StringResource(key: "deposit_description_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: მინიმუმ 6 და მაქსიმუმ 30 სიმბოლო
      ///
      /// Locales: en, ka, hy
      static let rule3 = Rswift.StringResource(key: "rule3", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: მონიშნე სასურველი დამახსოვრებული ბარათი
      ///
      /// Locales: en, ka, hy
      static let deposit_description_card = Rswift.StringResource(key: "deposit_description_card", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: ტრანზაქციის საკომისიო
      ///
      /// Locales: en, ka, hy
      static let withdraw_commission_title = Rswift.StringResource(key: "withdraw_commission_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: შეიყვანე სასურველი თანხა
      ///
      /// Locales: en, ka, hy
      static let deposit_description_amount = Rswift.StringResource(key: "deposit_description_amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: ჯამური თანხა
      ///
      /// Locales: en, ka, hy
      static let withdraw_total_amount_title = Rswift.StringResource(key: "withdraw_total_amount_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)

      /// en translation: Account Information
      ///
      /// Locales: en, ka, hy
      static func account_information(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_information", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_information"
        }

        return NSLocalizedString("account_information", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Account Information
      ///
      /// Locales: en, ka, hy
      static func account_information_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_information_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_information_title"
        }

        return NSLocalizedString("account_information_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Account Parameters
      ///
      /// Locales: en, ka, hy
      static func account_parameters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_parameters", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_parameters"
        }

        return NSLocalizedString("account_parameters", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Account Parameters
      ///
      /// Locales: en, ka, hy
      static func profile_page_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_page_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "profile_page_title"
        }

        return NSLocalizedString("profile_page_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Activate Biometry
      ///
      /// Locales: en, ka, hy
      static func biometric_settings_activate_biometry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biometric_settings_activate_biometry", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "biometric_settings_activate_biometry"
        }

        return NSLocalizedString("biometric_settings_activate_biometry", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Activate Face ID
      ///
      /// Locales: en, ka, hy
      static func biometric_settings_activate_face_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biometric_settings_activate_face_id", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "biometric_settings_activate_face_id"
        }

        return NSLocalizedString("biometric_settings_activate_face_id", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Activate Touch ID
      ///
      /// Locales: en, ka, hy
      static func biometric_settings_activate_touch_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biometric_settings_activate_touch_id", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "biometric_settings_activate_touch_id"
        }

        return NSLocalizedString("biometric_settings_activate_touch_id", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: en, ka, hy
      static func account_info_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_address", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_address"
        }

        return NSLocalizedString("account_info_address", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Approve
      ///
      /// Locales: en, ka, hy
      static func approve_address_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("approve_address_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "approve_address_button_title"
        }

        return NSLocalizedString("approve_address_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Biometry Authentication Parameters
      ///
      /// Locales: en, ka, hy
      static func biomatry_authentication_parameters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biomatry_authentication_parameters", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "biomatry_authentication_parameters"
        }

        return NSLocalizedString("biomatry_authentication_parameters", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Biometry is not available
      ///
      /// Locales: en, ka, hy
      static func biometric_settings_not_available(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biometric_settings_not_available", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "biometric_settings_not_available"
        }

        return NSLocalizedString("biometric_settings_not_available", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Birth Date
      ///
      /// Locales: en, ka, hy
      static func account_info_birth_date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_birth_date", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_birth_date"
        }

        return NSLocalizedString("account_info_birth_date", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Block Account
      ///
      /// Locales: en, ka, hy
      static func block_accound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("block_accound", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "block_accound"
        }

        return NSLocalizedString("block_accound", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, ka, hy
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Change Address
      ///
      /// Locales: en, ka, hy
      static func address_change_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("address_change_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "address_change_title"
        }

        return NSLocalizedString("address_change_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Change E-Mail
      ///
      /// Locales: en, ka, hy
      static func mail_change_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mail_change_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "mail_change_title"
        }

        return NSLocalizedString("mail_change_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: en, ka, hy
      static func password_change_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password_change_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "password_change_title"
        }

        return NSLocalizedString("password_change_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Code is sent to yout number
      ///
      /// Locales: en, ka, hy
      static func sms_confirmation_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sms_confirmation_description", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sms_confirmation_description"
        }

        return NSLocalizedString("sms_confirmation_description", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, ka, hy
      static func p2p_transfer_confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p2p_transfer_confirm", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "p2p_transfer_confirm"
        }

        return NSLocalizedString("p2p_transfer_confirm", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Contact Information
      ///
      /// Locales: en, ka, hy
      static func account_info_contact_info_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_contact_info_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_contact_info_title"
        }

        return NSLocalizedString("account_info_contact_info_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Contact us
      ///
      /// Locales: en, ka, hy
      static func contact_us_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("contact_us_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "contact_us_button_title"
        }

        return NSLocalizedString("contact_us_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Country
      ///
      /// Locales: en, ka, hy
      static func account_info_country(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_country", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_country"
        }

        return NSLocalizedString("account_info_country", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en, ka, hy
      static func delete_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "delete_button_title"
        }

        return NSLocalizedString("delete_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en, ka, hy
      static func notifications_page_delete_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notifications_page_delete_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "notifications_page_delete_title"
        }

        return NSLocalizedString("notifications_page_delete_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Deposit
      ///
      /// Locales: en, ka, hy
      static func deposit_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deposit_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "deposit_button_title"
        }

        return NSLocalizedString("deposit_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Did not receive message?
      ///
      /// Locales: en, ka, hy
      static func sms_did_not_receive_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sms_did_not_receive_message", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sms_did_not_receive_message"
        }

        return NSLocalizedString("sms_did_not_receive_message", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, ka, hy
      static func cashflow_done_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cashflow_done_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "cashflow_done_button_title"
        }

        return NSLocalizedString("cashflow_done_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Enter New Address
      ///
      /// Locales: en, ka, hy
      static func new_address_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_address_placeholder", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "new_address_placeholder"
        }

        return NSLocalizedString("new_address_placeholder", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Enter New Address
      ///
      /// Locales: en, ka, hy
      static func new_address_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_address_subtitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "new_address_subtitle"
        }

        return NSLocalizedString("new_address_subtitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Forgot Password?
      ///
      /// Locales: en, ka, hy
      static func login_forgot_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_forgot_password", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_forgot_password"
        }

        return NSLocalizedString("login_forgot_password", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Forgot Username?
      ///
      /// Locales: en, ka, hy
      static func login_forgot_username(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_forgot_username", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_forgot_username"
        }

        return NSLocalizedString("login_forgot_username", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Friend ID
      ///
      /// Locales: en, ka, hy
      static func p2p_transfer_friend_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p2p_transfer_friend_id", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "p2p_transfer_friend_id"
        }

        return NSLocalizedString("p2p_transfer_friend_id", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Games
      ///
      /// Locales: en, ka, hy
      static func home_page_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home_page_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "home_page_title"
        }

        return NSLocalizedString("home_page_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Gender
      ///
      /// Locales: en, ka, hy
      static func account_info_gender(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_gender", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_gender"
        }

        return NSLocalizedString("account_info_gender", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Incognito Card
      ///
      /// Locales: en, ka, hy
      static func incognito_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("incognito_card", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "incognito_card"
        }

        return NSLocalizedString("incognito_card", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Join now
      ///
      /// Locales: en, ka, hy
      static func join_now(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("join_now", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "join_now"
        }

        return NSLocalizedString("join_now", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: LOG IN
      ///
      /// Locales: en, ka, hy
      static func login_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_button_title"
        }

        return NSLocalizedString("login_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Log Out
      ///
      /// Locales: en, ka, hy
      static func log_out(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("log_out", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "log_out"
        }

        return NSLocalizedString("log_out", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Log in to
      ///
      /// Locales: en, ka, hy
      static func login_page_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_page_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_page_title"
        }

        return NSLocalizedString("login_page_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Log in with face ID
      ///
      /// Locales: en, ka, hy
      static func login_with_face_id_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_with_face_id_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_with_face_id_title"
        }

        return NSLocalizedString("login_with_face_id_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Log in with touch ID
      ///
      /// Locales: en, ka, hy
      static func login_with_touch_id_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_with_touch_id_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_with_touch_id_title"
        }

        return NSLocalizedString("login_with_touch_id_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en, ka, hy
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login"
        }

        return NSLocalizedString("login", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Mail
      ///
      /// Locales: en, ka, hy
      static func account_info_mail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_mail", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_mail"
        }

        return NSLocalizedString("account_info_mail", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: My Balance
      ///
      /// Locales: en, ka, hy
      static func balance_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("balance_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "balance_title"
        }

        return NSLocalizedString("balance_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: My Bonuses
      ///
      /// Locales: en, ka, hy
      static func my_bonuses(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("my_bonuses", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "my_bonuses"
        }

        return NSLocalizedString("my_bonuses", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: My Cards
      ///
      /// Locales: en, ka, hy
      static func my_cards(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("my_cards", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "my_cards"
        }

        return NSLocalizedString("my_cards", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, ka, hy
      static func account_info_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_name", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_name"
        }

        return NSLocalizedString("account_info_name", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: New Password
      ///
      /// Locales: en, ka, hy
      static func new_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_password", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "new_password"
        }

        return NSLocalizedString("new_password", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Not a member?
      ///
      /// Locales: en, ka, hy
      static func not_member(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("not_member", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "not_member"
        }

        return NSLocalizedString("not_member", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Notifications
      ///
      /// Locales: en, ka, hy
      static func notifications_page_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notifications_page_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "notifications_page_title"
        }

        return NSLocalizedString("notifications_page_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Old Password
      ///
      /// Locales: en, ka, hy
      static func old_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("old_password", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "old_password"
        }

        return NSLocalizedString("old_password", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Online bookmaking is operated by Cosmos LLC, (I/according to the Permit #19-05/284. Legal address: E. Akhvlediani Ascent, N6, Chugureti District, Tbilisi, Georgia. Online games of chance is operated by Aviator LLC (I/N 405076304), according to the Permit #19-06/252. Legal address: E. Akhvlediani Ascent, N6, Chugureti District, Tbilisi, Georgia
      ///
      /// Locales: en, ka, hy
      static func login_legal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_legal", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_legal"
        }

        return NSLocalizedString("login_legal", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: P2P Transfer
      ///
      /// Locales: en, ka, hy
      static func p2p_transfer_p2p_transfer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p2p_transfer_p2p_transfer", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "p2p_transfer_p2p_transfer"
        }

        return NSLocalizedString("p2p_transfer_p2p_transfer", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, ka, hy
      static func account_info_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_password", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_password"
        }

        return NSLocalizedString("account_info_password", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, ka, hy
      static func login_password_input_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_password_input_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_password_input_title"
        }

        return NSLocalizedString("login_password_input_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Personal ID
      ///
      /// Locales: en, ka, hy
      static func account_info_personal_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_personal_id", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_personal_id"
        }

        return NSLocalizedString("account_info_personal_id", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Personal Information
      ///
      /// Locales: en, ka, hy
      static func account_info_personal_info_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_personal_info_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_personal_info_title"
        }

        return NSLocalizedString("account_info_personal_info_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Phone Number
      ///
      /// Locales: en, ka, hy
      static func account_info_phone_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_phone_number", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_phone_number"
        }

        return NSLocalizedString("account_info_phone_number", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Poker Balance
      ///
      /// Locales: en, ka, hy
      static func poker_balance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("poker_balance", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "poker_balance"
        }

        return NSLocalizedString("poker_balance", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Private Information
      ///
      /// Locales: en, ka, hy
      static func account_info_private_info_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_private_info_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_private_info_title"
        }

        return NSLocalizedString("account_info_private_info_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Proceed
      ///
      /// Locales: en, ka, hy
      static func deposit_proceed_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deposit_proceed_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "deposit_proceed_button_title"
        }

        return NSLocalizedString("deposit_proceed_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Proceed
      ///
      /// Locales: en, ka, hy
      static func withdraw_proceed_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_proceed_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_proceed_button_title"
        }

        return NSLocalizedString("withdraw_proceed_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Promotions
      ///
      /// Locales: en, ka, hy
      static func promotions_page_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("promotions_page_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "promotions_page_title"
        }

        return NSLocalizedString("promotions_page_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Quick Actions
      ///
      /// Locales: en, ka, hy
      static func quick_actions_header_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("quick_actions_header_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "quick_actions_header_title"
        }

        return NSLocalizedString("quick_actions_header_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Recently Played
      ///
      /// Locales: en, ka, hy
      static func recently_played(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recently_played", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "recently_played"
        }

        return NSLocalizedString("recently_played", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Repeat New Password
      ///
      /// Locales: en, ka, hy
      static func repeat_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("repeat_password", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "repeat_password"
        }

        return NSLocalizedString("repeat_password", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Resend SMS
      ///
      /// Locales: en, ka, hy
      static func sms_resend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sms_resend", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sms_resend"
        }

        return NSLocalizedString("sms_resend", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Resend in
      ///
      /// Locales: en, ka, hy
      static func sms_resend_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sms_resend_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sms_resend_title"
        }

        return NSLocalizedString("sms_resend_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: SELF SUSPEND
      ///
      /// Locales: en, ka, hy
      static func account_info_status_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_status_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_status_button_title"
        }

        return NSLocalizedString("account_info_status_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: SMS LOGIN
      ///
      /// Locales: en, ka, hy
      static func sms_login_page_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sms_login_page_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sms_login_page_title"
        }

        return NSLocalizedString("sms_login_page_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: SMS Login
      ///
      /// Locales: en, ka, hy
      static func login_sms_login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_sms_login", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_sms_login"
        }

        return NSLocalizedString("login_sms_login", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en, ka, hy
      static func account_info_save_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_save_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_save_button_title"
        }

        return NSLocalizedString("account_info_save_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Search for games
      ///
      /// Locales: en, ka, hy
      static func home_search_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home_search_placeholder", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "home_search_placeholder"
        }

        return NSLocalizedString("home_search_placeholder", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Seconds
      ///
      /// Locales: en, ka, hy
      static func sms_resend_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sms_resend_time", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sms_resend_time"
        }

        return NSLocalizedString("sms_resend_time", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Self Suspend
      ///
      /// Locales: en, ka, hy
      static func self_suspend_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("self_suspend_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "self_suspend_title"
        }

        return NSLocalizedString("self_suspend_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, ka, hy
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "settings"
        }

        return NSLocalizedString("settings", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Sports
      ///
      /// Locales: en, ka, hy
      static func sports_page_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sports_page_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sports_page_title"
        }

        return NSLocalizedString("sports_page_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Status
      ///
      /// Locales: en, ka, hy
      static func account_info_status(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_status", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_status"
        }

        return NSLocalizedString("account_info_status", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Surname
      ///
      /// Locales: en, ka, hy
      static func account_info_surname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_surname", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_surname"
        }

        return NSLocalizedString("account_info_surname", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Suspend Duration
      ///
      /// Locales: en, ka, hy
      static func suspend_duration(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("suspend_duration", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "suspend_duration"
        }

        return NSLocalizedString("suspend_duration", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Total Balance
      ///
      /// Locales: en, ka, hy
      static func total_balance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("total_balance", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "total_balance"
        }

        return NSLocalizedString("total_balance", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Total amount
      ///
      /// Locales: en, ka, hy
      static func p2p_transfer_total_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p2p_transfer_total_amount", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "p2p_transfer_total_amount"
        }

        return NSLocalizedString("p2p_transfer_total_amount", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Transaction History
      ///
      /// Locales: en, ka, hy
      static func transaction_history(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction_history", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "transaction_history"
        }

        return NSLocalizedString("transaction_history", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Transaction commission
      ///
      /// Locales: en, ka, hy
      static func p2p_transfer_transaction_commission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p2p_transfer_transaction_commission", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "p2p_transfer_transaction_commission"
        }

        return NSLocalizedString("p2p_transfer_transaction_commission", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Transfer amount
      ///
      /// Locales: en, ka, hy
      static func p2p_transfer_tranfer_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p2p_transfer_tranfer_amount", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "p2p_transfer_tranfer_amount"
        }

        return NSLocalizedString("p2p_transfer_tranfer_amount", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Transfer to a Friend
      ///
      /// Locales: en, ka, hy
      static func transfer_to_a_friend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transfer_to_a_friend", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "transfer_to_a_friend"
        }

        return NSLocalizedString("transfer_to_a_friend", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Update Password
      ///
      /// Locales: en, ka, hy
      static func update_password_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("update_password_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "update_password_button_title"
        }

        return NSLocalizedString("update_password_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: User ID
      ///
      /// Locales: en, ka, hy
      static func account_info_user_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_user_id", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_user_id"
        }

        return NSLocalizedString("account_info_user_id", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Username
      ///
      /// Locales: en, ka, hy
      static func account_info_username(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_username", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_username"
        }

        return NSLocalizedString("account_info_username", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Username
      ///
      /// Locales: en, ka, hy
      static func login_username_input_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_username_input_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_username_input_title"
        }

        return NSLocalizedString("login_username_input_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: View All
      ///
      /// Locales: en, ka, hy
      static func view_all(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_all", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "view_all"
        }

        return NSLocalizedString("view_all", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Well done!
      ///
      /// Locales: en, ka, hy
      static func sms_well_done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sms_well_done", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sms_well_done"
        }

        return NSLocalizedString("sms_well_done", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Withdraw
      ///
      /// Locales: en, ka, hy
      static func withdraw_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_button_title"
        }

        return NSLocalizedString("withdraw_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: You are transfering to
      ///
      /// Locales: en, ka, hy
      static func p2p_transfer_you_are_transfering_to(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p2p_transfer_you_are_transfering_to", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "p2p_transfer_you_are_transfering_to"
        }

        return NSLocalizedString("p2p_transfer_you_are_transfering_to", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Your Account is Verified
      ///
      /// Locales: en, ka, hy
      static func verified(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verified", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "verified"
        }

        return NSLocalizedString("verified", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: აირჩიეთ სასურველი ბარათი
      ///
      /// Locales: en, ka, hy
      static func withdraw_description_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_description_card", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_description_card"
        }

        return NSLocalizedString("withdraw_description_card", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: ახალი ელ.ფოსტის მისამართი
      ///
      /// Locales: en, ka, hy
      static func new_mail_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_mail_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "new_mail_title"
        }

        return NSLocalizedString("new_mail_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: ბარათზე თანხის გასატანად, აუცილებელია ვებგვერდზე ატვირთული გქონდეთ პირადობის მოწმობის ფერადი ფოტო
      ///
      /// Locales: en, ka, hy
      static func withdraw_rule1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_rule1", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_rule1"
        }

        return NSLocalizedString("withdraw_rule1", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: ბარათი
      ///
      /// Locales: en, ka, hy
      static func deposit_card_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deposit_card_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "deposit_card_title"
        }

        return NSLocalizedString("deposit_card_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: ბარათი
      ///
      /// Locales: en, ka, hy
      static func withdraw_card_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_card_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_card_title"
        }

        return NSLocalizedString("withdraw_card_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: გადახდის მეთოდი
      ///
      /// Locales: en, ka, hy
      static func deposit_payment_method_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deposit_payment_method_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "deposit_payment_method_title"
        }

        return NSLocalizedString("deposit_payment_method_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: გაიარეთ ავტორიზაცია
      ///
      /// Locales: en, ka, hy
      static func login_sms_login_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_sms_login_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_sms_login_title"
        }

        return NSLocalizedString("login_sms_login_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: გაითვალისწინეთ, რომ განაღდების საკომისიო შეადგენს თანხის 1%-ს
      ///
      /// Locales: en, ka, hy
      static func withdraw_rule2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_rule2", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_rule2"
        }

        return NSLocalizedString("withdraw_rule2", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: გამოიყენეთ ერთი ან მეტი (e.g @$&!)
      ///
      /// Locales: en, ka, hy
      static func rule2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rule2", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "rule2"
        }

        return NSLocalizedString("rule2", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: გამოიყენეთ მთავრული სიმბოლოები
      ///
      /// Locales: en, ka, hy
      static func rule1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rule1", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "rule1"
        }

        return NSLocalizedString("rule1", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: გატანის ინსტრუქცია
      ///
      /// Locales: en, ka, hy
      static func withdraw_description_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_description_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_description_title"
        }

        return NSLocalizedString("withdraw_description_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: გრაფაში 'თანხა' ჩაწერეთ თვენთვის სასურველი თანხა
      ///
      /// Locales: en, ka, hy
      static func withdraw_description_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_description_amount", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_description_amount"
        }

        return NSLocalizedString("withdraw_description_amount", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: დაადასტურეთ პაროლი უსაფრთხოებისთვის
      ///
      /// Locales: en, ka, hy
      static func approve_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("approve_password", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "approve_password"
        }

        return NSLocalizedString("approve_password", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: დააჭირეთ ღილაკს 'გაგრძელება' და თანხა გადაირიცხება თქვენს ბარათზე
      ///
      /// Locales: en, ka, hy
      static func withdraw_description_proceed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_description_proceed", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_description_proceed"
        }

        return NSLocalizedString("withdraw_description_proceed", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: დააჭირეთ ღილაკს გადახდა
      ///
      /// Locales: en, ka, hy
      static func deposit_description_proceed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deposit_description_proceed", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "deposit_description_proceed"
        }

        return NSLocalizedString("deposit_description_proceed", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: ელ.ფოსტის შეცვლა
      ///
      /// Locales: en, ka, hy
      static func change_mail_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("change_mail_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "change_mail_button_title"
        }

        return NSLocalizedString("change_mail_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: თანხა
      ///
      /// Locales: en, ka, hy
      static func deposit_amount_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deposit_amount_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "deposit_amount_title"
        }

        return NSLocalizedString("deposit_amount_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: თანხა
      ///
      /// Locales: en, ka, hy
      static func withdraw_amount_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_amount_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_amount_title"
        }

        return NSLocalizedString("withdraw_amount_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: თუ გსურთ ანგარიშის ბლოკირებული ვადის გახანგრძლივება დაგვიკავშირდით ცხელ ხაზზე
      ///
      /// Locales: en, ka, hy
      static func suspend_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("suspend_subtitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "suspend_subtitle"
        }

        return NSLocalizedString("suspend_subtitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: ლიმიტი ერთ ბარათზე
      ///
      /// Locales: en, ka, hy
      static func deposit_description_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deposit_description_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "deposit_description_title"
        }

        return NSLocalizedString("deposit_description_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: მინიმუმ 6 და მაქსიმუმ 30 სიმბოლო
      ///
      /// Locales: en, ka, hy
      static func rule3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rule3", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "rule3"
        }

        return NSLocalizedString("rule3", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: მონიშნე სასურველი დამახსოვრებული ბარათი
      ///
      /// Locales: en, ka, hy
      static func deposit_description_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deposit_description_card", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "deposit_description_card"
        }

        return NSLocalizedString("deposit_description_card", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: ტრანზაქციის საკომისიო
      ///
      /// Locales: en, ka, hy
      static func withdraw_commission_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_commission_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_commission_title"
        }

        return NSLocalizedString("withdraw_commission_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: შეიყვანე სასურველი თანხა
      ///
      /// Locales: en, ka, hy
      static func deposit_description_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deposit_description_amount", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "deposit_description_amount"
        }

        return NSLocalizedString("deposit_description_amount", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: ჯამური თანხა
      ///
      /// Locales: en, ka, hy
      static func withdraw_total_amount_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_total_amount_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_total_amount_title"
        }

        return NSLocalizedString("withdraw_total_amount_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _BalanceComponentView.validate()
      try _CashFlowTabComponentView.validate()
      try _FooterComponentView.validate()
      try _GameLauncherComponentView.validate()
      try _ProfileInfoComponentView.validate()
      try _TransactionHistoryComponentView.validate()
      try _WithdrawTermsView.validate()
    }

    struct _ABInputView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ABInputView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _AccountInfoComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AccountInfoComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _BalanceComponentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BalanceComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Components/GameLauncher/in", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Components/GameLauncher/in' is used in nib 'BalanceComponentView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _BalanceTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BalanceTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BalanceTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BalanceTableViewCell
      }

      fileprivate init() {}
    }

    struct _CashFlowTabComponentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CashFlowTabComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Components/QuickAction/deposit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Components/QuickAction/deposit' is used in nib 'CashFlowTabComponentView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Components/QuickAction/withdraw", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Components/QuickAction/withdraw' is used in nib 'CashFlowTabComponentView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DepositInstructionView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DepositInstructionView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _FooterComponentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FooterComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Login/legal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Login/legal' is used in nib 'FooterComponentView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Shared/phone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Shared/phone' is used in nib 'FooterComponentView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FooterTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FooterTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FooterTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FooterTableViewCell
      }

      fileprivate init() {}
    }

    struct _GameLauncherCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GameLauncherCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GameLauncherCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GameLauncherCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _GameLauncherComponentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GameLauncherComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Components/GameLauncher/in", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Components/GameLauncher/in' is used in nib 'GameLauncherComponentView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ColorGuide/Neutral/neutral600", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ColorGuide/Neutral/neutral600' is used in storyboard 'GameLauncherComponentView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "ColorGuide/Neutral/neutral700", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ColorGuide/Neutral/neutral700' is used in storyboard 'GameLauncherComponentView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _LabelComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LabelComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _LoadingCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LoadingCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoadingCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoadingCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _LoadingComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LoadingComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _NotificationComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NotificationComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _NotificationTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NotificationTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTableViewCell
      }

      fileprivate init() {}
    }

    struct _NotificationsHeaderCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NotificationsHeaderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationsHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationsHeaderCell
      }

      fileprivate init() {}
    }

    struct _NotificationsHeaderComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NotificationsHeaderComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PasswordChangeRulesView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PasswordChangeRulesView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PlayedGameLauncherCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PlayedGameLauncherCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlayedGameLauncherCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlayedGameLauncherCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _PlayedGameLauncherComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PlayedGameLauncherComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ProfileInfoComponentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProfileInfoComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Components/ProfileCell/copy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Components/ProfileCell/copy' is used in nib 'ProfileInfoComponentView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Components/ProfileCell/verified", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Components/ProfileCell/verified' is used in nib 'ProfileInfoComponentView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProfileInfoTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProfileInfoTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileInfoTableViewCell
      }

      fileprivate init() {}
    }

    struct _PromotionComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PromotionComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PromotionTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PromotionTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PromotionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PromotionTableViewCell
      }

      fileprivate init() {}
    }

    struct _QuickActionComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "QuickActionComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _QuickActionTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "QuickActionTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuickActionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuickActionTableViewCell
      }

      fileprivate init() {}
    }

    struct _QuickActionsHeaderCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "QuickActionsHeaderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuickActionsHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuickActionsHeaderCell
      }

      fileprivate init() {}
    }

    struct _QuickActionsHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "QuickActionsHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _RecentlyPlayedCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RecentlyPlayedCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecentlyPlayedCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecentlyPlayedCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _RecentlyPlayedComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RecentlyPlayedComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _TimerComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TimerComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _TransactionDetailsComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionDetailsComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _TransactionDetailsTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionDetailsTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionDetailsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionDetailsTableViewCell
      }

      fileprivate init() {}
    }

    struct _TransactionHistoryComponentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TransactionHistoryComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "TransactionsHistory/deposit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TransactionsHistory/deposit' is used in nib 'TransactionHistoryComponentView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ColorGuide/SystemGrays/systemGrey2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ColorGuide/SystemGrays/systemGrey2' is used in storyboard 'TransactionHistoryComponentView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _TransactionHistoryHeaderCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionHistoryHeaderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionHistoryHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionHistoryHeaderCell
      }

      fileprivate init() {}
    }

    struct _TransactionHistoryHeaderComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionHistoryHeaderComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _TransactionHistoryTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionHistoryTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionHistoryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionHistoryTableViewCell
      }

      fileprivate init() {}
    }

    struct _WithdrawInstructionView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WithdrawInstructionView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _WithdrawTermsView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WithdrawTermsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Withdraw/info", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Withdraw/info' is used in nib 'WithdrawTermsView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try accountInfo.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try addressChange.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try biometricSettingsView.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try cashFlow.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try deposit.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try home.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try login.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mailChange.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mainTabBar.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try notificationContent.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try notifications.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try p2PTransferView.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try passwordChange.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profile.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try promotions.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try smsLogin.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try selfSuspend.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try sports.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try transactionDetails.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try transactions.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try withdraw.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct accountInfo: Rswift.StoryboardResourceType, Rswift.Validatable {
      let accountInfoViewController = StoryboardViewControllerResource<AccountInfoViewController>(identifier: "AccountInfoViewController")
      let bundle = R.hostingBundle
      let name = "AccountInfo"

      func accountInfoViewController(_: Void = ()) -> AccountInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: accountInfoViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Components/GameLauncher/in", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Components/GameLauncher/in' is used in storyboard 'AccountInfo', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.accountInfo().accountInfoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'accountInfoViewController' could not be loaded from storyboard 'AccountInfo' as 'AccountInfoViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct addressChange: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addressChangeViewController = StoryboardViewControllerResource<AddressChangeViewController>(identifier: "AddressChangeViewController")
      let bundle = R.hostingBundle
      let name = "AddressChange"

      func addressChangeViewController(_: Void = ()) -> AddressChangeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addressChangeViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.addressChange().addressChangeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addressChangeViewController' could not be loaded from storyboard 'AddressChange' as 'AddressChangeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct biometricSettingsView: Rswift.StoryboardResourceType, Rswift.Validatable {
      let biometricSettingsViewController = StoryboardViewControllerResource<BiometricSettingsViewController>(identifier: "BiometricSettingsViewController")
      let bundle = R.hostingBundle
      let name = "BiometricSettingsView"

      func biometricSettingsViewController(_: Void = ()) -> BiometricSettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: biometricSettingsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.biometricSettingsView().biometricSettingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'biometricSettingsViewController' could not be loaded from storyboard 'BiometricSettingsView' as 'BiometricSettingsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct cashFlow: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let cashFlowViewController = StoryboardViewControllerResource<CashFlowViewController>(identifier: "CashFlowViewController")
      let name = "CashFlow"

      func cashFlowViewController(_: Void = ()) -> CashFlowViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cashFlowViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.cashFlow().cashFlowViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cashFlowViewController' could not be loaded from storyboard 'CashFlow' as 'CashFlowViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct deposit: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let depositViewController = StoryboardViewControllerResource<DepositViewController>(identifier: "DepositViewController")
      let name = "Deposit"

      func depositViewController(_: Void = ()) -> DepositViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: depositViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.deposit().depositViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'depositViewController' could not be loaded from storyboard 'Deposit' as 'DepositViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct home: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HomeViewController

      let bundle = R.hostingBundle
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let name = "Home"

      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.home().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Home' as 'HomeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginViewController

      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Login"

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Login/logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Login/logo' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Shared/faceID", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Shared/faceID' is used in storyboard 'Login', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.login().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mailChange: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mailChangeViewController = StoryboardViewControllerResource<MailChangeViewController>(identifier: "MailChangeViewController")
      let name = "MailChange"

      func mailChangeViewController(_: Void = ()) -> MailChangeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mailChangeViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.mailChange().mailChangeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mailChangeViewController' could not be loaded from storyboard 'MailChange' as 'MailChangeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mainTabBar: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainTabBarViewController

      let bundle = R.hostingBundle
      let mainTabBarViewController = StoryboardViewControllerResource<MainTabBarViewController>(identifier: "MainTabBarViewController")
      let name = "MainTabBar"

      func mainTabBarViewController(_: Void = ()) -> MainTabBarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabBarViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.mainTabBar().mainTabBarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabBarViewController' could not be loaded from storyboard 'MainTabBar' as 'MainTabBarViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct notificationContent: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NotificationContent"
      let notificationContentViewController = StoryboardViewControllerResource<NotificationContentViewController>(identifier: "NotificationContentViewController")

      func notificationContentViewController(_: Void = ()) -> NotificationContentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationContentViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.notificationContent().notificationContentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationContentViewController' could not be loaded from storyboard 'NotificationContent' as 'NotificationContentViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct notifications: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NotificationsViewController

      let bundle = R.hostingBundle
      let name = "Notifications"
      let notificationsViewController = StoryboardViewControllerResource<NotificationsViewController>(identifier: "NotificationsViewController")

      func notificationsViewController(_: Void = ()) -> NotificationsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.notifications().notificationsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationsViewController' could not be loaded from storyboard 'Notifications' as 'NotificationsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct p2PTransferView: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "P2PTransferView"
      let p2PTransferViewController = StoryboardViewControllerResource<P2PTransferViewController>(identifier: "P2PTransferViewController")

      func p2PTransferViewController(_: Void = ()) -> P2PTransferViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: p2PTransferViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Withdraw/info", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Withdraw/info' is used in storyboard 'P2PTransferView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.p2PTransferView().p2PTransferViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'p2PTransferViewController' could not be loaded from storyboard 'P2PTransferView' as 'P2PTransferViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct passwordChange: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PasswordChange"
      let passwordChangeViewController = StoryboardViewControllerResource<PasswordChangeViewController>(identifier: "PasswordChangeViewController")

      func passwordChangeViewController(_: Void = ()) -> PasswordChangeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: passwordChangeViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.passwordChange().passwordChangeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'passwordChangeViewController' could not be loaded from storyboard 'PasswordChange' as 'PasswordChangeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profile: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Profile"
      let profileViewController = StoryboardViewControllerResource<ProfileViewController>(identifier: "ProfileViewController")

      func profileViewController(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.profile().profileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'Profile' as 'ProfileViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct promotions: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Promotions"
      let promotionsViewController = StoryboardViewControllerResource<PromotionsViewController>(identifier: "PromotionsViewController")

      func promotionsViewController(_: Void = ()) -> PromotionsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: promotionsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.promotions().promotionsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'promotionsViewController' could not be loaded from storyboard 'Promotions' as 'PromotionsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct selfSuspend: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SelfSuspend"
      let selfSuspendViewController = StoryboardViewControllerResource<SelfSuspendViewController>(identifier: "SelfSuspendViewController")

      func selfSuspendViewController(_: Void = ()) -> SelfSuspendViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selfSuspendViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.selfSuspend().selfSuspendViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selfSuspendViewController' could not be loaded from storyboard 'SelfSuspend' as 'SelfSuspendViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct smsLogin: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SMSLoginViewController

      let bundle = R.hostingBundle
      let name = "SMSLogin"
      let smsLoginViewController = StoryboardViewControllerResource<SMSLoginViewController>(identifier: "SMSLoginViewController")

      func smsLoginViewController(_: Void = ()) -> SMSLoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: smsLoginViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "SMSLogin/resend", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SMSLogin/resend' is used in storyboard 'SMSLogin', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.smsLogin().smsLoginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'smsLoginViewController' could not be loaded from storyboard 'SMSLogin' as 'SMSLoginViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct sports: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SportsViewController

      let bundle = R.hostingBundle
      let name = "Sports"
      let sportsViewController = StoryboardViewControllerResource<SportsViewController>(identifier: "SportsViewController")

      func sportsViewController(_: Void = ()) -> SportsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sportsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.sports().sportsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sportsViewController' could not be loaded from storyboard 'Sports' as 'SportsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct transactionDetails: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TransactionDetails"
      let transactionDetailsViewController = StoryboardViewControllerResource<TransactionDetailsViewController>(identifier: "TransactionDetailsViewController")

      func transactionDetailsViewController(_: Void = ()) -> TransactionDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: transactionDetailsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.transactionDetails().transactionDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'transactionDetailsViewController' could not be loaded from storyboard 'TransactionDetails' as 'TransactionDetailsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct transactions: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Transactions"
      let transactionsViewController = StoryboardViewControllerResource<TransactionsViewController>(identifier: "TransactionsViewController")

      func transactionsViewController(_: Void = ()) -> TransactionsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: transactionsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.transactions().transactionsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'transactionsViewController' could not be loaded from storyboard 'Transactions' as 'TransactionsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct withdraw: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Withdraw"
      let withdrawViewController = StoryboardViewControllerResource<WithdrawViewController>(identifier: "WithdrawViewController")

      func withdrawViewController(_: Void = ()) -> WithdrawViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: withdrawViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.withdraw().withdrawViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'withdrawViewController' could not be loaded from storyboard 'Withdraw' as 'WithdrawViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
