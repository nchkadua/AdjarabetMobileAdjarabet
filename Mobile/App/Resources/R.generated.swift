//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 34 storyboards.
  struct storyboard {
    /// Storyboard `AccessHistoryCalendar`.
    static let accessHistoryCalendar = _R.storyboard.accessHistoryCalendar()
    /// Storyboard `AccessHistory`.
    static let accessHistory = _R.storyboard.accessHistory()
    /// Storyboard `AccountInfo`.
    static let accountInfo = _R.storyboard.accountInfo()
    /// Storyboard `AccountParameters`.
    static let accountParameters = _R.storyboard.accountParameters()
    /// Storyboard `AddCard`.
    static let addCard = _R.storyboard.addCard()
    /// Storyboard `AddressChange`.
    static let addressChange = _R.storyboard.addressChange()
    /// Storyboard `BiometricSettingsView`.
    static let biometricSettingsView = _R.storyboard.biometricSettingsView()
    /// Storyboard `Deposit`.
    static let deposit = _R.storyboard.deposit()
    /// Storyboard `Emoney`.
    static let emoney = _R.storyboard.emoney()
    /// Storyboard `Game`.
    static let game = _R.storyboard.game()
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `MailChange`.
    static let mailChange = _R.storyboard.mailChange()
    /// Storyboard `MainContainer`.
    static let mainContainer = _R.storyboard.mainContainer()
    /// Storyboard `MainTabBar`.
    static let mainTabBar = _R.storyboard.mainTabBar()
    /// Storyboard `MyCards`.
    static let myCards = _R.storyboard.myCards()
    /// Storyboard `NotificationContent`.
    static let notificationContent = _R.storyboard.notificationContent()
    /// Storyboard `Notifications`.
    static let notifications = _R.storyboard.notifications()
    /// Storyboard `OTPLogin`.
    static let otpLogin = _R.storyboard.otpLogin()
    /// Storyboard `P2PTransferView`.
    static let p2PTransferView = _R.storyboard.p2PTransferView()
    /// Storyboard `PasswordChange`.
    static let passwordChange = _R.storyboard.passwordChange()
    /// Storyboard `PhoneNumberChange`.
    static let phoneNumberChange = _R.storyboard.phoneNumberChange()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `Promotions`.
    static let promotions = _R.storyboard.promotions()
    /// Storyboard `SecurityLevels`.
    static let securityLevels = _R.storyboard.securityLevels()
    /// Storyboard `SelfSuspend`.
    static let selfSuspend = _R.storyboard.selfSuspend()
    /// Storyboard `Sports`.
    static let sports = _R.storyboard.sports()
    /// Storyboard `TransactionDetails`.
    static let transactionDetails = _R.storyboard.transactionDetails()
    /// Storyboard `TransactionsFilter`.
    static let transactionsFilter = _R.storyboard.transactionsFilter()
    /// Storyboard `Transactions`.
    static let transactions = _R.storyboard.transactions()
    /// Storyboard `Visa`.
    static let visa = _R.storyboard.visa()
    /// Storyboard `Web`.
    static let web = _R.storyboard.web()
    /// Storyboard `Withdraw`.
    static let withdraw = _R.storyboard.withdraw()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AccessHistory", bundle: ...)`
    static func accessHistory(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.accessHistory)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AccessHistoryCalendar", bundle: ...)`
    static func accessHistoryCalendar(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.accessHistoryCalendar)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AccountInfo", bundle: ...)`
    static func accountInfo(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.accountInfo)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AccountParameters", bundle: ...)`
    static func accountParameters(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.accountParameters)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AddCard", bundle: ...)`
    static func addCard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addCard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AddressChange", bundle: ...)`
    static func addressChange(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addressChange)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "BiometricSettingsView", bundle: ...)`
    static func biometricSettingsView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.biometricSettingsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Deposit", bundle: ...)`
    static func deposit(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.deposit)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Emoney", bundle: ...)`
    static func emoney(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.emoney)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Game", bundle: ...)`
    static func game(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.game)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MailChange", bundle: ...)`
    static func mailChange(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mailChange)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MainContainer", bundle: ...)`
    static func mainContainer(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainContainer)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MainTabBar", bundle: ...)`
    static func mainTabBar(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainTabBar)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MyCards", bundle: ...)`
    static func myCards(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myCards)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "NotificationContent", bundle: ...)`
    static func notificationContent(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.notificationContent)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Notifications", bundle: ...)`
    static func notifications(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.notifications)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "OTPLogin", bundle: ...)`
    static func otpLogin(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.otpLogin)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "P2PTransferView", bundle: ...)`
    static func p2PTransferView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.p2PTransferView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "PasswordChange", bundle: ...)`
    static func passwordChange(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.passwordChange)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "PhoneNumberChange", bundle: ...)`
    static func phoneNumberChange(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.phoneNumberChange)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Promotions", bundle: ...)`
    static func promotions(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.promotions)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SecurityLevels", bundle: ...)`
    static func securityLevels(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.securityLevels)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SelfSuspend", bundle: ...)`
    static func selfSuspend(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.selfSuspend)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Sports", bundle: ...)`
    static func sports(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sports)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "TransactionDetails", bundle: ...)`
    static func transactionDetails(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.transactionDetails)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Transactions", bundle: ...)`
    static func transactions(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.transactions)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "TransactionsFilter", bundle: ...)`
    static func transactionsFilter(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.transactionsFilter)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Visa", bundle: ...)`
    static func visa(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.visa)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Web", bundle: ...)`
    static func web(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.web)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Withdraw", bundle: ...)`
    static func withdraw(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.withdraw)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    /// This `R.color.colorGuide` struct is generated, and contains static references to 0 colors.
    struct colorGuide {
      /// This `R.color.colorGuide.adjaraSolids` struct is generated, and contains static references to 4 colors.
      struct adjaraSolids {
        /// Color `primaryGreenNeutral`.
        static let primaryGreenNeutral = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/AdjaraSolids/primaryGreenNeutral")
        /// Color `primaryRedDark`.
        static let primaryRedDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/AdjaraSolids/primaryRedDark")
        /// Color `primaryRedNeutral`.
        static let primaryRedNeutral = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/AdjaraSolids/primaryRedNeutral")
        /// Color `primaryRed`.
        static let primaryRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/AdjaraSolids/primaryRed")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "primaryGreenNeutral", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func primaryGreenNeutral(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.adjaraSolids.primaryGreenNeutral, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "primaryRed", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func primaryRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.adjaraSolids.primaryRed, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "primaryRedDark", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func primaryRedDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.adjaraSolids.primaryRedDark, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "primaryRedNeutral", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func primaryRedNeutral(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.adjaraSolids.primaryRedNeutral, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.color.colorGuide.fillColors` struct is generated, and contains static references to 4 colors.
      struct fillColors {
        /// Color `primary`.
        static let primary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/FillColors/primary")
        /// Color `querternary`.
        static let querternary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/FillColors/querternary")
        /// Color `secondary`.
        static let secondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/FillColors/secondary")
        /// Color `tertiary`.
        static let tertiary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/FillColors/tertiary")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "primary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func primary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.fillColors.primary, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "querternary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func querternary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.fillColors.querternary, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "secondary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func secondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.fillColors.secondary, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "tertiary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func tertiary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.fillColors.tertiary, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.color.colorGuide.materials` struct is generated, and contains static references to 6 colors.
      struct materials {
        /// Color `Ultrathin`.
        static let ultrathin = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Materials/Ultrathin")
        /// Color `navBar`.
        static let navBar = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Materials/navBar")
        /// Color `regular`.
        static let regular = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Materials/regular")
        /// Color `tabBar`.
        static let tabBar = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Materials/tabBar")
        /// Color `thick`.
        static let thick = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Materials/thick")
        /// Color `thin`.
        static let thin = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Materials/thin")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "Ultrathin", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func ultrathin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.materials.ultrathin, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "navBar", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func navBar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.materials.navBar, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "regular", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func regular(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.materials.regular, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "tabBar", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func tabBar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.materials.tabBar, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "thick", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func thick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.materials.thick, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "thin", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func thin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.materials.thin, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.color.colorGuide.separator` struct is generated, and contains static references to 2 colors.
      struct separator {
        /// Color `non_opaque`.
        static let non_opaque = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Separator/non_opaque")
        /// Color `opaque`.
        static let opaque = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/Separator/opaque")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "non_opaque", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func non_opaque(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.separator.non_opaque, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "opaque", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func opaque(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.separator.opaque, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.color.colorGuide.systemBackground` struct is generated, and contains static references to 4 colors.
      struct systemBackground {
        /// Color `primary`.
        static let primary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemBackground/primary")
        /// Color `querternary`.
        static let querternary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemBackground/querternary")
        /// Color `secondary`.
        static let secondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemBackground/secondary")
        /// Color `tertiary`.
        static let tertiary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemBackground/tertiary")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "primary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func primary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemBackground.primary, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "querternary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func querternary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemBackground.querternary, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "secondary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func secondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemBackground.secondary, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "tertiary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func tertiary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemBackground.tertiary, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.color.colorGuide.systemGrays` struct is generated, and contains static references to 6 colors.
      struct systemGrays {
        /// Color `systemGrey2`.
        static let systemGrey2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemGrays/systemGrey2")
        /// Color `systemGrey3`.
        static let systemGrey3 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemGrays/systemGrey3")
        /// Color `systemGrey4`.
        static let systemGrey4 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemGrays/systemGrey4")
        /// Color `systemGrey5`.
        static let systemGrey5 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemGrays/systemGrey5")
        /// Color `systemGrey6`.
        static let systemGrey6 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemGrays/systemGrey6")
        /// Color `systemGrey`.
        static let systemGrey = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemGrays/systemGrey")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemGrey", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemGrays.systemGrey, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemGrey2", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemGrey2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemGrays.systemGrey2, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemGrey3", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemGrey3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemGrays.systemGrey3, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemGrey4", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemGrey4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemGrays.systemGrey4, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemGrey5", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemGrey5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemGrays.systemGrey5, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemGrey6", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemGrey6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemGrays.systemGrey6, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.color.colorGuide.systemTints` struct is generated, and contains static references to 7 colors.
      struct systemTints {
        /// Color `systemBlue`.
        static let systemBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemTints/systemBlue")
        /// Color `systemGreen`.
        static let systemGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemTints/systemGreen")
        /// Color `systemIndigo`.
        static let systemIndigo = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemTints/systemIndigo")
        /// Color `systemOrange`.
        static let systemOrange = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemTints/systemOrange")
        /// Color `systemRed`.
        static let systemRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemTints/systemRed")
        /// Color `systemTeal`.
        static let systemTeal = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemTints/systemTeal")
        /// Color `systemYellow`.
        static let systemYellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/SystemTints/systemYellow")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemBlue", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemTints.systemBlue, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemGreen", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemTints.systemGreen, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemIndigo", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemIndigo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemTints.systemIndigo, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemOrange", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemTints.systemOrange, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemRed", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemTints.systemRed, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemTeal", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemTeal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemTints.systemTeal, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "systemYellow", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func systemYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.systemTints.systemYellow, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.color.colorGuide.textColors` struct is generated, and contains static references to 4 colors.
      struct textColors {
        /// Color `primary`.
        static let primary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/TextColors/primary")
        /// Color `querternary`.
        static let querternary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/TextColors/querternary")
        /// Color `secondary`.
        static let secondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/TextColors/secondary")
        /// Color `tertiary`.
        static let tertiary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorGuide/TextColors/tertiary")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "primary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func primary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.textColors.primary, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "querternary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func querternary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.textColors.querternary, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "secondary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func secondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.textColors.secondary, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "tertiary", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func tertiary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colorGuide.textColors.tertiary, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 3 properties.
  struct entitlements {
    struct comAppleDeveloperAssociatedDomains {
      static let webcredentialsAdjarabetCom = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "webcredentials:adjarabet.com") ?? "webcredentials:adjarabet.com"

      fileprivate init() {}
    }

    struct comAppleSecurityApplicationGroups {
      static let groupAdjarabetMobileCoockie = infoPlistString(path: ["com.apple.security.application-groups"], key: "group.adjarabet.mobile.coockie") ?? "group.adjarabet.mobile.coockie"

      fileprivate init() {}
    }

    struct keychainAccessGroups {
      static let appIdentifierPrefixComAdjarabetMobileCredentials = infoPlistString(path: ["keychain-access-groups"], key: "$(AppIdentifierPrefix)com.adjarabet.Mobile.credentials") ?? "$(AppIdentifierPrefix)com.adjarabet.Mobile.credentials"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 108 files.
  struct file {
    /// Resource file `AAJSlot.zip`.
    static let aajSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "AAJSlot", pathExtension: "zip")
    /// Resource file `ABJSlot.zip`.
    static let abjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "ABJSlot", pathExtension: "zip")
    /// Resource file `ADJSlot.zip`.
    static let adjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "ADJSlot", pathExtension: "zip")
    /// Resource file `AGJSlot.zip`.
    static let agjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "AGJSlot", pathExtension: "zip")
    /// Resource file `AOTJSlot.zip`.
    static let aotjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "AOTJSlot", pathExtension: "zip")
    /// Resource file `AdjaraMont-Bold.ttf`.
    static let adjaraMontBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AdjaraMont-Bold", pathExtension: "ttf")
    /// Resource file `AdjaraMont-Heavy.ttf`.
    static let adjaraMontHeavyTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AdjaraMont-Heavy", pathExtension: "ttf")
    /// Resource file `AdjaraMont-Light.ttf`.
    static let adjaraMontLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AdjaraMont-Light", pathExtension: "ttf")
    /// Resource file `AdjaraMont-Regular.ttf`.
    static let adjaraMontRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AdjaraMont-Regular", pathExtension: "ttf")
    /// Resource file `AdjaraMont-SemiBold.ttf`.
    static let adjaraMontSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AdjaraMont-SemiBold", pathExtension: "ttf")
    /// Resource file `AdjaraMontPro-Bold.ttf`.
    static let adjaraMontProBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AdjaraMontPro-Bold", pathExtension: "ttf")
    /// Resource file `AdjaraMontPro-Heavy.ttf`.
    static let adjaraMontProHeavyTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AdjaraMontPro-Heavy", pathExtension: "ttf")
    /// Resource file `AdjaraMontPro-Light.ttf`.
    static let adjaraMontProLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AdjaraMontPro-Light", pathExtension: "ttf")
    /// Resource file `AdjaraMontPro-Regular.ttf`.
    static let adjaraMontProRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AdjaraMontPro-Regular", pathExtension: "ttf")
    /// Resource file `AdjaraMontPro-SemiBold.ttf`.
    static let adjaraMontProSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AdjaraMontPro-SemiBold", pathExtension: "ttf")
    /// Resource file `BHJSlot.zip`.
    static let bhjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "BHJSlot", pathExtension: "zip")
    /// Resource file `BHSJSlot.zip`.
    static let bhsjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "BHSJSlot", pathExtension: "zip")
    /// Resource file `BHTJSlot.zip`.
    static let bhtjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "BHTJSlot", pathExtension: "zip")
    /// Resource file `BOMJSlot.zip`.
    static let bomjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "BOMJSlot", pathExtension: "zip")
    /// Resource file `BRDJSlot.zip`.
    static let brdjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "BRDJSlot", pathExtension: "zip")
    /// Resource file `CBJSlot.zip`.
    static let cbjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "CBJSlot", pathExtension: "zip")
    /// Resource file `CDJSlot.zip`.
    static let cdjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "CDJSlot", pathExtension: "zip")
    /// Resource file `CHJSlot.zip`.
    static let chjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "CHJSlot", pathExtension: "zip")
    /// Resource file `CMJSlot.zip`.
    static let cmjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "CMJSlot", pathExtension: "zip")
    /// Resource file `DARJSlot.zip`.
    static let darjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "DARJSlot", pathExtension: "zip")
    /// Resource file `EDJSlot.zip`.
    static let edjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "EDJSlot", pathExtension: "zip")
    /// Resource file `EHJSlot.zip`.
    static let ehjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "EHJSlot", pathExtension: "zip")
    /// Resource file `EOWJSlot.zip`.
    static let eowjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "EOWJSlot", pathExtension: "zip")
    /// Resource file `EPJSlot.zip`.
    static let epjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "EPJSlot", pathExtension: "zip")
    /// Resource file `ESJSlot.zip`.
    static let esjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "ESJSlot", pathExtension: "zip")
    /// Resource file `FABJSlot.zip`.
    static let fabjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "FABJSlot", pathExtension: "zip")
    /// Resource file `FBHJSlot.zip`.
    static let fbhjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "FBHJSlot", pathExtension: "zip")
    /// Resource file `FBHSJSlot.zip`.
    static let fbhsjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "FBHSJSlot", pathExtension: "zip")
    /// Resource file `FBHTJSlot.zip`.
    static let fbhtjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "FBHTJSlot", pathExtension: "zip")
    /// Resource file `FBJSlot.zip`.
    static let fbjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "FBJSlot", pathExtension: "zip")
    /// Resource file `FDHJSlot.zip`.
    static let fdhjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "FDHJSlot", pathExtension: "zip")
    /// Resource file `FGSJSlot.zip`.
    static let fgsjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "FGSJSlot", pathExtension: "zip")
    /// Resource file `FHEJSlot.zip`.
    static let fhejSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "FHEJSlot", pathExtension: "zip")
    /// Resource file `FHJSlot.zip`.
    static let fhjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "FHJSlot", pathExtension: "zip")
    /// Resource file `FHNCJSlot.zip`.
    static let fhncjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "FHNCJSlot", pathExtension: "zip")
    /// Resource file `FHSJSlot.zip`.
    static let fhsjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "FHSJSlot", pathExtension: "zip")
    /// Resource file `FLKJSlot.zip`.
    static let flkjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "FLKJSlot", pathExtension: "zip")
    /// Resource file `FMCJSlot.zip`.
    static let fmcjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "FMCJSlot", pathExtension: "zip")
    /// Resource file `FSDJSlot.zip`.
    static let fsdjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "FSDJSlot", pathExtension: "zip")
    /// Resource file `FSHJSlot.zip`.
    static let fshjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "FSHJSlot", pathExtension: "zip")
    /// Resource file `GEJSlot.zip`.
    static let gejSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "GEJSlot", pathExtension: "zip")
    /// Resource file `GETJSlot.zip`.
    static let getjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "GETJSlot", pathExtension: "zip")
    /// Resource file `GOCJSlot.zip`.
    static let gocjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "GOCJSlot", pathExtension: "zip")
    /// Resource file `GOLJSlot.zip`.
    static let goljSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "GOLJSlot", pathExtension: "zip")
    /// Resource file `GTSJSlot.zip`.
    static let gtsjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "GTSJSlot", pathExtension: "zip")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `HBHJSlot.zip`.
    static let hbhjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "HBHJSlot", pathExtension: "zip")
    /// Resource file `HCJSlot.zip`.
    static let hcjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "HCJSlot", pathExtension: "zip")
    /// Resource file `HNCJSlot.zip`.
    static let hncjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "HNCJSlot", pathExtension: "zip")
    /// Resource file `HSHJSlot.zip`.
    static let hshjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "HSHJSlot", pathExtension: "zip")
    /// Resource file `IGTJSlot.zip`.
    static let igtjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "IGTJSlot", pathExtension: "zip")
    /// Resource file `IVJSlot.zip`.
    static let ivjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "IVJSlot", pathExtension: "zip")
    /// Resource file `KGJSlot.zip`.
    static let kgjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "KGJSlot", pathExtension: "zip")
    /// Resource file `KHJSlot.zip`.
    static let khjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "KHJSlot", pathExtension: "zip")
    /// Resource file `LAWJSlot.zip`.
    static let lawjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "LAWJSlot", pathExtension: "zip")
    /// Resource file `LHJSlot.zip`.
    static let lhjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "LHJSlot", pathExtension: "zip")
    /// Resource file `MFJSlot.zip`.
    static let mfjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "MFJSlot", pathExtension: "zip")
    /// Resource file `MLAWJSlot.zip`.
    static let mlawjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "MLAWJSlot", pathExtension: "zip")
    /// Resource file `MPJSlot.zip`.
    static let mpjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "MPJSlot", pathExtension: "zip")
    /// Resource file `MTJSlot.zip`.
    static let mtjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "MTJSlot", pathExtension: "zip")
    /// Resource file `OCJSlot.zip`.
    static let ocjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "OCJSlot", pathExtension: "zip")
    /// Resource file `OGJSlot.zip`.
    static let ogjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "OGJSlot", pathExtension: "zip")
    /// Resource file `PQJSlot.zip`.
    static let pqjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "PQJSlot", pathExtension: "zip")
    /// Resource file `PSJSlot.zip`.
    static let psjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "PSJSlot", pathExtension: "zip")
    /// Resource file `QORJSlot.zip`.
    static let qorjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "QORJSlot", pathExtension: "zip")
    /// Resource file `RCJSlot.zip`.
    static let rcjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "RCJSlot", pathExtension: "zip")
    /// Resource file `RGJSlot.zip`.
    static let rgjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "RGJSlot", pathExtension: "zip")
    /// Resource file `RLJSlot.zip`.
    static let rljSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "RLJSlot", pathExtension: "zip")
    /// Resource file `RORJSlot.zip`.
    static let rorjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "RORJSlot", pathExtension: "zip")
    /// Resource file `RSJSlot.zip`.
    static let rsjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "RSJSlot", pathExtension: "zip")
    /// Resource file `RTSJSlot.zip`.
    static let rtsjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "RTSJSlot", pathExtension: "zip")
    /// Resource file `RWJSlot.zip`.
    static let rwjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "RWJSlot", pathExtension: "zip")
    /// Resource file `SBJSlot.zip`.
    static let sbjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "SBJSlot", pathExtension: "zip")
    /// Resource file `SCJSlot.zip`.
    static let scjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "SCJSlot", pathExtension: "zip")
    /// Resource file `SHJSlot.zip`.
    static let shjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "SHJSlot", pathExtension: "zip")
    /// Resource file `SOAJSlot.zip`.
    static let soajSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "SOAJSlot", pathExtension: "zip")
    /// Resource file `SPJSlot.zip`.
    static let spjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "SPJSlot", pathExtension: "zip")
    /// Resource file `STJSlot.zip`.
    static let stjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "STJSlot", pathExtension: "zip")
    /// Resource file `TBHJSlot.zip`.
    static let tbhjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "TBHJSlot", pathExtension: "zip")
    /// Resource file `TBHTJSlot.zip`.
    static let tbhtjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "TBHTJSlot", pathExtension: "zip")
    /// Resource file `TDHJSlot.zip`.
    static let tdhjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "TDHJSlot", pathExtension: "zip")
    /// Resource file `TDJSlot.zip`.
    static let tdjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "TDJSlot", pathExtension: "zip")
    /// Resource file `TDRJSlot.zip`.
    static let tdrjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "TDRJSlot", pathExtension: "zip")
    /// Resource file `TGCJSlot.zip`.
    static let tgcjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "TGCJSlot", pathExtension: "zip")
    /// Resource file `THBJSlot.zip`.
    static let thbjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "THBJSlot", pathExtension: "zip")
    /// Resource file `TJRJSlot.zip`.
    static let tjrjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "TJRJSlot", pathExtension: "zip")
    /// Resource file `TSFJSlot.zip`.
    static let tsfjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "TSFJSlot", pathExtension: "zip")
    /// Resource file `TSHJSlot.zip`.
    static let tshjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "TSHJSlot", pathExtension: "zip")
    /// Resource file `TSOAJSlot.zip`.
    static let tsoajSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "TSOAJSlot", pathExtension: "zip")
    /// Resource file `TSOATJSlot.zip`.
    static let tsoatjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "TSOATJSlot", pathExtension: "zip")
    /// Resource file `TSWJSlot.zip`.
    static let tswjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "TSWJSlot", pathExtension: "zip")
    /// Resource file `TWWJSlot.zip`.
    static let twwjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "TWWJSlot", pathExtension: "zip")
    /// Resource file `UHJSlot.zip`.
    static let uhjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "UHJSlot", pathExtension: "zip")
    /// Resource file `VGJSlot.zip`.
    static let vgjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "VGJSlot", pathExtension: "zip")
    /// Resource file `VNJSlot.zip`.
    static let vnjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "VNJSlot", pathExtension: "zip")
    /// Resource file `VWJSlot.zip`.
    static let vwjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "VWJSlot", pathExtension: "zip")
    /// Resource file `WHJSlot.zip`.
    static let whjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "WHJSlot", pathExtension: "zip")
    /// Resource file `XSJSlot.zip`.
    static let xsjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "XSJSlot", pathExtension: "zip")
    /// Resource file `ZWJSlot.zip`.
    static let zwjSlotZip = Rswift.FileResource(bundle: R.hostingBundle, name: "ZWJSlot", pathExtension: "zip")
    /// Resource file `ca.der`.
    static let caDer = Rswift.FileResource(bundle: R.hostingBundle, name: "ca", pathExtension: "der")
    /// Resource file `exitButton.png`.
    static let exitButtonPng = Rswift.FileResource(bundle: R.hostingBundle, name: "exitButton", pathExtension: "png")
    /// Resource file `incognito-card.mp4`.
    static let incognitoCardMp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "incognito-card", pathExtension: "mp4")
    /// Resource file `localhost.p12`.
    static let localhostP12 = Rswift.FileResource(bundle: R.hostingBundle, name: "localhost", pathExtension: "p12")

    /// `bundle.url(forResource: "AAJSlot", withExtension: "zip")`
    static func aajSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.aajSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ABJSlot", withExtension: "zip")`
    static func abjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.abjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ADJSlot", withExtension: "zip")`
    static func adjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "AGJSlot", withExtension: "zip")`
    static func agjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.agjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "AOTJSlot", withExtension: "zip")`
    static func aotjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.aotjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "AdjaraMont-Bold", withExtension: "ttf")`
    static func adjaraMontBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adjaraMontBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "AdjaraMont-Heavy", withExtension: "ttf")`
    static func adjaraMontHeavyTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adjaraMontHeavyTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "AdjaraMont-Light", withExtension: "ttf")`
    static func adjaraMontLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adjaraMontLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "AdjaraMont-Regular", withExtension: "ttf")`
    static func adjaraMontRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adjaraMontRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "AdjaraMont-SemiBold", withExtension: "ttf")`
    static func adjaraMontSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adjaraMontSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "AdjaraMontPro-Bold", withExtension: "ttf")`
    static func adjaraMontProBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adjaraMontProBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "AdjaraMontPro-Heavy", withExtension: "ttf")`
    static func adjaraMontProHeavyTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adjaraMontProHeavyTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "AdjaraMontPro-Light", withExtension: "ttf")`
    static func adjaraMontProLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adjaraMontProLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "AdjaraMontPro-Regular", withExtension: "ttf")`
    static func adjaraMontProRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adjaraMontProRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "AdjaraMontPro-SemiBold", withExtension: "ttf")`
    static func adjaraMontProSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adjaraMontProSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BHJSlot", withExtension: "zip")`
    static func bhjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bhjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BHSJSlot", withExtension: "zip")`
    static func bhsjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bhsjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BHTJSlot", withExtension: "zip")`
    static func bhtjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bhtjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BOMJSlot", withExtension: "zip")`
    static func bomjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bomjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BRDJSlot", withExtension: "zip")`
    static func brdjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.brdjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "CBJSlot", withExtension: "zip")`
    static func cbjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cbjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "CDJSlot", withExtension: "zip")`
    static func cdjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cdjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "CHJSlot", withExtension: "zip")`
    static func chjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.chjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "CMJSlot", withExtension: "zip")`
    static func cmjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cmjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "DARJSlot", withExtension: "zip")`
    static func darjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.darjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "EDJSlot", withExtension: "zip")`
    static func edjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.edjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "EHJSlot", withExtension: "zip")`
    static func ehjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ehjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "EOWJSlot", withExtension: "zip")`
    static func eowjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.eowjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "EPJSlot", withExtension: "zip")`
    static func epjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.epjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ESJSlot", withExtension: "zip")`
    static func esjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.esjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FABJSlot", withExtension: "zip")`
    static func fabjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fabjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FBHJSlot", withExtension: "zip")`
    static func fbhjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fbhjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FBHSJSlot", withExtension: "zip")`
    static func fbhsjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fbhsjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FBHTJSlot", withExtension: "zip")`
    static func fbhtjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fbhtjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FBJSlot", withExtension: "zip")`
    static func fbjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fbjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FDHJSlot", withExtension: "zip")`
    static func fdhjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fdhjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FGSJSlot", withExtension: "zip")`
    static func fgsjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fgsjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FHEJSlot", withExtension: "zip")`
    static func fhejSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fhejSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FHJSlot", withExtension: "zip")`
    static func fhjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fhjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FHNCJSlot", withExtension: "zip")`
    static func fhncjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fhncjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FHSJSlot", withExtension: "zip")`
    static func fhsjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fhsjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FLKJSlot", withExtension: "zip")`
    static func flkjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.flkjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FMCJSlot", withExtension: "zip")`
    static func fmcjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fmcjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FSDJSlot", withExtension: "zip")`
    static func fsdjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fsdjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FSHJSlot", withExtension: "zip")`
    static func fshjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fshjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GEJSlot", withExtension: "zip")`
    static func gejSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gejSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GETJSlot", withExtension: "zip")`
    static func getjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.getjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GOCJSlot", withExtension: "zip")`
    static func gocjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gocjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GOLJSlot", withExtension: "zip")`
    static func goljSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.goljSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GTSJSlot", withExtension: "zip")`
    static func gtsjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gtsjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "HBHJSlot", withExtension: "zip")`
    static func hbhjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hbhjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "HCJSlot", withExtension: "zip")`
    static func hcjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hcjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "HNCJSlot", withExtension: "zip")`
    static func hncjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hncjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "HSHJSlot", withExtension: "zip")`
    static func hshjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hshjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "IGTJSlot", withExtension: "zip")`
    static func igtjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.igtjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "IVJSlot", withExtension: "zip")`
    static func ivjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ivjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "KGJSlot", withExtension: "zip")`
    static func kgjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kgjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "KHJSlot", withExtension: "zip")`
    static func khjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.khjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "LAWJSlot", withExtension: "zip")`
    static func lawjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lawjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "LHJSlot", withExtension: "zip")`
    static func lhjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lhjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MFJSlot", withExtension: "zip")`
    static func mfjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mfjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MLAWJSlot", withExtension: "zip")`
    static func mlawjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mlawjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MPJSlot", withExtension: "zip")`
    static func mpjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mpjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MTJSlot", withExtension: "zip")`
    static func mtjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mtjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OCJSlot", withExtension: "zip")`
    static func ocjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ocjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OGJSlot", withExtension: "zip")`
    static func ogjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ogjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PQJSlot", withExtension: "zip")`
    static func pqjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pqjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PSJSlot", withExtension: "zip")`
    static func psjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.psjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "QORJSlot", withExtension: "zip")`
    static func qorjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.qorjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RCJSlot", withExtension: "zip")`
    static func rcjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rcjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RGJSlot", withExtension: "zip")`
    static func rgjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rgjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RLJSlot", withExtension: "zip")`
    static func rljSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rljSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RORJSlot", withExtension: "zip")`
    static func rorjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rorjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RSJSlot", withExtension: "zip")`
    static func rsjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rsjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RTSJSlot", withExtension: "zip")`
    static func rtsjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rtsjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RWJSlot", withExtension: "zip")`
    static func rwjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rwjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SBJSlot", withExtension: "zip")`
    static func sbjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sbjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SCJSlot", withExtension: "zip")`
    static func scjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.scjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SHJSlot", withExtension: "zip")`
    static func shjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SOAJSlot", withExtension: "zip")`
    static func soajSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.soajSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SPJSlot", withExtension: "zip")`
    static func spjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.spjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "STJSlot", withExtension: "zip")`
    static func stjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.stjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TBHJSlot", withExtension: "zip")`
    static func tbhjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tbhjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TBHTJSlot", withExtension: "zip")`
    static func tbhtjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tbhtjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TDHJSlot", withExtension: "zip")`
    static func tdhjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tdhjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TDJSlot", withExtension: "zip")`
    static func tdjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tdjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TDRJSlot", withExtension: "zip")`
    static func tdrjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tdrjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TGCJSlot", withExtension: "zip")`
    static func tgcjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tgcjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "THBJSlot", withExtension: "zip")`
    static func thbjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.thbjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TJRJSlot", withExtension: "zip")`
    static func tjrjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tjrjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TSFJSlot", withExtension: "zip")`
    static func tsfjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tsfjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TSHJSlot", withExtension: "zip")`
    static func tshjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tshjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TSOAJSlot", withExtension: "zip")`
    static func tsoajSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tsoajSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TSOATJSlot", withExtension: "zip")`
    static func tsoatjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tsoatjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TSWJSlot", withExtension: "zip")`
    static func tswjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tswjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TWWJSlot", withExtension: "zip")`
    static func twwjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.twwjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "UHJSlot", withExtension: "zip")`
    static func uhjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.uhjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "VGJSlot", withExtension: "zip")`
    static func vgjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vgjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "VNJSlot", withExtension: "zip")`
    static func vnjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vnjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "VWJSlot", withExtension: "zip")`
    static func vwjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vwjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "WHJSlot", withExtension: "zip")`
    static func whjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.whjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "XSJSlot", withExtension: "zip")`
    static func xsjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.xsjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ZWJSlot", withExtension: "zip")`
    static func zwjSlotZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.zwjSlotZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ca", withExtension: "der")`
    static func caDer(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.caDer
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "exitButton", withExtension: "png")`
    static func exitButtonPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.exitButtonPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "incognito-card", withExtension: "mp4")`
    static func incognitoCardMp4(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.incognitoCardMp4
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "localhost", withExtension: "p12")`
    static func localhostP12(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.localhostP12
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 10 fonts.
  struct font: Rswift.Validatable {
    /// Font `AdjaraMont-Bold`.
    static let adjaraMontBold = Rswift.FontResource(fontName: "AdjaraMont-Bold")
    /// Font `AdjaraMont-Heavy`.
    static let adjaraMontHeavy = Rswift.FontResource(fontName: "AdjaraMont-Heavy")
    /// Font `AdjaraMont-Light`.
    static let adjaraMontLight = Rswift.FontResource(fontName: "AdjaraMont-Light")
    /// Font `AdjaraMont-Regular`.
    static let adjaraMontRegular = Rswift.FontResource(fontName: "AdjaraMont-Regular")
    /// Font `AdjaraMont-SemiBold`.
    static let adjaraMontSemiBold = Rswift.FontResource(fontName: "AdjaraMont-SemiBold")
    /// Font `AdjaraMontPro-Bold`.
    static let adjaraMontProBold = Rswift.FontResource(fontName: "AdjaraMontPro-Bold")
    /// Font `AdjaraMontPro-Heavy`.
    static let adjaraMontProHeavy = Rswift.FontResource(fontName: "AdjaraMontPro-Heavy")
    /// Font `AdjaraMontPro-Light`.
    static let adjaraMontProLight = Rswift.FontResource(fontName: "AdjaraMontPro-Light")
    /// Font `AdjaraMontPro-Regular`.
    static let adjaraMontProRegular = Rswift.FontResource(fontName: "AdjaraMontPro-Regular")
    /// Font `AdjaraMontPro-SemiBold`.
    static let adjaraMontProSemiBold = Rswift.FontResource(fontName: "AdjaraMontPro-SemiBold")

    /// `UIFont(name: "AdjaraMont-Bold", size: ...)`
    static func adjaraMontBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: adjaraMontBold, size: size)
    }

    /// `UIFont(name: "AdjaraMont-Heavy", size: ...)`
    static func adjaraMontHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: adjaraMontHeavy, size: size)
    }

    /// `UIFont(name: "AdjaraMont-Light", size: ...)`
    static func adjaraMontLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: adjaraMontLight, size: size)
    }

    /// `UIFont(name: "AdjaraMont-Regular", size: ...)`
    static func adjaraMontRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: adjaraMontRegular, size: size)
    }

    /// `UIFont(name: "AdjaraMont-SemiBold", size: ...)`
    static func adjaraMontSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: adjaraMontSemiBold, size: size)
    }

    /// `UIFont(name: "AdjaraMontPro-Bold", size: ...)`
    static func adjaraMontProBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: adjaraMontProBold, size: size)
    }

    /// `UIFont(name: "AdjaraMontPro-Heavy", size: ...)`
    static func adjaraMontProHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: adjaraMontProHeavy, size: size)
    }

    /// `UIFont(name: "AdjaraMontPro-Light", size: ...)`
    static func adjaraMontProLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: adjaraMontProLight, size: size)
    }

    /// `UIFont(name: "AdjaraMontPro-Regular", size: ...)`
    static func adjaraMontProRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: adjaraMontProRegular, size: size)
    }

    /// `UIFont(name: "AdjaraMontPro-SemiBold", size: ...)`
    static func adjaraMontProSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: adjaraMontProSemiBold, size: size)
    }

    static func validate() throws {
      if R.font.adjaraMontBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AdjaraMont-Bold' could not be loaded, is 'AdjaraMont-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.adjaraMontHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AdjaraMont-Heavy' could not be loaded, is 'AdjaraMont-Heavy.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.adjaraMontLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AdjaraMont-Light' could not be loaded, is 'AdjaraMont-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.adjaraMontRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AdjaraMont-Regular' could not be loaded, is 'AdjaraMont-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.adjaraMontSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AdjaraMont-SemiBold' could not be loaded, is 'AdjaraMont-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.adjaraMontProBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AdjaraMontPro-Bold' could not be loaded, is 'AdjaraMontPro-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.adjaraMontProHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AdjaraMontPro-Heavy' could not be loaded, is 'AdjaraMontPro-Heavy.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.adjaraMontProLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AdjaraMontPro-Light' could not be loaded, is 'AdjaraMontPro-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.adjaraMontProRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AdjaraMontPro-Regular' could not be loaded, is 'AdjaraMontPro-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.adjaraMontProSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AdjaraMontPro-SemiBold' could not be loaded, is 'AdjaraMontPro-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.id` struct is generated, and contains static references to accessibility identifiers.
  struct id {
    struct accountInfo {
      /// Accessibility identifier `AccountInfoViewController.password`.
      static let accountInfoViewControllerPassword: String = "AccountInfoViewController.password"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
    /// Image `exitButton`.
    static let exitButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "exitButton")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "exitButton", bundle: ..., traitCollection: ...)`
    static func exitButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exitButton, compatibleWith: traitCollection)
    }
    #endif

    /// This `R.image.accessHistory` struct is generated, and contains static references to 2 images.
    struct accessHistory {
      /// Image `DeviceDesktop`.
      static let deviceDesktop = Rswift.ImageResource(bundle: R.hostingBundle, name: "AccessHistory/DeviceDesktop")
      /// Image `DeviceMobile`.
      static let deviceMobile = Rswift.ImageResource(bundle: R.hostingBundle, name: "AccessHistory/DeviceMobile")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "DeviceDesktop", bundle: ..., traitCollection: ...)`
      static func deviceDesktop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.accessHistory.deviceDesktop, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "DeviceMobile", bundle: ..., traitCollection: ...)`
      static func deviceMobile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.accessHistory.deviceMobile, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.accountParameters` struct is generated, and contains static references to 4 images.
    struct accountParameters {
      /// Image `BlockSelf`.
      static let blockSelf = Rswift.ImageResource(bundle: R.hostingBundle, name: "AccountParameters/BlockSelf")
      /// Image `ChangePassword`.
      static let changePassword = Rswift.ImageResource(bundle: R.hostingBundle, name: "AccountParameters/ChangePassword")
      /// Image `HighSecurity`.
      static let highSecurity = Rswift.ImageResource(bundle: R.hostingBundle, name: "AccountParameters/HighSecurity")
      /// Image `LoginHistory`.
      static let loginHistory = Rswift.ImageResource(bundle: R.hostingBundle, name: "AccountParameters/LoginHistory")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "BlockSelf", bundle: ..., traitCollection: ...)`
      static func blockSelf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.accountParameters.blockSelf, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "ChangePassword", bundle: ..., traitCollection: ...)`
      static func changePassword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.accountParameters.changePassword, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "HighSecurity", bundle: ..., traitCollection: ...)`
      static func highSecurity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.accountParameters.highSecurity, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "LoginHistory", bundle: ..., traitCollection: ...)`
      static func loginHistory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.accountParameters.loginHistory, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.biometric` struct is generated, and contains static references to 3 images.
    struct biometric {
      /// Image `TouchID`.
      static let touchID = Rswift.ImageResource(bundle: R.hostingBundle, name: "Biometric/TouchID")
      /// Image `biometry`.
      static let biometry = Rswift.ImageResource(bundle: R.hostingBundle, name: "Biometric/biometry")
      /// Image `faceID`.
      static let faceID = Rswift.ImageResource(bundle: R.hostingBundle, name: "Biometric/faceID")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "TouchID", bundle: ..., traitCollection: ...)`
      static func touchID(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.biometric.touchID, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "biometry", bundle: ..., traitCollection: ...)`
      static func biometry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.biometric.biometry, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "faceID", bundle: ..., traitCollection: ...)`
      static func faceID(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.biometric.faceID, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.cardManagement` struct is generated, and contains static references to 6 images.
    struct cardManagement {
      /// Image `card_back`.
      static let card_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "CardManagement/card_back")
      /// Image `card_front`.
      static let card_front = Rswift.ImageResource(bundle: R.hostingBundle, name: "CardManagement/card_front")
      /// Image `card`.
      static let card = Rswift.ImageResource(bundle: R.hostingBundle, name: "CardManagement/card")
      /// Image `checkmark`.
      static let checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "CardManagement/checkmark")
      /// Image `oval`.
      static let oval = Rswift.ImageResource(bundle: R.hostingBundle, name: "CardManagement/oval")
      /// Image `scan`.
      static let scan = Rswift.ImageResource(bundle: R.hostingBundle, name: "CardManagement/scan")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "card", bundle: ..., traitCollection: ...)`
      static func card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.cardManagement.card, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "card_back", bundle: ..., traitCollection: ...)`
      static func card_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.cardManagement.card_back, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "card_front", bundle: ..., traitCollection: ...)`
      static func card_front(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.cardManagement.card_front, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "checkmark", bundle: ..., traitCollection: ...)`
      static func checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.cardManagement.checkmark, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "oval", bundle: ..., traitCollection: ...)`
      static func oval(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.cardManagement.oval, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "scan", bundle: ..., traitCollection: ...)`
      static func scan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.cardManagement.scan, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.components` struct is generated, and contains static references to 0 images.
    struct components {
      /// This `R.image.components.abCheckbox` struct is generated, and contains static references to 3 images.
      struct abCheckbox {
        /// Image `checked`.
        static let checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/ABCheckbox/checked")
        /// Image `checkmark`.
        static let checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/ABCheckbox/checkmark")
        /// Image `unchecked`.
        static let unchecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/ABCheckbox/unchecked")

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "checked", bundle: ..., traitCollection: ...)`
        static func checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.abCheckbox.checked, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "checkmark", bundle: ..., traitCollection: ...)`
        static func checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.abCheckbox.checkmark, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "unchecked", bundle: ..., traitCollection: ...)`
        static func unchecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.abCheckbox.unchecked, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.image.components.accountInfo` struct is generated, and contains static references to 2 images.
      struct accountInfo {
        /// Image `edit`.
        static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/AccountInfo/edit")
        /// Image `oval`.
        static let oval = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/AccountInfo/oval")

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
        static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.accountInfo.edit, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "oval", bundle: ..., traitCollection: ...)`
        static func oval(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.accountInfo.oval, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.image.components.gameLauncher` struct is generated, and contains static references to 1 images.
      struct gameLauncher {
        /// Image `in`.
        static let `in` = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/GameLauncher/in")

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "in", bundle: ..., traitCollection: ...)`
        static func `in`(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.gameLauncher.`in`, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.image.components.profileCell` struct is generated, and contains static references to 4 images.
      struct profileCell {
        /// Image `adjarabet_logo`.
        static let adjarabet_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/ProfileCell/adjarabet_logo")
        /// Image `arrow`.
        static let arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/ProfileCell/arrow")
        /// Image `copy`.
        static let copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/ProfileCell/copy")
        /// Image `verified`.
        static let verified = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/ProfileCell/verified")

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "adjarabet_logo", bundle: ..., traitCollection: ...)`
        static func adjarabet_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.profileCell.adjarabet_logo, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "arrow", bundle: ..., traitCollection: ...)`
        static func arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.profileCell.arrow, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "copy", bundle: ..., traitCollection: ...)`
        static func copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.profileCell.copy, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "verified", bundle: ..., traitCollection: ...)`
        static func verified(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.profileCell.verified, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.image.components.quickAction` struct is generated, and contains static references to 11 images.
      struct quickAction {
        /// Image `account`.
        static let account = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/account")
        /// Image `biometry`.
        static let biometry = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/biometry")
        /// Image `deposit`.
        static let deposit = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/deposit")
        /// Image `incognito`.
        static let incognito = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/incognito")
        /// Image `logout`.
        static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/logout")
        /// Image `my_bonuses`.
        static let my_bonuses = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/my_bonuses")
        /// Image `my_cards`.
        static let my_cards = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/my_cards")
        /// Image `parameters`.
        static let parameters = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/parameters")
        /// Image `transaction_history`.
        static let transaction_history = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/transaction_history")
        /// Image `transfer`.
        static let transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/transfer")
        /// Image `withdraw`.
        static let withdraw = Rswift.ImageResource(bundle: R.hostingBundle, name: "Components/QuickAction/withdraw")

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "account", bundle: ..., traitCollection: ...)`
        static func account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.account, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "biometry", bundle: ..., traitCollection: ...)`
        static func biometry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.biometry, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "deposit", bundle: ..., traitCollection: ...)`
        static func deposit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.deposit, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "incognito", bundle: ..., traitCollection: ...)`
        static func incognito(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.incognito, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
        static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.logout, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "my_bonuses", bundle: ..., traitCollection: ...)`
        static func my_bonuses(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.my_bonuses, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "my_cards", bundle: ..., traitCollection: ...)`
        static func my_cards(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.my_cards, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "parameters", bundle: ..., traitCollection: ...)`
        static func parameters(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.parameters, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "transaction_history", bundle: ..., traitCollection: ...)`
        static func transaction_history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.transaction_history, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "transfer", bundle: ..., traitCollection: ...)`
        static func transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.transfer, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "withdraw", bundle: ..., traitCollection: ...)`
        static func withdraw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.components.quickAction.withdraw, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    /// This `R.image.deposit` struct is generated, and contains static references to 4 images.
    struct deposit {
      /// Image `addCard`.
      static let addCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "Deposit/addCard")
      /// Image `emoney_logo`.
      static let emoney_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Deposit/emoney_logo")
      /// Image `icon`.
      static let icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Deposit/icon")
      /// Image `rules_icon`.
      static let rules_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Deposit/rules_icon")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "addCard", bundle: ..., traitCollection: ...)`
      static func addCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.deposit.addCard, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "emoney_logo", bundle: ..., traitCollection: ...)`
      static func emoney_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.deposit.emoney_logo, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "icon", bundle: ..., traitCollection: ...)`
      static func icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.deposit.icon, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "rules_icon", bundle: ..., traitCollection: ...)`
      static func rules_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.deposit.rules_icon, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.game` struct is generated, and contains static references to 3 images.
    struct game {
      /// Image `back`.
      static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "Game/back")
      /// Image `deposit`.
      static let deposit = Rswift.ImageResource(bundle: R.hostingBundle, name: "Game/deposit")
      /// Image `logo`.
      static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Game/logo")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
      static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.game.back, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "deposit", bundle: ..., traitCollection: ...)`
      static func deposit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.game.deposit, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
      static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.game.logo, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.home` struct is generated, and contains static references to 2 images.
    struct home {
      /// Image `banner1`.
      static let banner1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home/banner1")
      /// Image `banner2`.
      static let banner2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home/banner2")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "banner1", bundle: ..., traitCollection: ...)`
      static func banner1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.home.banner1, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "banner2", bundle: ..., traitCollection: ...)`
      static func banner2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.home.banner2, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.login` struct is generated, and contains static references to 8 images.
    struct login {
      /// Image `legal`.
      static let legal = Rswift.ImageResource(bundle: R.hostingBundle, name: "Login/legal")
      /// Image `logo`.
      static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Login/logo")
      /// Image `oval`.
      static let oval = Rswift.ImageResource(bundle: R.hostingBundle, name: "Login/oval")
      /// Image `password`.
      static let password = Rswift.ImageResource(bundle: R.hostingBundle, name: "Login/password")
      /// Image `sms_back`.
      static let sms_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "Login/sms_back")
      /// Image `sms_dismiss`.
      static let sms_dismiss = Rswift.ImageResource(bundle: R.hostingBundle, name: "Login/sms_dismiss")
      /// Image `username`.
      static let username = Rswift.ImageResource(bundle: R.hostingBundle, name: "Login/username")
      /// Image `well_done`.
      static let well_done = Rswift.ImageResource(bundle: R.hostingBundle, name: "Login/well_done")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "legal", bundle: ..., traitCollection: ...)`
      static func legal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.login.legal, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
      static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.login.logo, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "oval", bundle: ..., traitCollection: ...)`
      static func oval(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.login.oval, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "password", bundle: ..., traitCollection: ...)`
      static func password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.login.password, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "sms_back", bundle: ..., traitCollection: ...)`
      static func sms_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.login.sms_back, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "sms_dismiss", bundle: ..., traitCollection: ...)`
      static func sms_dismiss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.login.sms_dismiss, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "username", bundle: ..., traitCollection: ...)`
      static func username(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.login.username, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "well_done", bundle: ..., traitCollection: ...)`
      static func well_done(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.login.well_done, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.myCards` struct is generated, and contains static references to 5 images.
    struct myCards {
      /// Image `addCard`.
      static let addCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyCards/addCard")
      /// Image `bog`.
      static let bog = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyCards/bog")
      /// Image `mc`.
      static let mc = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyCards/mc")
      /// Image `tbc`.
      static let tbc = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyCards/tbc")
      /// Image `visa`.
      static let visa = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyCards/visa")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "addCard", bundle: ..., traitCollection: ...)`
      static func addCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.myCards.addCard, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "bog", bundle: ..., traitCollection: ...)`
      static func bog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.myCards.bog, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "mc", bundle: ..., traitCollection: ...)`
      static func mc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.myCards.mc, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "tbc", bundle: ..., traitCollection: ...)`
      static func tbc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.myCards.tbc, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "visa", bundle: ..., traitCollection: ...)`
      static func visa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.myCards.visa, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.notifications` struct is generated, and contains static references to 5 images.
    struct notifications {
      /// Image `inbox_new`.
      static let inbox_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notifications/inbox_new")
      /// Image `inbox_read`.
      static let inbox_read = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notifications/inbox_read")
      /// Image `oval`.
      static let oval = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notifications/oval")
      /// Image `settings`.
      static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notifications/settings")
      /// Image `trash`.
      static let trash = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notifications/trash")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "inbox_new", bundle: ..., traitCollection: ...)`
      static func inbox_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.notifications.inbox_new, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "inbox_read", bundle: ..., traitCollection: ...)`
      static func inbox_read(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.notifications.inbox_read, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "oval", bundle: ..., traitCollection: ...)`
      static func oval(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.notifications.oval, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
      static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.notifications.settings, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "trash", bundle: ..., traitCollection: ...)`
      static func trash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.notifications.trash, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.otP` struct is generated, and contains static references to 1 images.
    struct otP {
      /// Image `resend`.
      static let resend = Rswift.ImageResource(bundle: R.hostingBundle, name: "OTP/resend")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "resend", bundle: ..., traitCollection: ...)`
      static func resend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.otP.resend, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.p2P` struct is generated, and contains static references to 1 images.
    struct p2P {
      /// Image `check`.
      static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "P2P/check")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
      static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.p2P.check, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.promotions` struct is generated, and contains static references to 2 images.
    struct promotions {
      /// Image `casino_icon`.
      static let casino_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Promotions/casino_icon")
      /// Image `sport_icon`.
      static let sport_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Promotions/sport_icon")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "casino_icon", bundle: ..., traitCollection: ...)`
      static func casino_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.promotions.casino_icon, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "sport_icon", bundle: ..., traitCollection: ...)`
      static func sport_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.promotions.sport_icon, compatibleWith: traitCollection)
      }
      #endif

      /// This `R.image.promotions.temporary` struct is generated, and contains static references to 5 images.
      struct temporary {
        /// Image `Cover1`.
        static let cover1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Promotions/Temporary/Cover1")
        /// Image `Cover2`.
        static let cover2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Promotions/Temporary/Cover2")
        /// Image `Cover3`.
        static let cover3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Promotions/Temporary/Cover3")
        /// Image `Cover4`.
        static let cover4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Promotions/Temporary/Cover4")
        /// Image `Cover5`.
        static let cover5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Promotions/Temporary/Cover5")

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "Cover1", bundle: ..., traitCollection: ...)`
        static func cover1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.promotions.temporary.cover1, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "Cover2", bundle: ..., traitCollection: ...)`
        static func cover2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.promotions.temporary.cover2, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "Cover3", bundle: ..., traitCollection: ...)`
        static func cover3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.promotions.temporary.cover3, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "Cover4", bundle: ..., traitCollection: ...)`
        static func cover4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.promotions.temporary.cover4, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "Cover5", bundle: ..., traitCollection: ...)`
        static func cover5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.promotions.temporary.cover5, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    /// This `R.image.shared` struct is generated, and contains static references to 9 images.
    struct shared {
      /// Image `back`.
      static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shared/back")
      /// Image `close`.
      static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shared/close")
      /// Image `dropDown`.
      static let dropDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shared/dropDown")
      /// Image `faceID`.
      static let faceID = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shared/faceID")
      /// Image `hideText`.
      static let hideText = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shared/hideText")
      /// Image `phone`.
      static let phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shared/phone")
      /// Image `search`.
      static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shared/search")
      /// Image `touchID`.
      static let touchID = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shared/touchID")
      /// Image `viewText`.
      static let viewText = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shared/viewText")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
      static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.shared.back, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
      static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.shared.close, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "dropDown", bundle: ..., traitCollection: ...)`
      static func dropDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.shared.dropDown, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "faceID", bundle: ..., traitCollection: ...)`
      static func faceID(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.shared.faceID, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "hideText", bundle: ..., traitCollection: ...)`
      static func hideText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.shared.hideText, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "phone", bundle: ..., traitCollection: ...)`
      static func phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.shared.phone, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
      static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.shared.search, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "touchID", bundle: ..., traitCollection: ...)`
      static func touchID(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.shared.touchID, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "viewText", bundle: ..., traitCollection: ...)`
      static func viewText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.shared.viewText, compatibleWith: traitCollection)
      }
      #endif

      /// This `R.image.shared.navBar` struct is generated, and contains static references to 1 images.
      struct navBar {
        /// Image `profile`.
        static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shared/NavBar/profile")

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
        static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.shared.navBar.profile, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    /// This `R.image.tabBar` struct is generated, and contains static references to 5 images.
    struct tabBar {
      /// Image `home_selected`.
      static let home_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/home_selected")
      /// Image `home`.
      static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/home")
      /// Image `notification`.
      static let notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/notification")
      /// Image `promotions`.
      static let promotions = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/promotions")
      /// Image `sports`.
      static let sports = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/sports")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
      static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.home, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "home_selected", bundle: ..., traitCollection: ...)`
      static func home_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.home_selected, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "notification", bundle: ..., traitCollection: ...)`
      static func notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.notification, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "promotions", bundle: ..., traitCollection: ...)`
      static func promotions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.promotions, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "sports", bundle: ..., traitCollection: ...)`
      static func sports(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.sports, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.transactionsHistory` struct is generated, and contains static references to 5 images.
    struct transactionsHistory {
      /// Image `arrow-left`.
      static let arrowLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "TransactionsHistory/arrow-left")
      /// Image `arrow-right`.
      static let arrowRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "TransactionsHistory/arrow-right")
      /// Image `calendar`.
      static let calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "TransactionsHistory/calendar")
      /// Image `deposit`.
      static let deposit = Rswift.ImageResource(bundle: R.hostingBundle, name: "TransactionsHistory/deposit")
      /// Image `withdraw`.
      static let withdraw = Rswift.ImageResource(bundle: R.hostingBundle, name: "TransactionsHistory/withdraw")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "arrow-left", bundle: ..., traitCollection: ...)`
      static func arrowLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.transactionsHistory.arrowLeft, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "arrow-right", bundle: ..., traitCollection: ...)`
      static func arrowRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.transactionsHistory.arrowRight, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "calendar", bundle: ..., traitCollection: ...)`
      static func calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.transactionsHistory.calendar, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "deposit", bundle: ..., traitCollection: ...)`
      static func deposit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.transactionsHistory.deposit, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "withdraw", bundle: ..., traitCollection: ...)`
      static func withdraw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.transactionsHistory.withdraw, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.withdraw` struct is generated, and contains static references to 1 images.
    struct withdraw {
      /// Image `info`.
      static let info = Rswift.ImageResource(bundle: R.hostingBundle, name: "Withdraw/info")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "info", bundle: ..., traitCollection: ...)`
      static func info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.withdraw.info, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Login"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 77 nibs.
  struct nib {
    /// Nib `ABInputView`.
    static let abInputView = _R.nib._ABInputView()
    /// Nib `AccessHistoryComponentView`.
    static let accessHistoryComponentView = _R.nib._AccessHistoryComponentView()
    /// Nib `AccessHistoryTableViewCell`.
    static let accessHistoryTableViewCell = _R.nib._AccessHistoryTableViewCell()
    /// Nib `AccountInfoComponentView`.
    static let accountInfoComponentView = _R.nib._AccountInfoComponentView()
    /// Nib `AccountParametersComponentView`.
    static let accountParametersComponentView = _R.nib._AccountParametersComponentView()
    /// Nib `AccountParametersHeaderComponentView`.
    static let accountParametersHeaderComponentView = _R.nib._AccountParametersHeaderComponentView()
    /// Nib `AccountParametersHeaderTableViewCell`.
    static let accountParametersHeaderTableViewCell = _R.nib._AccountParametersHeaderTableViewCell()
    /// Nib `AccountParametersTableViewCell`.
    static let accountParametersTableViewCell = _R.nib._AccountParametersTableViewCell()
    /// Nib `AccountSecurityMessagesComponentView`.
    static let accountSecurityMessagesComponentView = _R.nib._AccountSecurityMessagesComponentView()
    /// Nib `AccountSecurityMessagesTableViewCell`.
    static let accountSecurityMessagesTableViewCell = _R.nib._AccountSecurityMessagesTableViewCell()
    /// Nib `AddMyCardComponentView`.
    static let addMyCardComponentView = _R.nib._AddMyCardComponentView()
    /// Nib `AddMyCardTableViewCell`.
    static let addMyCardTableViewCell = _R.nib._AddMyCardTableViewCell()
    /// Nib `AgreementComponentView`.
    static let agreementComponentView = _R.nib._AgreementComponentView()
    /// Nib `BalanceComponentView`.
    static let balanceComponentView = _R.nib._BalanceComponentView()
    /// Nib `BalanceTableViewCell`.
    static let balanceTableViewCell = _R.nib._BalanceTableViewCell()
    /// Nib `CalendarComponentView`.
    static let calendarComponentView = _R.nib._CalendarComponentView()
    /// Nib `DateHeaderCell`.
    static let dateHeaderCell = _R.nib._DateHeaderCell()
    /// Nib `DateHeaderComponentView`.
    static let dateHeaderComponentView = _R.nib._DateHeaderComponentView()
    /// Nib `EmoneyButton`.
    static let emoneyButton = _R.nib._EmoneyButton()
    /// Nib `EmoneyInstructionsView`.
    static let emoneyInstructionsView = _R.nib._EmoneyInstructionsView()
    /// Nib `FooterComponentView`.
    static let footerComponentView = _R.nib._FooterComponentView()
    /// Nib `FooterTableViewCell`.
    static let footerTableViewCell = _R.nib._FooterTableViewCell()
    /// Nib `GameLauncherCollectionViewCell`.
    static let gameLauncherCollectionViewCell = _R.nib._GameLauncherCollectionViewCell()
    /// Nib `GameLauncherComponentView`.
    static let gameLauncherComponentView = _R.nib._GameLauncherComponentView()
    /// Nib `GameLauncherGridCollectionViewCell`.
    static let gameLauncherGridCollectionViewCell = _R.nib._GameLauncherGridCollectionViewCell()
    /// Nib `GameLauncherGridComponentView`.
    static let gameLauncherGridComponentView = _R.nib._GameLauncherGridComponentView()
    /// Nib `GameLoaderComponentView`.
    static let gameLoaderComponentView = _R.nib._GameLoaderComponentView()
    /// Nib `HomeBannerCollectionViewCell`.
    static let homeBannerCollectionViewCell = _R.nib._HomeBannerCollectionViewCell()
    /// Nib `HomeBannerComponentView`.
    static let homeBannerComponentView = _R.nib._HomeBannerComponentView()
    /// Nib `HomeBannerContainerCollectionViewCell`.
    static let homeBannerContainerCollectionViewCell = _R.nib._HomeBannerContainerCollectionViewCell()
    /// Nib `HomeBannerContainerComponentView`.
    static let homeBannerContainerComponentView = _R.nib._HomeBannerContainerComponentView()
    /// Nib `LabelComponentView`.
    static let labelComponentView = _R.nib._LabelComponentView()
    /// Nib `LoadingCollectionViewCell`.
    static let loadingCollectionViewCell = _R.nib._LoadingCollectionViewCell()
    /// Nib `LoadingComponentView`.
    static let loadingComponentView = _R.nib._LoadingComponentView()
    /// Nib `MinAmountComponentView`.
    static let minAmountComponentView = _R.nib._MinAmountComponentView()
    /// Nib `MyCardComponentView`.
    static let myCardComponentView = _R.nib._MyCardComponentView()
    /// Nib `MyCardTableViewCell`.
    static let myCardTableViewCell = _R.nib._MyCardTableViewCell()
    /// Nib `NotificationComponentView`.
    static let notificationComponentView = _R.nib._NotificationComponentView()
    /// Nib `NotificationTableViewCell`.
    static let notificationTableViewCell = _R.nib._NotificationTableViewCell()
    /// Nib `NotificationsHeaderCell`.
    static let notificationsHeaderCell = _R.nib._NotificationsHeaderCell()
    /// Nib `NotificationsHeaderComponentView`.
    static let notificationsHeaderComponentView = _R.nib._NotificationsHeaderComponentView()
    /// Nib `PasswordChangeRulesView`.
    static let passwordChangeRulesView = _R.nib._PasswordChangeRulesView()
    /// Nib `PaymentMethodCollectionViewCell`.
    static let paymentMethodCollectionViewCell = _R.nib._PaymentMethodCollectionViewCell()
    /// Nib `PaymentMethodComponentView`.
    static let paymentMethodComponentView = _R.nib._PaymentMethodComponentView()
    /// Nib `PaymentMethodGridComponentView`.
    static let paymentMethodGridComponentView = _R.nib._PaymentMethodGridComponentView()
    /// Nib `PlayedGameLauncherCollectionViewCell`.
    static let playedGameLauncherCollectionViewCell = _R.nib._PlayedGameLauncherCollectionViewCell()
    /// Nib `PlayedGameLauncherComponentView`.
    static let playedGameLauncherComponentView = _R.nib._PlayedGameLauncherComponentView()
    /// Nib `ProfileInfoComponentView`.
    static let profileInfoComponentView = _R.nib._ProfileInfoComponentView()
    /// Nib `ProfileInfoTableViewCell`.
    static let profileInfoTableViewCell = _R.nib._ProfileInfoTableViewCell()
    /// Nib `PromotionComponentView`.
    static let promotionComponentView = _R.nib._PromotionComponentView()
    /// Nib `PromotionTableViewCell`.
    static let promotionTableViewCell = _R.nib._PromotionTableViewCell()
    /// Nib `QuickActionComponentView`.
    static let quickActionComponentView = _R.nib._QuickActionComponentView()
    /// Nib `QuickActionTableViewCell`.
    static let quickActionTableViewCell = _R.nib._QuickActionTableViewCell()
    /// Nib `QuickActionsHeaderCell`.
    static let quickActionsHeaderCell = _R.nib._QuickActionsHeaderCell()
    /// Nib `QuickActionsHeaderView`.
    static let quickActionsHeaderView = _R.nib._QuickActionsHeaderView()
    /// Nib `RecentlyPlayedCollectionViewCell`.
    static let recentlyPlayedCollectionViewCell = _R.nib._RecentlyPlayedCollectionViewCell()
    /// Nib `RecentlyPlayedComponentView`.
    static let recentlyPlayedComponentView = _R.nib._RecentlyPlayedComponentView()
    /// Nib `SecurityLevelComponentView`.
    static let securityLevelComponentView = _R.nib._SecurityLevelComponentView()
    /// Nib `SecurityLevelTableViewCell`.
    static let securityLevelTableViewCell = _R.nib._SecurityLevelTableViewCell()
    /// Nib `SecurityLevelTypeComponentView`.
    static let securityLevelTypeComponentView = _R.nib._SecurityLevelTypeComponentView()
    /// Nib `SecurityLevelTypeTableViewCell`.
    static let securityLevelTypeTableViewCell = _R.nib._SecurityLevelTypeTableViewCell()
    /// Nib `SuggestedAmountCollectionViewCell`.
    static let suggestedAmountCollectionViewCell = _R.nib._SuggestedAmountCollectionViewCell()
    /// Nib `SuggestedAmountComponentView`.
    static let suggestedAmountComponentView = _R.nib._SuggestedAmountComponentView()
    /// Nib `SuggestedAmountGridComponentView`.
    static let suggestedAmountGridComponentView = _R.nib._SuggestedAmountGridComponentView()
    /// Nib `TimerComponentView`.
    static let timerComponentView = _R.nib._TimerComponentView()
    /// Nib `TransactionDetailsComponentView`.
    static let transactionDetailsComponentView = _R.nib._TransactionDetailsComponentView()
    /// Nib `TransactionDetailsTableViewCell`.
    static let transactionDetailsTableViewCell = _R.nib._TransactionDetailsTableViewCell()
    /// Nib `TransactionFilterComponentView`.
    static let transactionFilterComponentView = _R.nib._TransactionFilterComponentView()
    /// Nib `TransactionFilterTableViewCell`.
    static let transactionFilterTableViewCell = _R.nib._TransactionFilterTableViewCell()
    /// Nib `TransactionHistoryComponentView`.
    static let transactionHistoryComponentView = _R.nib._TransactionHistoryComponentView()
    /// Nib `TransactionHistoryTableViewCell`.
    static let transactionHistoryTableViewCell = _R.nib._TransactionHistoryTableViewCell()
    /// Nib `VideoCardComponentView`.
    static let videoCardComponentView = _R.nib._VideoCardComponentView()
    /// Nib `VideoCardTableViewCell`.
    static let videoCardTableViewCell = _R.nib._VideoCardTableViewCell()
    /// Nib `VisaInstructionsComponentView`.
    static let visaInstructionsComponentView = _R.nib._VisaInstructionsComponentView()
    /// Nib `VisaLimitComponentView`.
    static let visaLimitComponentView = _R.nib._VisaLimitComponentView()
    /// Nib `WithdrawInstructionView`.
    static let withdrawInstructionView = _R.nib._WithdrawInstructionView()
    /// Nib `WithdrawTermsView`.
    static let withdrawTermsView = _R.nib._WithdrawTermsView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ABInputView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.abInputView) instead")
    static func abInputView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.abInputView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AccessHistoryComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accessHistoryComponentView) instead")
    static func accessHistoryComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accessHistoryComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AccessHistoryTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accessHistoryTableViewCell) instead")
    static func accessHistoryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accessHistoryTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AccountInfoComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountInfoComponentView) instead")
    static func accountInfoComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountInfoComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AccountParametersComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountParametersComponentView) instead")
    static func accountParametersComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountParametersComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AccountParametersHeaderComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountParametersHeaderComponentView) instead")
    static func accountParametersHeaderComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountParametersHeaderComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AccountParametersHeaderTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountParametersHeaderTableViewCell) instead")
    static func accountParametersHeaderTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountParametersHeaderTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AccountParametersTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountParametersTableViewCell) instead")
    static func accountParametersTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountParametersTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AccountSecurityMessagesComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountSecurityMessagesComponentView) instead")
    static func accountSecurityMessagesComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountSecurityMessagesComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AccountSecurityMessagesTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountSecurityMessagesTableViewCell) instead")
    static func accountSecurityMessagesTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountSecurityMessagesTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddMyCardComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addMyCardComponentView) instead")
    static func addMyCardComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addMyCardComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddMyCardTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addMyCardTableViewCell) instead")
    static func addMyCardTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addMyCardTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AgreementComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.agreementComponentView) instead")
    static func agreementComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.agreementComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BalanceComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.balanceComponentView) instead")
    static func balanceComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.balanceComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BalanceTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.balanceTableViewCell) instead")
    static func balanceTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.balanceTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CalendarComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.calendarComponentView) instead")
    static func calendarComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.calendarComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DateHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dateHeaderCell) instead")
    static func dateHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dateHeaderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DateHeaderComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dateHeaderComponentView) instead")
    static func dateHeaderComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dateHeaderComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EmoneyButton", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.emoneyButton) instead")
    static func emoneyButton(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emoneyButton)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EmoneyInstructionsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.emoneyInstructionsView) instead")
    static func emoneyInstructionsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emoneyInstructionsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FooterComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.footerComponentView) instead")
    static func footerComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.footerComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FooterTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.footerTableViewCell) instead")
    static func footerTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.footerTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GameLauncherCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gameLauncherCollectionViewCell) instead")
    static func gameLauncherCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gameLauncherCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GameLauncherComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gameLauncherComponentView) instead")
    static func gameLauncherComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gameLauncherComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GameLauncherGridCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gameLauncherGridCollectionViewCell) instead")
    static func gameLauncherGridCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gameLauncherGridCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GameLauncherGridComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gameLauncherGridComponentView) instead")
    static func gameLauncherGridComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gameLauncherGridComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GameLoaderComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gameLoaderComponentView) instead")
    static func gameLoaderComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gameLoaderComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeBannerCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeBannerCollectionViewCell) instead")
    static func homeBannerCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeBannerCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeBannerComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeBannerComponentView) instead")
    static func homeBannerComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeBannerComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeBannerContainerCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeBannerContainerCollectionViewCell) instead")
    static func homeBannerContainerCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeBannerContainerCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeBannerContainerComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeBannerContainerComponentView) instead")
    static func homeBannerContainerComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeBannerContainerComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LabelComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.labelComponentView) instead")
    static func labelComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.labelComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoadingCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loadingCollectionViewCell) instead")
    static func loadingCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loadingCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoadingComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loadingComponentView) instead")
    static func loadingComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loadingComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MinAmountComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.minAmountComponentView) instead")
    static func minAmountComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.minAmountComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyCardComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myCardComponentView) instead")
    static func myCardComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myCardComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyCardTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myCardTableViewCell) instead")
    static func myCardTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myCardTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationComponentView) instead")
    static func notificationComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationTableViewCell) instead")
    static func notificationTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationsHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationsHeaderCell) instead")
    static func notificationsHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationsHeaderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationsHeaderComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationsHeaderComponentView) instead")
    static func notificationsHeaderComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationsHeaderComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PasswordChangeRulesView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.passwordChangeRulesView) instead")
    static func passwordChangeRulesView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.passwordChangeRulesView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PaymentMethodCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paymentMethodCollectionViewCell) instead")
    static func paymentMethodCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentMethodCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PaymentMethodComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paymentMethodComponentView) instead")
    static func paymentMethodComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentMethodComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PaymentMethodGridComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paymentMethodGridComponentView) instead")
    static func paymentMethodGridComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentMethodGridComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlayedGameLauncherCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.playedGameLauncherCollectionViewCell) instead")
    static func playedGameLauncherCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.playedGameLauncherCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlayedGameLauncherComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.playedGameLauncherComponentView) instead")
    static func playedGameLauncherComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.playedGameLauncherComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileInfoComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileInfoComponentView) instead")
    static func profileInfoComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileInfoComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileInfoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileInfoTableViewCell) instead")
    static func profileInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileInfoTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PromotionComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.promotionComponentView) instead")
    static func promotionComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.promotionComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PromotionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.promotionTableViewCell) instead")
    static func promotionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.promotionTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuickActionComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quickActionComponentView) instead")
    static func quickActionComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quickActionComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuickActionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quickActionTableViewCell) instead")
    static func quickActionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quickActionTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuickActionsHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quickActionsHeaderCell) instead")
    static func quickActionsHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quickActionsHeaderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuickActionsHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quickActionsHeaderView) instead")
    static func quickActionsHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quickActionsHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RecentlyPlayedCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.recentlyPlayedCollectionViewCell) instead")
    static func recentlyPlayedCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.recentlyPlayedCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RecentlyPlayedComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.recentlyPlayedComponentView) instead")
    static func recentlyPlayedComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.recentlyPlayedComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SecurityLevelComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.securityLevelComponentView) instead")
    static func securityLevelComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.securityLevelComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SecurityLevelTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.securityLevelTableViewCell) instead")
    static func securityLevelTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.securityLevelTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SecurityLevelTypeComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.securityLevelTypeComponentView) instead")
    static func securityLevelTypeComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.securityLevelTypeComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SecurityLevelTypeTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.securityLevelTypeTableViewCell) instead")
    static func securityLevelTypeTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.securityLevelTypeTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SuggestedAmountCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.suggestedAmountCollectionViewCell) instead")
    static func suggestedAmountCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.suggestedAmountCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SuggestedAmountComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.suggestedAmountComponentView) instead")
    static func suggestedAmountComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.suggestedAmountComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SuggestedAmountGridComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.suggestedAmountGridComponentView) instead")
    static func suggestedAmountGridComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.suggestedAmountGridComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TimerComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.timerComponentView) instead")
    static func timerComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.timerComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TransactionDetailsComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionDetailsComponentView) instead")
    static func transactionDetailsComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionDetailsComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TransactionDetailsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionDetailsTableViewCell) instead")
    static func transactionDetailsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionDetailsTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TransactionFilterComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionFilterComponentView) instead")
    static func transactionFilterComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionFilterComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TransactionFilterTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionFilterTableViewCell) instead")
    static func transactionFilterTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionFilterTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TransactionHistoryComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionHistoryComponentView) instead")
    static func transactionHistoryComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionHistoryComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TransactionHistoryTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionHistoryTableViewCell) instead")
    static func transactionHistoryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionHistoryTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoCardComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoCardComponentView) instead")
    static func videoCardComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoCardComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoCardTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoCardTableViewCell) instead")
    static func videoCardTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoCardTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VisaInstructionsComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.visaInstructionsComponentView) instead")
    static func visaInstructionsComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.visaInstructionsComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VisaLimitComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.visaLimitComponentView) instead")
    static func visaLimitComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.visaLimitComponentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WithdrawInstructionView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.withdrawInstructionView) instead")
    static func withdrawInstructionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.withdrawInstructionView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WithdrawTermsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.withdrawTermsView) instead")
    static func withdrawTermsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.withdrawTermsView)
    }
    #endif

    static func abInputView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.abInputView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func accessHistoryComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.accessHistoryComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func accessHistoryTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AccessHistoryTableViewCell? {
      return R.nib.accessHistoryTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccessHistoryTableViewCell
    }

    static func accountInfoComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.accountInfoComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func accountParametersComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.accountParametersComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func accountParametersHeaderComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.accountParametersHeaderComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func accountParametersHeaderTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AccountParametersHeaderTableViewCell? {
      return R.nib.accountParametersHeaderTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccountParametersHeaderTableViewCell
    }

    static func accountParametersTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AccountParametersTableViewCell? {
      return R.nib.accountParametersTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccountParametersTableViewCell
    }

    static func accountSecurityMessagesComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.accountSecurityMessagesComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func accountSecurityMessagesTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AccountSecurityMessagesTableViewCell? {
      return R.nib.accountSecurityMessagesTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccountSecurityMessagesTableViewCell
    }

    static func addMyCardComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.addMyCardComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func addMyCardTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddMyCardTableViewCell? {
      return R.nib.addMyCardTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddMyCardTableViewCell
    }

    static func agreementComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.agreementComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func balanceComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.balanceComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func balanceTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BalanceTableViewCell? {
      return R.nib.balanceTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BalanceTableViewCell
    }

    static func calendarComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.calendarComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func dateHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DateHeaderCell? {
      return R.nib.dateHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DateHeaderCell
    }

    static func dateHeaderComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.dateHeaderComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func emoneyButton(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.emoneyButton.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func emoneyInstructionsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.emoneyInstructionsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func footerComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.footerComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func footerTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FooterTableViewCell? {
      return R.nib.footerTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FooterTableViewCell
    }

    static func gameLauncherCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GameLauncherCollectionViewCell? {
      return R.nib.gameLauncherCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GameLauncherCollectionViewCell
    }

    static func gameLauncherComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.gameLauncherComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func gameLauncherGridCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GameLauncherGridCollectionViewCell? {
      return R.nib.gameLauncherGridCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GameLauncherGridCollectionViewCell
    }

    static func gameLauncherGridComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.gameLauncherGridComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func gameLoaderComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.gameLoaderComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func homeBannerCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBannerCollectionViewCell? {
      return R.nib.homeBannerCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBannerCollectionViewCell
    }

    static func homeBannerComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.homeBannerComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func homeBannerContainerCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBannerContainerCollectionViewCell? {
      return R.nib.homeBannerContainerCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBannerContainerCollectionViewCell
    }

    static func homeBannerContainerComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.homeBannerContainerComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func labelComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.labelComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func loadingCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoadingCollectionViewCell? {
      return R.nib.loadingCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoadingCollectionViewCell
    }

    static func loadingComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loadingComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func minAmountComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.minAmountComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func myCardComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.myCardComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func myCardTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyCardTableViewCell? {
      return R.nib.myCardTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyCardTableViewCell
    }

    static func notificationComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.notificationComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func notificationTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationTableViewCell? {
      return R.nib.notificationTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTableViewCell
    }

    static func notificationsHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationsHeaderCell? {
      return R.nib.notificationsHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationsHeaderCell
    }

    static func notificationsHeaderComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.notificationsHeaderComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func passwordChangeRulesView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.passwordChangeRulesView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func paymentMethodCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentMethodCollectionViewCell? {
      return R.nib.paymentMethodCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentMethodCollectionViewCell
    }

    static func paymentMethodComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.paymentMethodComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func paymentMethodGridComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.paymentMethodGridComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func playedGameLauncherCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlayedGameLauncherCollectionViewCell? {
      return R.nib.playedGameLauncherCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlayedGameLauncherCollectionViewCell
    }

    static func playedGameLauncherComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.playedGameLauncherComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func profileInfoComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.profileInfoComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func profileInfoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileInfoTableViewCell? {
      return R.nib.profileInfoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileInfoTableViewCell
    }

    static func promotionComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.promotionComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func promotionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PromotionTableViewCell? {
      return R.nib.promotionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PromotionTableViewCell
    }

    static func quickActionComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quickActionComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quickActionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuickActionTableViewCell? {
      return R.nib.quickActionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuickActionTableViewCell
    }

    static func quickActionsHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuickActionsHeaderCell? {
      return R.nib.quickActionsHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuickActionsHeaderCell
    }

    static func quickActionsHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quickActionsHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func recentlyPlayedCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecentlyPlayedCollectionViewCell? {
      return R.nib.recentlyPlayedCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecentlyPlayedCollectionViewCell
    }

    static func recentlyPlayedComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.recentlyPlayedComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func securityLevelComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.securityLevelComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func securityLevelTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SecurityLevelTableViewCell? {
      return R.nib.securityLevelTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SecurityLevelTableViewCell
    }

    static func securityLevelTypeComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.securityLevelTypeComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func securityLevelTypeTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SecurityLevelTypeTableViewCell? {
      return R.nib.securityLevelTypeTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SecurityLevelTypeTableViewCell
    }

    static func suggestedAmountCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SuggestedAmountCollectionViewCell? {
      return R.nib.suggestedAmountCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SuggestedAmountCollectionViewCell
    }

    static func suggestedAmountComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.suggestedAmountComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func suggestedAmountGridComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.suggestedAmountGridComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func timerComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.timerComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func transactionDetailsComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.transactionDetailsComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func transactionDetailsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionDetailsTableViewCell? {
      return R.nib.transactionDetailsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionDetailsTableViewCell
    }

    static func transactionFilterComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.transactionFilterComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func transactionFilterTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionFilterTableViewCell? {
      return R.nib.transactionFilterTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionFilterTableViewCell
    }

    static func transactionHistoryComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.transactionHistoryComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func transactionHistoryTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionHistoryTableViewCell? {
      return R.nib.transactionHistoryTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionHistoryTableViewCell
    }

    static func videoCardComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.videoCardComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func videoCardTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VideoCardTableViewCell? {
      return R.nib.videoCardTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoCardTableViewCell
    }

    static func visaInstructionsComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.visaInstructionsComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func visaLimitComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.visaLimitComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func withdrawInstructionView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.withdrawInstructionView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func withdrawTermsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.withdrawTermsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localization` struct is generated, and contains static references to 468 localization keys.
    struct localization {
      /// en translation: ADD CARD
      ///
      /// Locales: en, ka, hy
      static let card_add_button_title = Rswift.StringResource(key: "card_add_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Account Block
      ///
      /// Locales: en, ka, hy
      static let security_levels_account_block = Rswift.StringResource(key: "security_levels_account_block", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Account Information
      ///
      /// Locales: en, ka, hy
      static let account_information = Rswift.StringResource(key: "account_information", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Account Information
      ///
      /// Locales: en, ka, hy
      static let account_information_title = Rswift.StringResource(key: "account_information_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Account Parameters
      ///
      /// Locales: en, ka, hy
      static let account_parameters = Rswift.StringResource(key: "account_parameters", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Account Parameters
      ///
      /// Locales: en, ka, hy
      static let profile_page_title = Rswift.StringResource(key: "profile_page_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Activate
      ///
      /// Locales: en, ka, hy
      static let high_security_button_on = Rswift.StringResource(key: "high_security_button_on", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Activate Biometry
      ///
      /// Locales: en, ka, hy
      static let biometric_settings_activate_biometry = Rswift.StringResource(key: "biometric_settings_activate_biometry", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Activate Face ID
      ///
      /// Locales: en, ka, hy
      static let biometric_settings_activate_face_id = Rswift.StringResource(key: "biometric_settings_activate_face_id", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Activate Touch ID
      ///
      /// Locales: en, ka, hy
      static let biometric_settings_activate_touch_id = Rswift.StringResource(key: "biometric_settings_activate_touch_id", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Active Till
      ///
      /// Locales: en, ka, hy
      static let active_till = Rswift.StringResource(key: "active_till", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Add Card
      ///
      /// Locales: en, ka, hy
      static let add_card_title = Rswift.StringResource(key: "add_card_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Add card
      ///
      /// Locales: en, ka, hy
      static let my_cards_add_card = Rswift.StringResource(key: "my_cards_add_card", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: en, ka, hy
      static let account_info_address = Rswift.StringResource(key: "account_info_address", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Afghanistan
      ///
      /// Locales: en, ka, hy
      static let afghanistan = Rswift.StringResource(key: "afghanistan", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Aland Islands
      ///
      /// Locales: en, ka, hy
      static let aland_islands = Rswift.StringResource(key: "aland_islands", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Albania
      ///
      /// Locales: en, ka, hy
      static let albania = Rswift.StringResource(key: "albania", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Algeria
      ///
      /// Locales: en, ka, hy
      static let algeria = Rswift.StringResource(key: "algeria", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: American Samoa
      ///
      /// Locales: en, ka, hy
      static let american_samoa = Rswift.StringResource(key: "american_samoa", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Amount
      ///
      /// Locales: en, ka, hy
      static let deposit_visa_amount = Rswift.StringResource(key: "deposit_visa_amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Amount specified in wrong format
      ///
      /// Locales: en, ka, hy
      static let deposit_visa_wrong_format_amount = Rswift.StringResource(key: "deposit_visa_wrong_format_amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Andorra
      ///
      /// Locales: en, ka, hy
      static let andorra = Rswift.StringResource(key: "andorra", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Angola
      ///
      /// Locales: en, ka, hy
      static let angola = Rswift.StringResource(key: "angola", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Anguilla
      ///
      /// Locales: en, ka, hy
      static let anguilla = Rswift.StringResource(key: "anguilla", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Antarctica
      ///
      /// Locales: en, ka, hy
      static let antarctica = Rswift.StringResource(key: "antarctica", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Antigua And Barbuda
      ///
      /// Locales: en, ka, hy
      static let antigua_and_barbuda = Rswift.StringResource(key: "antigua_and_barbuda", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Approve
      ///
      /// Locales: en, ka, hy
      static let approve_address_button_title = Rswift.StringResource(key: "approve_address_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Approve
      ///
      /// Locales: en, ka, hy
      static let approve_number_button_title = Rswift.StringResource(key: "approve_number_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: April
      ///
      /// Locales: en, ka, hy
      static let april = Rswift.StringResource(key: "april", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Argentina
      ///
      /// Locales: en, ka, hy
      static let argentina = Rswift.StringResource(key: "argentina", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Armenia
      ///
      /// Locales: en, ka, hy
      static let armenia = Rswift.StringResource(key: "armenia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Aruba
      ///
      /// Locales: en, ka, hy
      static let aruba = Rswift.StringResource(key: "aruba", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: August
      ///
      /// Locales: en, ka, hy
      static let august = Rswift.StringResource(key: "august", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Australia
      ///
      /// Locales: en, ka, hy
      static let australia = Rswift.StringResource(key: "australia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Austria
      ///
      /// Locales: en, ka, hy
      static let austria = Rswift.StringResource(key: "austria", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Azerbaijan
      ///
      /// Locales: en, ka, hy
      static let azerbaijan = Rswift.StringResource(key: "azerbaijan", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Bahamas
      ///
      /// Locales: en, ka, hy
      static let bahamas = Rswift.StringResource(key: "bahamas", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Bahrain
      ///
      /// Locales: en, ka, hy
      static let bahrain = Rswift.StringResource(key: "bahrain", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Bangladesh
      ///
      /// Locales: en, ka, hy
      static let bangladesh = Rswift.StringResource(key: "bangladesh", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Barbados
      ///
      /// Locales: en, ka, hy
      static let barbados = Rswift.StringResource(key: "barbados", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Belarus
      ///
      /// Locales: en, ka, hy
      static let belarus = Rswift.StringResource(key: "belarus", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Belgium
      ///
      /// Locales: en, ka, hy
      static let belgium = Rswift.StringResource(key: "belgium", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Belize
      ///
      /// Locales: en, ka, hy
      static let belize = Rswift.StringResource(key: "belize", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Benin
      ///
      /// Locales: en, ka, hy
      static let benin = Rswift.StringResource(key: "benin", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Bermuda
      ///
      /// Locales: en, ka, hy
      static let bermuda = Rswift.StringResource(key: "bermuda", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Bhutan
      ///
      /// Locales: en, ka, hy
      static let bhutan = Rswift.StringResource(key: "bhutan", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Biometry Authentication Parameters
      ///
      /// Locales: en, ka, hy
      static let biomatry_authentication_parameters = Rswift.StringResource(key: "biomatry_authentication_parameters", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Biometry is not available
      ///
      /// Locales: en, ka, hy
      static let biometric_settings_not_available = Rswift.StringResource(key: "biometric_settings_not_available", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Birth Date
      ///
      /// Locales: en, ka, hy
      static let account_info_birth_date = Rswift.StringResource(key: "account_info_birth_date", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Block Account
      ///
      /// Locales: en, ka, hy
      static let block_accound = Rswift.StringResource(key: "block_accound", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Block account
      ///
      /// Locales: en, ka, hy
      static let account_parameters_self_block = Rswift.StringResource(key: "account_parameters_self_block", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Bolivia
      ///
      /// Locales: en, ka, hy
      static let bolivia = Rswift.StringResource(key: "bolivia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Bonaire Sint Eustatius And Saba
      ///
      /// Locales: en, ka, hy
      static let bonaire_sint_eustatius_and_saba = Rswift.StringResource(key: "bonaire_sint_eustatius_and_saba", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Bosnia And Herzegovina
      ///
      /// Locales: en, ka, hy
      static let bosnia_and_herzegovina = Rswift.StringResource(key: "bosnia_and_herzegovina", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Botswana
      ///
      /// Locales: en, ka, hy
      static let botswana = Rswift.StringResource(key: "botswana", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Bouvet Island
      ///
      /// Locales: en, ka, hy
      static let bouvet_island = Rswift.StringResource(key: "bouvet_island", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Brazil
      ///
      /// Locales: en, ka, hy
      static let brazil = Rswift.StringResource(key: "brazil", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: British Indian Ocean Territory
      ///
      /// Locales: en, ka, hy
      static let british_indian_ocean_territory = Rswift.StringResource(key: "british_indian_ocean_territory", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Brunei
      ///
      /// Locales: en, ka, hy
      static let brunei = Rswift.StringResource(key: "brunei", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Bulgaria
      ///
      /// Locales: en, ka, hy
      static let bulgaria = Rswift.StringResource(key: "bulgaria", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Burkina Faso
      ///
      /// Locales: en, ka, hy
      static let burkina_faso = Rswift.StringResource(key: "burkina_faso", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Burundi
      ///
      /// Locales: en, ka, hy
      static let burundi = Rswift.StringResource(key: "burundi", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: CVV
      ///
      /// Locales: en, ka, hy
      static let card_cvv = Rswift.StringResource(key: "card_cvv", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Cambodia
      ///
      /// Locales: en, ka, hy
      static let cambodia = Rswift.StringResource(key: "cambodia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Cameroon
      ///
      /// Locales: en, ka, hy
      static let cameroon = Rswift.StringResource(key: "cameroon", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Canada
      ///
      /// Locales: en, ka, hy
      static let canada = Rswift.StringResource(key: "canada", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, ka, hy
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Cape Verde
      ///
      /// Locales: en, ka, hy
      static let cape_verde = Rswift.StringResource(key: "cape_verde", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Card Number
      ///
      /// Locales: en, ka, hy
      static let card_number_title = Rswift.StringResource(key: "card_number_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Cayman Islands
      ///
      /// Locales: en, ka, hy
      static let cayman_islands = Rswift.StringResource(key: "cayman_islands", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Central African Republic
      ///
      /// Locales: en, ka, hy
      static let central_african_republic = Rswift.StringResource(key: "central_african_republic", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Chad
      ///
      /// Locales: en, ka, hy
      static let chad = Rswift.StringResource(key: "chad", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Change Address
      ///
      /// Locales: en, ka, hy
      static let address_change_title = Rswift.StringResource(key: "address_change_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Change E-Mail
      ///
      /// Locales: en, ka, hy
      static let mail_change_title = Rswift.StringResource(key: "mail_change_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: en, ka, hy
      static let password_change_title = Rswift.StringResource(key: "password_change_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Change Phone Number
      ///
      /// Locales: en, ka, hy
      static let phone_number_change_title = Rswift.StringResource(key: "phone_number_change_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Change password
      ///
      /// Locales: en, ka, hy
      static let account_parameters_change_password = Rswift.StringResource(key: "account_parameters_change_password", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Chile
      ///
      /// Locales: en, ka, hy
      static let chile = Rswift.StringResource(key: "chile", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: China
      ///
      /// Locales: en, ka, hy
      static let china = Rswift.StringResource(key: "china", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Choose Account
      ///
      /// Locales: en, ka, hy
      static let deposit_visa_choose_account = Rswift.StringResource(key: "deposit_visa_choose_account", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Christmas Island
      ///
      /// Locales: en, ka, hy
      static let christmas_island = Rswift.StringResource(key: "christmas_island", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Cocos Islands
      ///
      /// Locales: en, ka, hy
      static let cocos_islands = Rswift.StringResource(key: "cocos_islands", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Code is sent to yout number
      ///
      /// Locales: en, ka, hy
      static let sms_confirmation_description = Rswift.StringResource(key: "sms_confirmation_description", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Colombia
      ///
      /// Locales: en, ka, hy
      static let colombia = Rswift.StringResource(key: "colombia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Comoros
      ///
      /// Locales: en, ka, hy
      static let comoros = Rswift.StringResource(key: "comoros", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, ka, hy
      static let p2p_transfer_confirm = Rswift.StringResource(key: "p2p_transfer_confirm", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Congo
      ///
      /// Locales: en, ka, hy
      static let congo = Rswift.StringResource(key: "congo", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Contact Information
      ///
      /// Locales: en, ka, hy
      static let account_info_contact_info_title = Rswift.StringResource(key: "account_info_contact_info_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Contact us
      ///
      /// Locales: en, ka, hy
      static let contact_us_button_title = Rswift.StringResource(key: "contact_us_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Contacts Change
      ///
      /// Locales: en, ka, hy
      static let security_levels_contacts_change = Rswift.StringResource(key: "security_levels_contacts_change", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: en, ka, hy
      static let add_card_continue_button_title = Rswift.StringResource(key: "add_card_continue_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Cook Islands
      ///
      /// Locales: en, ka, hy
      static let cook_islands = Rswift.StringResource(key: "cook_islands", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Costa Rica
      ///
      /// Locales: en, ka, hy
      static let costa_rica = Rswift.StringResource(key: "costa_rica", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Country
      ///
      /// Locales: en, ka, hy
      static let account_info_country = Rswift.StringResource(key: "account_info_country", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Croatia
      ///
      /// Locales: en, ka, hy
      static let croatia = Rswift.StringResource(key: "croatia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Cuba
      ///
      /// Locales: en, ka, hy
      static let cuba = Rswift.StringResource(key: "cuba", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Curacao
      ///
      /// Locales: en, ka, hy
      static let curacao = Rswift.StringResource(key: "curacao", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Cyprus
      ///
      /// Locales: en, ka, hy
      static let cyprus = Rswift.StringResource(key: "cyprus", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Czech Republic
      ///
      /// Locales: en, ka, hy
      static let czech_republic = Rswift.StringResource(key: "czech_republic", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: DEPOSIT
      ///
      /// Locales: en, ka, hy
      static let transactions_details_type_deposit = Rswift.StringResource(key: "transactions_details_type_deposit", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Date
      ///
      /// Locales: en, ka, hy
      static let transactions_details_date = Rswift.StringResource(key: "transactions_details_date", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Deactivate
      ///
      /// Locales: en, ka, hy
      static let high_security_button_off = Rswift.StringResource(key: "high_security_button_off", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: December
      ///
      /// Locales: en, ka, hy
      static let december = Rswift.StringResource(key: "december", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en, ka, hy
      static let delete_button_title = Rswift.StringResource(key: "delete_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en, ka, hy
      static let notifications_page_delete_title = Rswift.StringResource(key: "notifications_page_delete_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Democratic Republic Of The Congo
      ///
      /// Locales: en, ka, hy
      static let democratic_republic_of_the_congo = Rswift.StringResource(key: "democratic_republic_of_the_congo", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Denmark
      ///
      /// Locales: en, ka, hy
      static let denmark = Rswift.StringResource(key: "denmark", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Deposit
      ///
      /// Locales: en, ka, hy
      static let deposit_button_title = Rswift.StringResource(key: "deposit_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Deposit
      ///
      /// Locales: en, ka, hy
      static let security_levels_deposit = Rswift.StringResource(key: "security_levels_deposit", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Desktop
      ///
      /// Locales: en, ka, hy
      static let access_history_device_desktop = Rswift.StringResource(key: "access_history_device_desktop", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Did not receive message?
      ///
      /// Locales: en, ka, hy
      static let sms_did_not_receive_message = Rswift.StringResource(key: "sms_did_not_receive_message", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Djibouti
      ///
      /// Locales: en, ka, hy
      static let djibouti = Rswift.StringResource(key: "djibouti", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Do you want to activate an individual package?
      ///
      /// Locales: en, ka, hy
      static let security_levels_switched_to_individual = Rswift.StringResource(key: "security_levels_switched_to_individual", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Dominica
      ///
      /// Locales: en, ka, hy
      static let dominica = Rswift.StringResource(key: "dominica", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Dominican Republic
      ///
      /// Locales: en, ka, hy
      static let dominican_republic = Rswift.StringResource(key: "dominican_republic", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, ka, hy
      static let cashflow_done_button_title = Rswift.StringResource(key: "cashflow_done_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Ecuador
      ///
      /// Locales: en, ka, hy
      static let ecuador = Rswift.StringResource(key: "ecuador", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Egypt
      ///
      /// Locales: en, ka, hy
      static let egypt = Rswift.StringResource(key: "egypt", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: El Salvador
      ///
      /// Locales: en, ka, hy
      static let el_salvador = Rswift.StringResource(key: "el_salvador", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Emails
      ///
      /// Locales: en, ka, hy
      static let account_parameters_messages_email_title = Rswift.StringResource(key: "account_parameters_messages_email_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Enter New Address
      ///
      /// Locales: en, ka, hy
      static let new_address_placeholder = Rswift.StringResource(key: "new_address_placeholder", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Enter New Address
      ///
      /// Locales: en, ka, hy
      static let new_address_subtitle = Rswift.StringResource(key: "new_address_subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Enter New Phone Number
      ///
      /// Locales: en, ka, hy
      static let phone_number_subtitle = Rswift.StringResource(key: "phone_number_subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Enter Number
      ///
      /// Locales: en, ka, hy
      static let enter_card_number = Rswift.StringResource(key: "enter_card_number", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Equatorial Guinea
      ///
      /// Locales: en, ka, hy
      static let equatorial_guinea = Rswift.StringResource(key: "equatorial_guinea", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Eritrea
      ///
      /// Locales: en, ka, hy
      static let eritrea = Rswift.StringResource(key: "eritrea", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Estonia
      ///
      /// Locales: en, ka, hy
      static let estonia = Rswift.StringResource(key: "estonia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Ethiopia
      ///
      /// Locales: en, ka, hy
      static let ethiopia = Rswift.StringResource(key: "ethiopia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Falkland Islands
      ///
      /// Locales: en, ka, hy
      static let falkland_islands = Rswift.StringResource(key: "falkland_islands", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Faroe Islands
      ///
      /// Locales: en, ka, hy
      static let faroe_islands = Rswift.StringResource(key: "faroe_islands", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: February
      ///
      /// Locales: en, ka, hy
      static let february = Rswift.StringResource(key: "february", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Female
      ///
      /// Locales: en, ka, hy
      static let gender_female = Rswift.StringResource(key: "gender_female", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Fiji
      ///
      /// Locales: en, ka, hy
      static let fiji = Rswift.StringResource(key: "fiji", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Filter
      ///
      /// Locales: en, ka, hy
      static let transactions_filter_title = Rswift.StringResource(key: "transactions_filter_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Finland
      ///
      /// Locales: en, ka, hy
      static let finland = Rswift.StringResource(key: "finland", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Forgot Password?
      ///
      /// Locales: en, ka, hy
      static let login_forgot_password = Rswift.StringResource(key: "login_forgot_password", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Forgot Username?
      ///
      /// Locales: en, ka, hy
      static let login_forgot_username = Rswift.StringResource(key: "login_forgot_username", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: France
      ///
      /// Locales: en, ka, hy
      static let france = Rswift.StringResource(key: "france", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: French Guiana
      ///
      /// Locales: en, ka, hy
      static let french_guiana = Rswift.StringResource(key: "french_guiana", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: French Polynesia
      ///
      /// Locales: en, ka, hy
      static let french_polynesia = Rswift.StringResource(key: "french_polynesia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Friend ID
      ///
      /// Locales: en, ka, hy
      static let p2p_transfer_friend_id = Rswift.StringResource(key: "p2p_transfer_friend_id", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Gabon
      ///
      /// Locales: en, ka, hy
      static let gabon = Rswift.StringResource(key: "gabon", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Gambia
      ///
      /// Locales: en, ka, hy
      static let gambia = Rswift.StringResource(key: "gambia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Games
      ///
      /// Locales: en, ka, hy
      static let home_page_title = Rswift.StringResource(key: "home_page_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Gender
      ///
      /// Locales: en, ka, hy
      static let account_info_gender = Rswift.StringResource(key: "account_info_gender", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Georgia
      ///
      /// Locales: en, ka, hy
      static let georgia = Rswift.StringResource(key: "georgia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Germany
      ///
      /// Locales: en, ka, hy
      static let germany = Rswift.StringResource(key: "germany", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Ghana
      ///
      /// Locales: en, ka, hy
      static let ghana = Rswift.StringResource(key: "ghana", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Gibraltar
      ///
      /// Locales: en, ka, hy
      static let gibraltar = Rswift.StringResource(key: "gibraltar", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Greece
      ///
      /// Locales: en, ka, hy
      static let greece = Rswift.StringResource(key: "greece", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Greenland
      ///
      /// Locales: en, ka, hy
      static let greenland = Rswift.StringResource(key: "greenland", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Grenada
      ///
      /// Locales: en, ka, hy
      static let grenada = Rswift.StringResource(key: "grenada", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Guadaloupe
      ///
      /// Locales: en, ka, hy
      static let guadaloupe = Rswift.StringResource(key: "guadaloupe", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Guam
      ///
      /// Locales: en, ka, hy
      static let guam = Rswift.StringResource(key: "guam", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Guatemala
      ///
      /// Locales: en, ka, hy
      static let guatemala = Rswift.StringResource(key: "guatemala", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Guernsey
      ///
      /// Locales: en, ka, hy
      static let guernsey = Rswift.StringResource(key: "guernsey", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Guinea
      ///
      /// Locales: en, ka, hy
      static let guinea = Rswift.StringResource(key: "guinea", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Guinea Bissau
      ///
      /// Locales: en, ka, hy
      static let guinea_bissau = Rswift.StringResource(key: "guinea_bissau", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Guyana
      ///
      /// Locales: en, ka, hy
      static let guyana = Rswift.StringResource(key: "guyana", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Haiti
      ///
      /// Locales: en, ka, hy
      static let haiti = Rswift.StringResource(key: "haiti", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Heard & McDonald Islands
      ///
      /// Locales: en, ka, hy
      static let heard_island_and_mc_donald_islands = Rswift.StringResource(key: "heard_island_and_mc_donald_islands", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: High Security Activation / Deactivation
      ///
      /// Locales: en, ka, hy
      static let security_levels_high_security_activation_deactivation = Rswift.StringResource(key: "security_levels_high_security_activation_deactivation", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: High Security Parameters
      ///
      /// Locales: en, ka, hy
      static let security_levels_high_security_parameters = Rswift.StringResource(key: "security_levels_high_security_parameters", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: High Secutiry On
      ///
      /// Locales: en, ka, hy
      static let high_security_page_title = Rswift.StringResource(key: "high_security_page_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: High security mode
      ///
      /// Locales: en, ka, hy
      static let account_parameters_high_security = Rswift.StringResource(key: "account_parameters_high_security", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Home Page
      ///
      /// Locales: en, ka, hy
      static let profile_page_back_title = Rswift.StringResource(key: "profile_page_back_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Honduras
      ///
      /// Locales: en, ka, hy
      static let honduras = Rswift.StringResource(key: "honduras", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Hong Kong
      ///
      /// Locales: en, ka, hy
      static let hong_kong = Rswift.StringResource(key: "hong_kong", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Hungary
      ///
      /// Locales: en, ka, hy
      static let hungary = Rswift.StringResource(key: "hungary", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: ID Document Change
      ///
      /// Locales: en, ka, hy
      static let security_levels_id_document_change = Rswift.StringResource(key: "security_levels_id_document_change", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Iceland
      ///
      /// Locales: en, ka, hy
      static let iceland = Rswift.StringResource(key: "iceland", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Incognito Card
      ///
      /// Locales: en, ka, hy
      static let incognito_card = Rswift.StringResource(key: "incognito_card", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: India
      ///
      /// Locales: en, ka, hy
      static let india = Rswift.StringResource(key: "india", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Individual
      ///
      /// Locales: en, ka, hy
      static let security_levels_individual = Rswift.StringResource(key: "security_levels_individual", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Indonesia
      ///
      /// Locales: en, ka, hy
      static let indonesia = Rswift.StringResource(key: "indonesia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Iran
      ///
      /// Locales: en, ka, hy
      static let iran = Rswift.StringResource(key: "iran", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Iraq
      ///
      /// Locales: en, ka, hy
      static let iraq = Rswift.StringResource(key: "iraq", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Ireland
      ///
      /// Locales: en, ka, hy
      static let ireland = Rswift.StringResource(key: "ireland", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Isle Of Man
      ///
      /// Locales: en, ka, hy
      static let isle_of_man = Rswift.StringResource(key: "isle_of_man", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Israel
      ///
      /// Locales: en, ka, hy
      static let israel = Rswift.StringResource(key: "israel", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Italy
      ///
      /// Locales: en, ka, hy
      static let italy = Rswift.StringResource(key: "italy", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Jamaica
      ///
      /// Locales: en, ka, hy
      static let jamaica = Rswift.StringResource(key: "jamaica", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: January
      ///
      /// Locales: en, ka, hy
      static let january = Rswift.StringResource(key: "january", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Japan
      ///
      /// Locales: en, ka, hy
      static let japan = Rswift.StringResource(key: "japan", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Jersey
      ///
      /// Locales: en, ka, hy
      static let jersey = Rswift.StringResource(key: "jersey", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Join now
      ///
      /// Locales: en, ka, hy
      static let join_now = Rswift.StringResource(key: "join_now", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Jordan
      ///
      /// Locales: en, ka, hy
      static let jordan = Rswift.StringResource(key: "jordan", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: July
      ///
      /// Locales: en, ka, hy
      static let july = Rswift.StringResource(key: "july", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: June
      ///
      /// Locales: en, ka, hy
      static let june = Rswift.StringResource(key: "june", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Kazakhstan
      ///
      /// Locales: en, ka, hy
      static let kazakhstan = Rswift.StringResource(key: "kazakhstan", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Kenya
      ///
      /// Locales: en, ka, hy
      static let kenya = Rswift.StringResource(key: "kenya", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Kiribati
      ///
      /// Locales: en, ka, hy
      static let kiribati = Rswift.StringResource(key: "kiribati", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Kosovo
      ///
      /// Locales: en, ka, hy
      static let kosovo = Rswift.StringResource(key: "kosovo", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Kuwait
      ///
      /// Locales: en, ka, hy
      static let kuwait = Rswift.StringResource(key: "kuwait", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Kyrgyzstan
      ///
      /// Locales: en, ka, hy
      static let kyrgyzstan = Rswift.StringResource(key: "kyrgyzstan", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: LOG IN
      ///
      /// Locales: en, ka, hy
      static let login_button_title = Rswift.StringResource(key: "login_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Laos
      ///
      /// Locales: en, ka, hy
      static let laos = Rswift.StringResource(key: "laos", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Latvia
      ///
      /// Locales: en, ka, hy
      static let latvia = Rswift.StringResource(key: "latvia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Lebanon
      ///
      /// Locales: en, ka, hy
      static let lebanon = Rswift.StringResource(key: "lebanon", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Lesotho
      ///
      /// Locales: en, ka, hy
      static let lesotho = Rswift.StringResource(key: "lesotho", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Liberia
      ///
      /// Locales: en, ka, hy
      static let liberia = Rswift.StringResource(key: "liberia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Libya
      ///
      /// Locales: en, ka, hy
      static let libya = Rswift.StringResource(key: "libya", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Liechtenstein
      ///
      /// Locales: en, ka, hy
      static let liechtenstein = Rswift.StringResource(key: "liechtenstein", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Lithuania
      ///
      /// Locales: en, ka, hy
      static let lithuania = Rswift.StringResource(key: "lithuania", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Log Out
      ///
      /// Locales: en, ka, hy
      static let log_out = Rswift.StringResource(key: "log_out", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Log in to
      ///
      /// Locales: en, ka, hy
      static let login_page_title = Rswift.StringResource(key: "login_page_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Log in with face ID
      ///
      /// Locales: en, ka, hy
      static let login_with_face_id_title = Rswift.StringResource(key: "login_with_face_id_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Log in with touch ID
      ///
      /// Locales: en, ka, hy
      static let login_with_touch_id_title = Rswift.StringResource(key: "login_with_touch_id_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en, ka, hy
      static let login = Rswift.StringResource(key: "login", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Login history
      ///
      /// Locales: en, ka, hy
      static let account_parameters_login_history = Rswift.StringResource(key: "account_parameters_login_history", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Luxembourg
      ///
      /// Locales: en, ka, hy
      static let luxembourg = Rswift.StringResource(key: "luxembourg", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Macao
      ///
      /// Locales: en, ka, hy
      static let macao = Rswift.StringResource(key: "macao", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Macedonia
      ///
      /// Locales: en, ka, hy
      static let macedonia = Rswift.StringResource(key: "macedonia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Madagascar
      ///
      /// Locales: en, ka, hy
      static let madagascar = Rswift.StringResource(key: "madagascar", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Mail
      ///
      /// Locales: en, ka, hy
      static let account_info_mail = Rswift.StringResource(key: "account_info_mail", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Malawi
      ///
      /// Locales: en, ka, hy
      static let malawi = Rswift.StringResource(key: "malawi", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Malaysia
      ///
      /// Locales: en, ka, hy
      static let malaysia = Rswift.StringResource(key: "malaysia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Maldives
      ///
      /// Locales: en, ka, hy
      static let maldives = Rswift.StringResource(key: "maldives", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Male
      ///
      /// Locales: en, ka, hy
      static let gender_male = Rswift.StringResource(key: "gender_male", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Mali
      ///
      /// Locales: en, ka, hy
      static let mali = Rswift.StringResource(key: "mali", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Malta
      ///
      /// Locales: en, ka, hy
      static let malta = Rswift.StringResource(key: "malta", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Manage my cards
      ///
      /// Locales: en, ka, hy
      static let my_cards_manage = Rswift.StringResource(key: "my_cards_manage", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: March
      ///
      /// Locales: en, ka, hy
      static let march = Rswift.StringResource(key: "march", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Marshall Islands
      ///
      /// Locales: en, ka, hy
      static let marshall_islands = Rswift.StringResource(key: "marshall_islands", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Martinique
      ///
      /// Locales: en, ka, hy
      static let martinique = Rswift.StringResource(key: "martinique", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Mauritania
      ///
      /// Locales: en, ka, hy
      static let mauritania = Rswift.StringResource(key: "mauritania", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Mauritius
      ///
      /// Locales: en, ka, hy
      static let mauritius = Rswift.StringResource(key: "mauritius", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: May
      ///
      /// Locales: en, ka, hy
      static let may = Rswift.StringResource(key: "may", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Mayotte
      ///
      /// Locales: en, ka, hy
      static let mayotte = Rswift.StringResource(key: "mayotte", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Mexico
      ///
      /// Locales: en, ka, hy
      static let mexico = Rswift.StringResource(key: "mexico", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Micronesia
      ///
      /// Locales: en, ka, hy
      static let micronesia = Rswift.StringResource(key: "micronesia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Minimum Amount
      ///
      /// Locales: en, ka, hy
      static let add_card_minimum_amount = Rswift.StringResource(key: "add_card_minimum_amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Mobile
      ///
      /// Locales: en, ka, hy
      static let access_history_device_mobile = Rswift.StringResource(key: "access_history_device_mobile", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Moldava
      ///
      /// Locales: en, ka, hy
      static let moldava = Rswift.StringResource(key: "moldava", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Monaco
      ///
      /// Locales: en, ka, hy
      static let monaco = Rswift.StringResource(key: "monaco", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Mongolia
      ///
      /// Locales: en, ka, hy
      static let mongolia = Rswift.StringResource(key: "mongolia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Montenegro
      ///
      /// Locales: en, ka, hy
      static let montenegro = Rswift.StringResource(key: "montenegro", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Month
      ///
      /// Locales: en, ka, hy
      static let card_month = Rswift.StringResource(key: "card_month", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Montserrat
      ///
      /// Locales: en, ka, hy
      static let montserrat = Rswift.StringResource(key: "montserrat", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Morocco
      ///
      /// Locales: en, ka, hy
      static let morocco = Rswift.StringResource(key: "morocco", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Mozambique
      ///
      /// Locales: en, ka, hy
      static let mozambique = Rswift.StringResource(key: "mozambique", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: My Balance
      ///
      /// Locales: en, ka, hy
      static let balance_title = Rswift.StringResource(key: "balance_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: My Bonuses
      ///
      /// Locales: en, ka, hy
      static let my_bonuses = Rswift.StringResource(key: "my_bonuses", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: My Cards
      ///
      /// Locales: en, ka, hy
      static let my_cards = Rswift.StringResource(key: "my_cards", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Myanmar
      ///
      /// Locales: en, ka, hy
      static let myanmar = Rswift.StringResource(key: "myanmar", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, ka, hy
      static let account_info_name = Rswift.StringResource(key: "account_info_name", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Namibia
      ///
      /// Locales: en, ka, hy
      static let namibia = Rswift.StringResource(key: "namibia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Nauru
      ///
      /// Locales: en, ka, hy
      static let nauru = Rswift.StringResource(key: "nauru", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Nepal
      ///
      /// Locales: en, ka, hy
      static let nepal = Rswift.StringResource(key: "nepal", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Netherlands
      ///
      /// Locales: en, ka, hy
      static let netherlands = Rswift.StringResource(key: "netherlands", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: New Caledonia
      ///
      /// Locales: en, ka, hy
      static let new_caledonia = Rswift.StringResource(key: "new_caledonia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: New Password
      ///
      /// Locales: en, ka, hy
      static let new_password = Rswift.StringResource(key: "new_password", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: New Zealand
      ///
      /// Locales: en, ka, hy
      static let new_zealand = Rswift.StringResource(key: "new_zealand", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Nicaragua
      ///
      /// Locales: en, ka, hy
      static let nicaragua = Rswift.StringResource(key: "nicaragua", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Niger
      ///
      /// Locales: en, ka, hy
      static let niger = Rswift.StringResource(key: "niger", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Nigeria
      ///
      /// Locales: en, ka, hy
      static let nigeria = Rswift.StringResource(key: "nigeria", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Niue
      ///
      /// Locales: en, ka, hy
      static let niue = Rswift.StringResource(key: "niue", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Norfolk Island
      ///
      /// Locales: en, ka, hy
      static let norfolk_island = Rswift.StringResource(key: "norfolk_island", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: North Korea
      ///
      /// Locales: en, ka, hy
      static let north_korea = Rswift.StringResource(key: "north_korea", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Northern Mariana Islands
      ///
      /// Locales: en, ka, hy
      static let northern_mariana_islands = Rswift.StringResource(key: "northern_mariana_islands", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Norway
      ///
      /// Locales: en, ka, hy
      static let norway = Rswift.StringResource(key: "norway", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Not a member?
      ///
      /// Locales: en, ka, hy
      static let not_member = Rswift.StringResource(key: "not_member", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Notifications
      ///
      /// Locales: en, ka, hy
      static let notifications_page_title = Rswift.StringResource(key: "notifications_page_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: November
      ///
      /// Locales: en, ka, hy
      static let november = Rswift.StringResource(key: "november", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Octuber
      ///
      /// Locales: en, ka, hy
      static let october = Rswift.StringResource(key: "october", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Old Password
      ///
      /// Locales: en, ka, hy
      static let old_password = Rswift.StringResource(key: "old_password", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Oman
      ///
      /// Locales: en, ka, hy
      static let oman = Rswift.StringResource(key: "oman", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Online bookmaking is operated by Cosmos LLC, (I/according to the Permit #19-05/284. Legal address: E. Akhvlediani Ascent, N6, Chugureti District, Tbilisi, Georgia. Online games of chance is operated by Aviator LLC (I/N 405076304), according to the Permit #19-06/252. Legal address: E. Akhvlediani Ascent, N6, Chugureti District, Tbilisi, Georgia
      ///
      /// Locales: en, ka, hy
      static let login_legal = Rswift.StringResource(key: "login_legal", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Other
      ///
      /// Locales: en, ka, hy
      static let gender_other = Rswift.StringResource(key: "gender_other", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Other IP Login
      ///
      /// Locales: en, ka, hy
      static let security_levels_other_ip_login = Rswift.StringResource(key: "security_levels_other_ip_login", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: P2P Transfer
      ///
      /// Locales: en, ka, hy
      static let p2p_transfer_p2p_transfer = Rswift.StringResource(key: "p2p_transfer_p2p_transfer", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Pakistan
      ///
      /// Locales: en, ka, hy
      static let pakistan = Rswift.StringResource(key: "pakistan", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Palau
      ///
      /// Locales: en, ka, hy
      static let palau = Rswift.StringResource(key: "palau", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Palestine
      ///
      /// Locales: en, ka, hy
      static let palestine = Rswift.StringResource(key: "palestine", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Panama
      ///
      /// Locales: en, ka, hy
      static let panama = Rswift.StringResource(key: "panama", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Papua New Guinea
      ///
      /// Locales: en, ka, hy
      static let papua_new_guinea = Rswift.StringResource(key: "papua_new_guinea", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Paraguay
      ///
      /// Locales: en, ka, hy
      static let paraguay = Rswift.StringResource(key: "paraguay", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, ka, hy
      static let account_info_password = Rswift.StringResource(key: "account_info_password", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, ka, hy
      static let login_password_input_title = Rswift.StringResource(key: "login_password_input_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Password Change
      ///
      /// Locales: en, ka, hy
      static let security_levels_password_change = Rswift.StringResource(key: "security_levels_password_change", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Password Update
      ///
      /// Locales: en, ka, hy
      static let security_levels_password_update = Rswift.StringResource(key: "security_levels_password_update", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Payment provider
      ///
      /// Locales: en, ka, hy
      static let transactions_details_payment_provider_name = Rswift.StringResource(key: "transactions_details_payment_provider_name", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Personal ID
      ///
      /// Locales: en, ka, hy
      static let account_info_personal_id = Rswift.StringResource(key: "account_info_personal_id", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Personal Info Change
      ///
      /// Locales: en, ka, hy
      static let security_levels_personal_info_change = Rswift.StringResource(key: "security_levels_personal_info_change", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Personal Information
      ///
      /// Locales: en, ka, hy
      static let account_info_personal_info_title = Rswift.StringResource(key: "account_info_personal_info_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Peru
      ///
      /// Locales: en, ka, hy
      static let peru = Rswift.StringResource(key: "peru", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Phillipines
      ///
      /// Locales: en, ka, hy
      static let phillipines = Rswift.StringResource(key: "phillipines", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Phone Number
      ///
      /// Locales: en, ka, hy
      static let account_info_phone_number = Rswift.StringResource(key: "account_info_phone_number", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Phone Number
      ///
      /// Locales: en, ka, hy
      static let new_phone_number = Rswift.StringResource(key: "new_phone_number", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Pitcairn
      ///
      /// Locales: en, ka, hy
      static let pitcairn = Rswift.StringResource(key: "pitcairn", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Please, enter all required fields to make transaction
      ///
      /// Locales: en, ka, hy
      static let deposit_visa_some_field_is_not_specified = Rswift.StringResource(key: "deposit_visa_some_field_is_not_specified", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Please, enter possitive amount
      ///
      /// Locales: en, ka, hy
      static let deposit_visa_negative_amount = Rswift.StringResource(key: "deposit_visa_negative_amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Poker Balance
      ///
      /// Locales: en, ka, hy
      static let poker_balance = Rswift.StringResource(key: "poker_balance", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Poland
      ///
      /// Locales: en, ka, hy
      static let poland = Rswift.StringResource(key: "poland", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Portugal
      ///
      /// Locales: en, ka, hy
      static let portugal = Rswift.StringResource(key: "portugal", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Prefer Not To Say
      ///
      /// Locales: en, ka, hy
      static let gender_prefer_not_to_say = Rswift.StringResource(key: "gender_prefer_not_to_say", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Prexix
      ///
      /// Locales: en, ka, hy
      static let phone_prefix = Rswift.StringResource(key: "phone_prefix", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Private Information
      ///
      /// Locales: en, ka, hy
      static let account_info_private_info_title = Rswift.StringResource(key: "account_info_private_info_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Proceed
      ///
      /// Locales: en, ka, hy
      static let withdraw_proceed_button_title = Rswift.StringResource(key: "withdraw_proceed_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Promotions
      ///
      /// Locales: en, ka, hy
      static let promotions_page_title = Rswift.StringResource(key: "promotions_page_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Puerto Rico
      ///
      /// Locales: en, ka, hy
      static let puerto_rico = Rswift.StringResource(key: "puerto_rico", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Qatar
      ///
      /// Locales: en, ka, hy
      static let qatar = Rswift.StringResource(key: "qatar", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Quick Actions
      ///
      /// Locales: en, ka, hy
      static let quick_actions_header_title = Rswift.StringResource(key: "quick_actions_header_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Recently Played
      ///
      /// Locales: en, ka, hy
      static let recently_played = Rswift.StringResource(key: "recently_played", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Repeat New Password
      ///
      /// Locales: en, ka, hy
      static let repeat_password = Rswift.StringResource(key: "repeat_password", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Resend SMS
      ///
      /// Locales: en, ka, hy
      static let sms_resend = Rswift.StringResource(key: "sms_resend", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Resend in
      ///
      /// Locales: en, ka, hy
      static let sms_resend_title = Rswift.StringResource(key: "sms_resend_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Reunion
      ///
      /// Locales: en, ka, hy
      static let reunion = Rswift.StringResource(key: "reunion", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Romania
      ///
      /// Locales: en, ka, hy
      static let romania = Rswift.StringResource(key: "romania", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Russia
      ///
      /// Locales: en, ka, hy
      static let russia = Rswift.StringResource(key: "russia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Rwanda
      ///
      /// Locales: en, ka, hy
      static let rwanda = Rswift.StringResource(key: "rwanda", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: SELF SUSPEND
      ///
      /// Locales: en, ka, hy
      static let account_info_status_button_title = Rswift.StringResource(key: "account_info_status_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: SMS LOGIN
      ///
      /// Locales: en, ka, hy
      static let sms_login_page_title = Rswift.StringResource(key: "sms_login_page_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: SMS Login
      ///
      /// Locales: en, ka, hy
      static let login_sms_login = Rswift.StringResource(key: "login_sms_login", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: SMS Messages
      ///
      /// Locales: en, ka, hy
      static let account_parameters_messages_sms_title = Rswift.StringResource(key: "account_parameters_messages_sms_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: SMS Messages
      ///
      /// Locales: en, ka, hy
      static let security_levels_scene_title = Rswift.StringResource(key: "security_levels_scene_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Saint Barthelemy
      ///
      /// Locales: en, ka, hy
      static let saint_barthelemy = Rswift.StringResource(key: "saint_barthelemy", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Saint Helena
      ///
      /// Locales: en, ka, hy
      static let saint_helena = Rswift.StringResource(key: "saint_helena", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Saint Kitts And Nevis
      ///
      /// Locales: en, ka, hy
      static let saint_kitts_and_nevis = Rswift.StringResource(key: "saint_kitts_and_nevis", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Saint Lucia
      ///
      /// Locales: en, ka, hy
      static let saint_lucia = Rswift.StringResource(key: "saint_lucia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Saint Martin
      ///
      /// Locales: en, ka, hy
      static let saint_martin = Rswift.StringResource(key: "saint_martin", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Saint Pierre And Miquelon
      ///
      /// Locales: en, ka, hy
      static let saint_pierre_and_miquelon = Rswift.StringResource(key: "saint_pierre_and_miquelon", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Saint Vincent And The Grenadines
      ///
      /// Locales: en, ka, hy
      static let saint_vincent_and_the_grenadines = Rswift.StringResource(key: "saint_vincent_and_the_grenadines", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Samoa
      ///
      /// Locales: en, ka, hy
      static let samoa = Rswift.StringResource(key: "samoa", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: San Marino
      ///
      /// Locales: en, ka, hy
      static let san_marino = Rswift.StringResource(key: "san_marino", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Sao Tome And Principe
      ///
      /// Locales: en, ka, hy
      static let sao_tome_and_principe = Rswift.StringResource(key: "sao_tome_and_principe", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Saudi Arabia
      ///
      /// Locales: en, ka, hy
      static let saudi_arabia = Rswift.StringResource(key: "saudi_arabia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en, ka, hy
      static let account_info_save_button_title = Rswift.StringResource(key: "account_info_save_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Scan Card
      ///
      /// Locales: en, ka, hy
      static let scan_card_title = Rswift.StringResource(key: "scan_card_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Search for games
      ///
      /// Locales: en, ka, hy
      static let home_search_placeholder = Rswift.StringResource(key: "home_search_placeholder", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Seconds
      ///
      /// Locales: en, ka, hy
      static let sms_resend_time = Rswift.StringResource(key: "sms_resend_time", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Security messsages
      ///
      /// Locales: en, ka, hy
      static let account_parameters_messages_header = Rswift.StringResource(key: "account_parameters_messages_header", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Self Suspend
      ///
      /// Locales: en, ka, hy
      static let self_suspend_title = Rswift.StringResource(key: "self_suspend_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Senegal
      ///
      /// Locales: en, ka, hy
      static let senegal = Rswift.StringResource(key: "senegal", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: September
      ///
      /// Locales: en, ka, hy
      static let september = Rswift.StringResource(key: "september", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Serbia
      ///
      /// Locales: en, ka, hy
      static let serbia = Rswift.StringResource(key: "serbia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, ka, hy
      static let settings = Rswift.StringResource(key: "settings", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Seychelles
      ///
      /// Locales: en, ka, hy
      static let seychelles = Rswift.StringResource(key: "seychelles", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Sierraleone
      ///
      /// Locales: en, ka, hy
      static let sierra_leone = Rswift.StringResource(key: "sierra_leone", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Singapore
      ///
      /// Locales: en, ka, hy
      static let singapore = Rswift.StringResource(key: "singapore", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Sint Maarten
      ///
      /// Locales: en, ka, hy
      static let sint_maarten = Rswift.StringResource(key: "sint_maarten", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Slovakia
      ///
      /// Locales: en, ka, hy
      static let slovakia = Rswift.StringResource(key: "slovakia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Slovenia
      ///
      /// Locales: en, ka, hy
      static let slovenia = Rswift.StringResource(key: "slovenia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Solomon Islands
      ///
      /// Locales: en, ka, hy
      static let solomon_islands = Rswift.StringResource(key: "solomon_islands", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Somalia
      ///
      /// Locales: en, ka, hy
      static let somalia = Rswift.StringResource(key: "somalia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: South Africa
      ///
      /// Locales: en, ka, hy
      static let south_africa = Rswift.StringResource(key: "south_africa", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: South Georgia & The South Sandwich Islands
      ///
      /// Locales: en, ka, hy
      static let south_georgia_and_the_south_sandwich_islands = Rswift.StringResource(key: "south_georgia_and_the_south_sandwich_islands", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: South Korea
      ///
      /// Locales: en, ka, hy
      static let south_korea = Rswift.StringResource(key: "south_korea", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: South Sudan
      ///
      /// Locales: en, ka, hy
      static let south_sudan = Rswift.StringResource(key: "south_sudan", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Spain
      ///
      /// Locales: en, ka, hy
      static let spain = Rswift.StringResource(key: "spain", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Sports
      ///
      /// Locales: en, ka, hy
      static let sports_page_title = Rswift.StringResource(key: "sports_page_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Srilanka
      ///
      /// Locales: en, ka, hy
      static let sri_lanka = Rswift.StringResource(key: "sri_lanka", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Standart Packet
      ///
      /// Locales: en, ka, hy
      static let security_levels_standart_packet = Rswift.StringResource(key: "security_levels_standart_packet", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Status
      ///
      /// Locales: en, ka, hy
      static let account_info_status = Rswift.StringResource(key: "account_info_status", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Sudan
      ///
      /// Locales: en, ka, hy
      static let sudan = Rswift.StringResource(key: "sudan", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Suriname
      ///
      /// Locales: en, ka, hy
      static let suriname = Rswift.StringResource(key: "suriname", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Surname
      ///
      /// Locales: en, ka, hy
      static let account_info_surname = Rswift.StringResource(key: "account_info_surname", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Suspend Duration
      ///
      /// Locales: en, ka, hy
      static let suspend_duration = Rswift.StringResource(key: "suspend_duration", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Svalbard & Jan Mayen
      ///
      /// Locales: en, ka, hy
      static let svalbard_and_jan_mayen = Rswift.StringResource(key: "svalbard_and_jan_mayen", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Swaziland
      ///
      /// Locales: en, ka, hy
      static let swaziland = Rswift.StringResource(key: "swaziland", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Sweden
      ///
      /// Locales: en, ka, hy
      static let sweden = Rswift.StringResource(key: "sweden", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Switzerland
      ///
      /// Locales: en, ka, hy
      static let switzerland = Rswift.StringResource(key: "switzerland", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Syria
      ///
      /// Locales: en, ka, hy
      static let syria = Rswift.StringResource(key: "syria", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Taiwan
      ///
      /// Locales: en, ka, hy
      static let taiwan = Rswift.StringResource(key: "taiwan", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Tajikistan
      ///
      /// Locales: en, ka, hy
      static let tajikistan = Rswift.StringResource(key: "tajikistan", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Tanzania
      ///
      /// Locales: en, ka, hy
      static let tanzania = Rswift.StringResource(key: "tanzania", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Thailand
      ///
      /// Locales: en, ka, hy
      static let thailand = Rswift.StringResource(key: "thailand", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Timorleste
      ///
      /// Locales: en, ka, hy
      static let timor_leste = Rswift.StringResource(key: "timor_leste", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Togo
      ///
      /// Locales: en, ka, hy
      static let togo = Rswift.StringResource(key: "togo", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Tokelau
      ///
      /// Locales: en, ka, hy
      static let tokelau = Rswift.StringResource(key: "tokelau", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Tonga
      ///
      /// Locales: en, ka, hy
      static let tonga = Rswift.StringResource(key: "tonga", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Total Balance
      ///
      /// Locales: en, ka, hy
      static let total_balance = Rswift.StringResource(key: "total_balance", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Total amount
      ///
      /// Locales: en, ka, hy
      static let p2p_transfer_total_amount = Rswift.StringResource(key: "p2p_transfer_total_amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Total amount
      ///
      /// Locales: en, ka, hy
      static let transactions_details_total_amount = Rswift.StringResource(key: "transactions_details_total_amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Transaction History
      ///
      /// Locales: en, ka, hy
      static let transaction_history = Rswift.StringResource(key: "transaction_history", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Transaction Successed
      ///
      /// Locales: en, ka, hy
      static let withdraw_transaction_successed = Rswift.StringResource(key: "withdraw_transaction_successed", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Transaction commission
      ///
      /// Locales: en, ka, hy
      static let p2p_transfer_transaction_commission = Rswift.StringResource(key: "p2p_transfer_transaction_commission", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Transaction fee
      ///
      /// Locales: en, ka, hy
      static let transactions_details_fee_amount = Rswift.StringResource(key: "transactions_details_fee_amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Transaction type
      ///
      /// Locales: en, ka, hy
      static let transactions_details_type = Rswift.StringResource(key: "transactions_details_type", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Transfer amount
      ///
      /// Locales: en, ka, hy
      static let p2p_transfer_tranfer_amount = Rswift.StringResource(key: "p2p_transfer_tranfer_amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Transfer to a Friend
      ///
      /// Locales: en, ka, hy
      static let transfer_to_a_friend = Rswift.StringResource(key: "transfer_to_a_friend", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Trinidad And Tobago
      ///
      /// Locales: en, ka, hy
      static let trinidad_and_tobago = Rswift.StringResource(key: "trinidad_and_tobago", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Tunisia
      ///
      /// Locales: en, ka, hy
      static let tunisia = Rswift.StringResource(key: "tunisia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Turkey
      ///
      /// Locales: en, ka, hy
      static let turkey = Rswift.StringResource(key: "turkey", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Turkmenistan
      ///
      /// Locales: en, ka, hy
      static let turkmenistan = Rswift.StringResource(key: "turkmenistan", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Turks And Caicos Islands
      ///
      /// Locales: en, ka, hy
      static let turks_and_caicos_islands = Rswift.StringResource(key: "turks_and_caicos_islands", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Tuvalu
      ///
      /// Locales: en, ka, hy
      static let tuvalu = Rswift.StringResource(key: "tuvalu", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Uganda
      ///
      /// Locales: en, ka, hy
      static let uganda = Rswift.StringResource(key: "uganda", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Ukraine
      ///
      /// Locales: en, ka, hy
      static let ukraine = Rswift.StringResource(key: "ukraine", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: United Arab Emirates
      ///
      /// Locales: en, ka, hy
      static let united_arab_emirates = Rswift.StringResource(key: "united_arab_emirates", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: United Kingdom
      ///
      /// Locales: en, ka, hy
      static let united_kingdom = Rswift.StringResource(key: "united_kingdom", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: United States
      ///
      /// Locales: en, ka, hy
      static let united_states = Rswift.StringResource(key: "united_states", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: United States Minor Outlying Islands
      ///
      /// Locales: en, ka, hy
      static let united_states_minor_outlying_islands = Rswift.StringResource(key: "united_states_minor_outlying_islands", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Update Password
      ///
      /// Locales: en, ka, hy
      static let update_password_button_title = Rswift.StringResource(key: "update_password_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Uruguay
      ///
      /// Locales: en, ka, hy
      static let uruguay = Rswift.StringResource(key: "uruguay", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Usage Date
      ///
      /// Locales: en, ka, hy
      static let card_usage_date_title = Rswift.StringResource(key: "card_usage_date_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: User ID
      ///
      /// Locales: en, ka, hy
      static let account_info_user_id = Rswift.StringResource(key: "account_info_user_id", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Username
      ///
      /// Locales: en, ka, hy
      static let account_info_username = Rswift.StringResource(key: "account_info_username", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Username
      ///
      /// Locales: en, ka, hy
      static let login_username_input_title = Rswift.StringResource(key: "login_username_input_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Uzbekistan
      ///
      /// Locales: en, ka, hy
      static let uzbekistan = Rswift.StringResource(key: "uzbekistan", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Vanuatu
      ///
      /// Locales: en, ka, hy
      static let vanuatu = Rswift.StringResource(key: "vanuatu", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Vatican
      ///
      /// Locales: en, ka, hy
      static let vatican_city = Rswift.StringResource(key: "vatican_city", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Venezuela
      ///
      /// Locales: en, ka, hy
      static let venezuela = Rswift.StringResource(key: "venezuela", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Vietnam
      ///
      /// Locales: en, ka, hy
      static let vietnam = Rswift.StringResource(key: "vietnam", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: View All
      ///
      /// Locales: en, ka, hy
      static let view_all = Rswift.StringResource(key: "view_all", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Virgin Islands, British
      ///
      /// Locales: en, ka, hy
      static let virgin_islands_british = Rswift.StringResource(key: "virgin_islands_british", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Virgin Islands, US
      ///
      /// Locales: en, ka, hy
      static let virgin_islands_us = Rswift.StringResource(key: "virgin_islands_us", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: WITHDRAW
      ///
      /// Locales: en, ka, hy
      static let transactions_details_type_withdraw = Rswift.StringResource(key: "transactions_details_type_withdraw", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Wallis And Futuna
      ///
      /// Locales: en, ka, hy
      static let wallis_and_futuna = Rswift.StringResource(key: "wallis_and_futuna", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Well done!
      ///
      /// Locales: en, ka, hy
      static let sms_well_done = Rswift.StringResource(key: "sms_well_done", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Western Sahara
      ///
      /// Locales: en, ka, hy
      static let western_sahara = Rswift.StringResource(key: "western_sahara", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Withdraw
      ///
      /// Locales: en, ka, hy
      static let security_levels_withdraw = Rswift.StringResource(key: "security_levels_withdraw", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Withdraw
      ///
      /// Locales: en, ka, hy
      static let withdraw_button_title = Rswift.StringResource(key: "withdraw_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Year
      ///
      /// Locales: en, ka, hy
      static let card_year = Rswift.StringResource(key: "card_year", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Yemen
      ///
      /// Locales: en, ka, hy
      static let yemen = Rswift.StringResource(key: "yemen", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: You are transfering to
      ///
      /// Locales: en, ka, hy
      static let p2p_transfer_you_are_transfering_to = Rswift.StringResource(key: "p2p_transfer_you_are_transfering_to", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: You must select at least one type of sms notification, when you choose individual package, or standart packet will be chosen
      ///
      /// Locales: en, ka, hy
      static let security_levels_individual_is_empty = Rswift.StringResource(key: "security_levels_individual_is_empty", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: You'll recieve emails
      ///
      /// Locales: en, ka, hy
      static let account_parameters_messages_email_description = Rswift.StringResource(key: "account_parameters_messages_email_description", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: You'll recieve sms on your phone
      ///
      /// Locales: en, ka, hy
      static let account_parameters_messages_sms_description = Rswift.StringResource(key: "account_parameters_messages_sms_description", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Your Account is Verified
      ///
      /// Locales: en, ka, hy
      static let verified = Rswift.StringResource(key: "verified", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Zambia
      ///
      /// Locales: en, ka, hy
      static let zambia = Rswift.StringResource(key: "zambia", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: Zimbabwe
      ///
      /// Locales: en, ka, hy
      static let zimbabwe = Rswift.StringResource(key: "zimbabwe", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: configure parameters
      ///
      /// Locales: en, ka, hy
      static let account_parameters_messages_email_button = Rswift.StringResource(key: "account_parameters_messages_email_button", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: configure parameters
      ///
      /// Locales: en, ka, hy
      static let account_parameters_messages_sms_button = Rswift.StringResource(key: "account_parameters_messages_sms_button", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: service type can not be specified
      ///
      /// Locales: en, ka, hy
      static let withdraw_service_type_init_error = Rswift.StringResource(key: "withdraw_service_type_init_error", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: some parameters are missing
      ///
      /// Locales: en, ka, hy
      static let withdraw_missing_params_error = Rswift.StringResource(key: "withdraw_missing_params_error", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: აირჩიეთ სასურველი ბარათი
      ///
      /// Locales: en, ka, hy
      static let withdraw_description_card = Rswift.StringResource(key: "withdraw_description_card", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: ანგარიში
      ///
      /// Locales: en, ka, hy
      static let visa_card_title = Rswift.StringResource(key: "visa_card_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: ახალი ელ.ფოსტის მისამართი
      ///
      /// Locales: en, ka, hy
      static let new_mail_title = Rswift.StringResource(key: "new_mail_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: ბალანსი
      ///
      /// Locales: en, ka, hy
      static let deposit_balance_title = Rswift.StringResource(key: "deposit_balance_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: ბარათზე თანხის გასატანად, აუცილებელია ვებგვერდზე ატვირთული გქონდეთ პირადობის მოწმობის ფერადი ფოტო
      ///
      /// Locales: en, ka, hy
      static let withdraw_rule1 = Rswift.StringResource(key: "withdraw_rule1", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: ბარათი
      ///
      /// Locales: en, ka, hy
      static let withdraw_card_title = Rswift.StringResource(key: "withdraw_card_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: ბარათის დასამატებლად გთხოვთ მიუთითო მინიმალური თანხის ოდენობა
      ///
      /// Locales: en, ka, hy
      static let add_card_minimum_amount_title = Rswift.StringResource(key: "add_card_minimum_amount_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: გაგრძელება
      ///
      /// Locales: en, ka, hy
      static let visa_continue_button_title = Rswift.StringResource(key: "visa_continue_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: გადასვლა
      ///
      /// Locales: en, ka, hy
      static let emoney_goto = Rswift.StringResource(key: "emoney_goto", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: გადახდის დასასრულებლად თქვენ გადამისამართდებით პროვაიდერის ვებ-გვერდზე
      ///
      /// Locales: en, ka, hy
      static let emoney_title = Rswift.StringResource(key: "emoney_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: გაიარეთ ავტორიზაცია
      ///
      /// Locales: en, ka, hy
      static let login_sms_login_title = Rswift.StringResource(key: "login_sms_login_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: გაითვალისწინეთ, რომ განაღდების საკომისიო შეადგენს თანხის 1%-ს
      ///
      /// Locales: en, ka, hy
      static let withdraw_rule2 = Rswift.StringResource(key: "withdraw_rule2", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: გამოიყენეთ ერთი ან მეტი (e.g @$&!)
      ///
      /// Locales: en, ka, hy
      static let rule2 = Rswift.StringResource(key: "rule2", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: გამოიყენეთ მთავრული სიმბოლოები
      ///
      /// Locales: en, ka, hy
      static let rule1 = Rswift.StringResource(key: "rule1", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: გატანის ინსტრუქცია
      ///
      /// Locales: en, ka, hy
      static let emoney_instruction_title = Rswift.StringResource(key: "emoney_instruction_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: გატანის ინსტრუქცია
      ///
      /// Locales: en, ka, hy
      static let visa_instruction_title = Rswift.StringResource(key: "visa_instruction_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: გატანის ინსტრუქცია
      ///
      /// Locales: en, ka, hy
      static let withdraw_description_title = Rswift.StringResource(key: "withdraw_description_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: გრაფაში 'თანხა' ჩაწერეთ თვენთვის სასურველი თანხა
      ///
      /// Locales: en, ka, hy
      static let withdraw_description_amount = Rswift.StringResource(key: "withdraw_description_amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: დაადასტურეთ პაროლი უსაფრთხოებისთვის
      ///
      /// Locales: en, ka, hy
      static let approve_password = Rswift.StringResource(key: "approve_password", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: დააჭირეთ ღილაკს 'გაგრძელება' და თანხა გადაირიცხება თქვენს ბარათზე
      ///
      /// Locales: en, ka, hy
      static let withdraw_description_proceed = Rswift.StringResource(key: "withdraw_description_proceed", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: დააჭირეთ ღილაკს გაგრძელება
      ///
      /// Locales: en, ka, hy
      static let visa_description_proceed = Rswift.StringResource(key: "visa_description_proceed", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: დღეს განხორციელებული
      ///
      /// Locales: en, ka, hy
      static let component_date_header_today = Rswift.StringResource(key: "component_date_header_today", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: დღიური
      ///
      /// Locales: en, ka, hy
      static let visa_max_limit = Rswift.StringResource(key: "visa_max_limit", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: ელ.ფოსტის შეცვლა
      ///
      /// Locales: en, ka, hy
      static let change_mail_button_title = Rswift.StringResource(key: "change_mail_button_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: ერთჯერადი
      ///
      /// Locales: en, ka, hy
      static let visa_daily_limit = Rswift.StringResource(key: "visa_daily_limit", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: თანახმა ვარ, შემდგომი გადახდებისთვის მოხდეს ბარათის მონაცემების დამახსოვრება
      ///
      /// Locales: en, ka, hy
      static let add_card_terms = Rswift.StringResource(key: "add_card_terms", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: თანხა
      ///
      /// Locales: en, ka, hy
      static let visa_amount_title = Rswift.StringResource(key: "visa_amount_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: თანხა
      ///
      /// Locales: en, ka, hy
      static let withdraw_amount_title = Rswift.StringResource(key: "withdraw_amount_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: თანხის შევსება
      ///
      /// Locales: en, ka, hy
      static let deposit_title = Rswift.StringResource(key: "deposit_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: თუ გსურთ ანგარიშის ბლოკირებული ვადის გახანგრძლივება დაგვიკავშირდით ცხელ ხაზზე
      ///
      /// Locales: en, ka, hy
      static let suspend_subtitle = Rswift.StringResource(key: "suspend_subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: ლიმიტი ერთ ბარათზე
      ///
      /// Locales: en, ka, hy
      static let visa_description_title = Rswift.StringResource(key: "visa_description_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: მინიმალური
      ///
      /// Locales: en, ka, hy
      static let visa_min_limit = Rswift.StringResource(key: "visa_min_limit", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: მინიმუმ 6 და მაქსიმუმ 30 სიმბოლო
      ///
      /// Locales: en, ka, hy
      static let rule3 = Rswift.StringResource(key: "rule3", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: მონიშნე სასურველი დამახსოვრებული ბარათი
      ///
      /// Locales: en, ka, hy
      static let visa_description_card = Rswift.StringResource(key: "visa_description_card", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: საათის წინ
      ///
      /// Locales: en, ka, hy
      static let notifications_hours_ago = Rswift.StringResource(key: "notifications_hours_ago", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: ტრანზაქციის საკომისიო
      ///
      /// Locales: en, ka, hy
      static let withdraw_commission_title = Rswift.StringResource(key: "withdraw_commission_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: შეიყვანე სასურველი თანხა
      ///
      /// Locales: en, ka, hy
      static let visa_description_amount = Rswift.StringResource(key: "visa_description_amount", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: შეიყვანეთ eMoney-ს ვებ გვერდზე შესასვლელი პაროლი
      ///
      /// Locales: en, ka, hy
      static let emoney_rule2 = Rswift.StringResource(key: "emoney_rule2", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: შეიყვანეთ eMoney-ს მომხმარებლის სახელი
      ///
      /// Locales: en, ka, hy
      static let emoney_rule1 = Rswift.StringResource(key: "emoney_rule1", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: შეიყვანეთ მითითებული უსაფრთხოების კოდი და დააჭირეთ 'გადახდას'
      ///
      /// Locales: en, ka, hy
      static let emoney_rule3 = Rswift.StringResource(key: "emoney_rule3", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: წუთის წინ
      ///
      /// Locales: en, ka, hy
      static let notifications_minutes_ago = Rswift.StringResource(key: "notifications_minutes_ago", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)
      /// en translation: ჯამური თანხა
      ///
      /// Locales: en, ka, hy
      static let withdraw_total_amount_title = Rswift.StringResource(key: "withdraw_total_amount_title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en", "ka", "hy"], comment: nil)

      /// en translation: ADD CARD
      ///
      /// Locales: en, ka, hy
      static func card_add_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card_add_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "card_add_button_title"
        }

        return NSLocalizedString("card_add_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Account Block
      ///
      /// Locales: en, ka, hy
      static func security_levels_account_block(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("security_levels_account_block", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "security_levels_account_block"
        }

        return NSLocalizedString("security_levels_account_block", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Account Information
      ///
      /// Locales: en, ka, hy
      static func account_information(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_information", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_information"
        }

        return NSLocalizedString("account_information", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Account Information
      ///
      /// Locales: en, ka, hy
      static func account_information_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_information_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_information_title"
        }

        return NSLocalizedString("account_information_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Account Parameters
      ///
      /// Locales: en, ka, hy
      static func account_parameters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_parameters", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_parameters"
        }

        return NSLocalizedString("account_parameters", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Account Parameters
      ///
      /// Locales: en, ka, hy
      static func profile_page_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_page_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "profile_page_title"
        }

        return NSLocalizedString("profile_page_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Activate
      ///
      /// Locales: en, ka, hy
      static func high_security_button_on(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("high_security_button_on", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "high_security_button_on"
        }

        return NSLocalizedString("high_security_button_on", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Activate Biometry
      ///
      /// Locales: en, ka, hy
      static func biometric_settings_activate_biometry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biometric_settings_activate_biometry", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "biometric_settings_activate_biometry"
        }

        return NSLocalizedString("biometric_settings_activate_biometry", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Activate Face ID
      ///
      /// Locales: en, ka, hy
      static func biometric_settings_activate_face_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biometric_settings_activate_face_id", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "biometric_settings_activate_face_id"
        }

        return NSLocalizedString("biometric_settings_activate_face_id", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Activate Touch ID
      ///
      /// Locales: en, ka, hy
      static func biometric_settings_activate_touch_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biometric_settings_activate_touch_id", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "biometric_settings_activate_touch_id"
        }

        return NSLocalizedString("biometric_settings_activate_touch_id", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Active Till
      ///
      /// Locales: en, ka, hy
      static func active_till(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("active_till", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "active_till"
        }

        return NSLocalizedString("active_till", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Add Card
      ///
      /// Locales: en, ka, hy
      static func add_card_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_card_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "add_card_title"
        }

        return NSLocalizedString("add_card_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Add card
      ///
      /// Locales: en, ka, hy
      static func my_cards_add_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("my_cards_add_card", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "my_cards_add_card"
        }

        return NSLocalizedString("my_cards_add_card", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: en, ka, hy
      static func account_info_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_address", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_address"
        }

        return NSLocalizedString("account_info_address", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Afghanistan
      ///
      /// Locales: en, ka, hy
      static func afghanistan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("afghanistan", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "afghanistan"
        }

        return NSLocalizedString("afghanistan", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Aland Islands
      ///
      /// Locales: en, ka, hy
      static func aland_islands(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aland_islands", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "aland_islands"
        }

        return NSLocalizedString("aland_islands", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Albania
      ///
      /// Locales: en, ka, hy
      static func albania(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("albania", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "albania"
        }

        return NSLocalizedString("albania", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Algeria
      ///
      /// Locales: en, ka, hy
      static func algeria(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("algeria", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "algeria"
        }

        return NSLocalizedString("algeria", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: American Samoa
      ///
      /// Locales: en, ka, hy
      static func american_samoa(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("american_samoa", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "american_samoa"
        }

        return NSLocalizedString("american_samoa", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Amount
      ///
      /// Locales: en, ka, hy
      static func deposit_visa_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deposit_visa_amount", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "deposit_visa_amount"
        }

        return NSLocalizedString("deposit_visa_amount", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Amount specified in wrong format
      ///
      /// Locales: en, ka, hy
      static func deposit_visa_wrong_format_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deposit_visa_wrong_format_amount", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "deposit_visa_wrong_format_amount"
        }

        return NSLocalizedString("deposit_visa_wrong_format_amount", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Andorra
      ///
      /// Locales: en, ka, hy
      static func andorra(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("andorra", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "andorra"
        }

        return NSLocalizedString("andorra", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Angola
      ///
      /// Locales: en, ka, hy
      static func angola(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("angola", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "angola"
        }

        return NSLocalizedString("angola", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Anguilla
      ///
      /// Locales: en, ka, hy
      static func anguilla(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("anguilla", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "anguilla"
        }

        return NSLocalizedString("anguilla", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Antarctica
      ///
      /// Locales: en, ka, hy
      static func antarctica(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("antarctica", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "antarctica"
        }

        return NSLocalizedString("antarctica", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Antigua And Barbuda
      ///
      /// Locales: en, ka, hy
      static func antigua_and_barbuda(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("antigua_and_barbuda", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "antigua_and_barbuda"
        }

        return NSLocalizedString("antigua_and_barbuda", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Approve
      ///
      /// Locales: en, ka, hy
      static func approve_address_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("approve_address_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "approve_address_button_title"
        }

        return NSLocalizedString("approve_address_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Approve
      ///
      /// Locales: en, ka, hy
      static func approve_number_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("approve_number_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "approve_number_button_title"
        }

        return NSLocalizedString("approve_number_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: April
      ///
      /// Locales: en, ka, hy
      static func april(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("april", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "april"
        }

        return NSLocalizedString("april", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Argentina
      ///
      /// Locales: en, ka, hy
      static func argentina(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("argentina", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "argentina"
        }

        return NSLocalizedString("argentina", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Armenia
      ///
      /// Locales: en, ka, hy
      static func armenia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("armenia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "armenia"
        }

        return NSLocalizedString("armenia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Aruba
      ///
      /// Locales: en, ka, hy
      static func aruba(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aruba", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "aruba"
        }

        return NSLocalizedString("aruba", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: August
      ///
      /// Locales: en, ka, hy
      static func august(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("august", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "august"
        }

        return NSLocalizedString("august", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Australia
      ///
      /// Locales: en, ka, hy
      static func australia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("australia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "australia"
        }

        return NSLocalizedString("australia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Austria
      ///
      /// Locales: en, ka, hy
      static func austria(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("austria", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "austria"
        }

        return NSLocalizedString("austria", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Azerbaijan
      ///
      /// Locales: en, ka, hy
      static func azerbaijan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("azerbaijan", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "azerbaijan"
        }

        return NSLocalizedString("azerbaijan", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Bahamas
      ///
      /// Locales: en, ka, hy
      static func bahamas(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bahamas", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "bahamas"
        }

        return NSLocalizedString("bahamas", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Bahrain
      ///
      /// Locales: en, ka, hy
      static func bahrain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bahrain", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "bahrain"
        }

        return NSLocalizedString("bahrain", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Bangladesh
      ///
      /// Locales: en, ka, hy
      static func bangladesh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bangladesh", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "bangladesh"
        }

        return NSLocalizedString("bangladesh", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Barbados
      ///
      /// Locales: en, ka, hy
      static func barbados(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("barbados", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "barbados"
        }

        return NSLocalizedString("barbados", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Belarus
      ///
      /// Locales: en, ka, hy
      static func belarus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("belarus", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "belarus"
        }

        return NSLocalizedString("belarus", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Belgium
      ///
      /// Locales: en, ka, hy
      static func belgium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("belgium", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "belgium"
        }

        return NSLocalizedString("belgium", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Belize
      ///
      /// Locales: en, ka, hy
      static func belize(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("belize", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "belize"
        }

        return NSLocalizedString("belize", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Benin
      ///
      /// Locales: en, ka, hy
      static func benin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("benin", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "benin"
        }

        return NSLocalizedString("benin", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Bermuda
      ///
      /// Locales: en, ka, hy
      static func bermuda(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bermuda", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "bermuda"
        }

        return NSLocalizedString("bermuda", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Bhutan
      ///
      /// Locales: en, ka, hy
      static func bhutan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bhutan", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "bhutan"
        }

        return NSLocalizedString("bhutan", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Biometry Authentication Parameters
      ///
      /// Locales: en, ka, hy
      static func biomatry_authentication_parameters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biomatry_authentication_parameters", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "biomatry_authentication_parameters"
        }

        return NSLocalizedString("biomatry_authentication_parameters", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Biometry is not available
      ///
      /// Locales: en, ka, hy
      static func biometric_settings_not_available(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biometric_settings_not_available", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "biometric_settings_not_available"
        }

        return NSLocalizedString("biometric_settings_not_available", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Birth Date
      ///
      /// Locales: en, ka, hy
      static func account_info_birth_date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_birth_date", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_birth_date"
        }

        return NSLocalizedString("account_info_birth_date", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Block Account
      ///
      /// Locales: en, ka, hy
      static func block_accound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("block_accound", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "block_accound"
        }

        return NSLocalizedString("block_accound", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Block account
      ///
      /// Locales: en, ka, hy
      static func account_parameters_self_block(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_parameters_self_block", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_parameters_self_block"
        }

        return NSLocalizedString("account_parameters_self_block", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Bolivia
      ///
      /// Locales: en, ka, hy
      static func bolivia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bolivia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "bolivia"
        }

        return NSLocalizedString("bolivia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Bonaire Sint Eustatius And Saba
      ///
      /// Locales: en, ka, hy
      static func bonaire_sint_eustatius_and_saba(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bonaire_sint_eustatius_and_saba", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "bonaire_sint_eustatius_and_saba"
        }

        return NSLocalizedString("bonaire_sint_eustatius_and_saba", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Bosnia And Herzegovina
      ///
      /// Locales: en, ka, hy
      static func bosnia_and_herzegovina(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bosnia_and_herzegovina", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "bosnia_and_herzegovina"
        }

        return NSLocalizedString("bosnia_and_herzegovina", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Botswana
      ///
      /// Locales: en, ka, hy
      static func botswana(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("botswana", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "botswana"
        }

        return NSLocalizedString("botswana", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Bouvet Island
      ///
      /// Locales: en, ka, hy
      static func bouvet_island(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bouvet_island", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "bouvet_island"
        }

        return NSLocalizedString("bouvet_island", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Brazil
      ///
      /// Locales: en, ka, hy
      static func brazil(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("brazil", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "brazil"
        }

        return NSLocalizedString("brazil", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: British Indian Ocean Territory
      ///
      /// Locales: en, ka, hy
      static func british_indian_ocean_territory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("british_indian_ocean_territory", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "british_indian_ocean_territory"
        }

        return NSLocalizedString("british_indian_ocean_territory", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Brunei
      ///
      /// Locales: en, ka, hy
      static func brunei(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("brunei", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "brunei"
        }

        return NSLocalizedString("brunei", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Bulgaria
      ///
      /// Locales: en, ka, hy
      static func bulgaria(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bulgaria", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "bulgaria"
        }

        return NSLocalizedString("bulgaria", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Burkina Faso
      ///
      /// Locales: en, ka, hy
      static func burkina_faso(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("burkina_faso", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "burkina_faso"
        }

        return NSLocalizedString("burkina_faso", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Burundi
      ///
      /// Locales: en, ka, hy
      static func burundi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("burundi", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "burundi"
        }

        return NSLocalizedString("burundi", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: CVV
      ///
      /// Locales: en, ka, hy
      static func card_cvv(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card_cvv", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "card_cvv"
        }

        return NSLocalizedString("card_cvv", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Cambodia
      ///
      /// Locales: en, ka, hy
      static func cambodia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cambodia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "cambodia"
        }

        return NSLocalizedString("cambodia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Cameroon
      ///
      /// Locales: en, ka, hy
      static func cameroon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cameroon", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "cameroon"
        }

        return NSLocalizedString("cameroon", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Canada
      ///
      /// Locales: en, ka, hy
      static func canada(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("canada", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "canada"
        }

        return NSLocalizedString("canada", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, ka, hy
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Cape Verde
      ///
      /// Locales: en, ka, hy
      static func cape_verde(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cape_verde", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "cape_verde"
        }

        return NSLocalizedString("cape_verde", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Card Number
      ///
      /// Locales: en, ka, hy
      static func card_number_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card_number_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "card_number_title"
        }

        return NSLocalizedString("card_number_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Cayman Islands
      ///
      /// Locales: en, ka, hy
      static func cayman_islands(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cayman_islands", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "cayman_islands"
        }

        return NSLocalizedString("cayman_islands", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Central African Republic
      ///
      /// Locales: en, ka, hy
      static func central_african_republic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("central_african_republic", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "central_african_republic"
        }

        return NSLocalizedString("central_african_republic", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Chad
      ///
      /// Locales: en, ka, hy
      static func chad(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("chad", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "chad"
        }

        return NSLocalizedString("chad", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Change Address
      ///
      /// Locales: en, ka, hy
      static func address_change_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("address_change_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "address_change_title"
        }

        return NSLocalizedString("address_change_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Change E-Mail
      ///
      /// Locales: en, ka, hy
      static func mail_change_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mail_change_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "mail_change_title"
        }

        return NSLocalizedString("mail_change_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: en, ka, hy
      static func password_change_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password_change_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "password_change_title"
        }

        return NSLocalizedString("password_change_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Change Phone Number
      ///
      /// Locales: en, ka, hy
      static func phone_number_change_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phone_number_change_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "phone_number_change_title"
        }

        return NSLocalizedString("phone_number_change_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Change password
      ///
      /// Locales: en, ka, hy
      static func account_parameters_change_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_parameters_change_password", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_parameters_change_password"
        }

        return NSLocalizedString("account_parameters_change_password", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Chile
      ///
      /// Locales: en, ka, hy
      static func chile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("chile", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "chile"
        }

        return NSLocalizedString("chile", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: China
      ///
      /// Locales: en, ka, hy
      static func china(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("china", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "china"
        }

        return NSLocalizedString("china", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Choose Account
      ///
      /// Locales: en, ka, hy
      static func deposit_visa_choose_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deposit_visa_choose_account", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "deposit_visa_choose_account"
        }

        return NSLocalizedString("deposit_visa_choose_account", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Christmas Island
      ///
      /// Locales: en, ka, hy
      static func christmas_island(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("christmas_island", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "christmas_island"
        }

        return NSLocalizedString("christmas_island", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Cocos Islands
      ///
      /// Locales: en, ka, hy
      static func cocos_islands(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cocos_islands", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "cocos_islands"
        }

        return NSLocalizedString("cocos_islands", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Code is sent to yout number
      ///
      /// Locales: en, ka, hy
      static func sms_confirmation_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sms_confirmation_description", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sms_confirmation_description"
        }

        return NSLocalizedString("sms_confirmation_description", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Colombia
      ///
      /// Locales: en, ka, hy
      static func colombia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("colombia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "colombia"
        }

        return NSLocalizedString("colombia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Comoros
      ///
      /// Locales: en, ka, hy
      static func comoros(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("comoros", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "comoros"
        }

        return NSLocalizedString("comoros", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, ka, hy
      static func p2p_transfer_confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p2p_transfer_confirm", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "p2p_transfer_confirm"
        }

        return NSLocalizedString("p2p_transfer_confirm", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Congo
      ///
      /// Locales: en, ka, hy
      static func congo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("congo", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "congo"
        }

        return NSLocalizedString("congo", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Contact Information
      ///
      /// Locales: en, ka, hy
      static func account_info_contact_info_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_contact_info_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_contact_info_title"
        }

        return NSLocalizedString("account_info_contact_info_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Contact us
      ///
      /// Locales: en, ka, hy
      static func contact_us_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("contact_us_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "contact_us_button_title"
        }

        return NSLocalizedString("contact_us_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Contacts Change
      ///
      /// Locales: en, ka, hy
      static func security_levels_contacts_change(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("security_levels_contacts_change", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "security_levels_contacts_change"
        }

        return NSLocalizedString("security_levels_contacts_change", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: en, ka, hy
      static func add_card_continue_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_card_continue_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "add_card_continue_button_title"
        }

        return NSLocalizedString("add_card_continue_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Cook Islands
      ///
      /// Locales: en, ka, hy
      static func cook_islands(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cook_islands", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "cook_islands"
        }

        return NSLocalizedString("cook_islands", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Costa Rica
      ///
      /// Locales: en, ka, hy
      static func costa_rica(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("costa_rica", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "costa_rica"
        }

        return NSLocalizedString("costa_rica", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Country
      ///
      /// Locales: en, ka, hy
      static func account_info_country(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_country", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_country"
        }

        return NSLocalizedString("account_info_country", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Croatia
      ///
      /// Locales: en, ka, hy
      static func croatia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("croatia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "croatia"
        }

        return NSLocalizedString("croatia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Cuba
      ///
      /// Locales: en, ka, hy
      static func cuba(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cuba", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "cuba"
        }

        return NSLocalizedString("cuba", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Curacao
      ///
      /// Locales: en, ka, hy
      static func curacao(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("curacao", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "curacao"
        }

        return NSLocalizedString("curacao", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Cyprus
      ///
      /// Locales: en, ka, hy
      static func cyprus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cyprus", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "cyprus"
        }

        return NSLocalizedString("cyprus", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Czech Republic
      ///
      /// Locales: en, ka, hy
      static func czech_republic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("czech_republic", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "czech_republic"
        }

        return NSLocalizedString("czech_republic", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: DEPOSIT
      ///
      /// Locales: en, ka, hy
      static func transactions_details_type_deposit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactions_details_type_deposit", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "transactions_details_type_deposit"
        }

        return NSLocalizedString("transactions_details_type_deposit", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Date
      ///
      /// Locales: en, ka, hy
      static func transactions_details_date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactions_details_date", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "transactions_details_date"
        }

        return NSLocalizedString("transactions_details_date", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Deactivate
      ///
      /// Locales: en, ka, hy
      static func high_security_button_off(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("high_security_button_off", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "high_security_button_off"
        }

        return NSLocalizedString("high_security_button_off", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: December
      ///
      /// Locales: en, ka, hy
      static func december(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("december", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "december"
        }

        return NSLocalizedString("december", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en, ka, hy
      static func delete_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "delete_button_title"
        }

        return NSLocalizedString("delete_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en, ka, hy
      static func notifications_page_delete_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notifications_page_delete_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "notifications_page_delete_title"
        }

        return NSLocalizedString("notifications_page_delete_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Democratic Republic Of The Congo
      ///
      /// Locales: en, ka, hy
      static func democratic_republic_of_the_congo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("democratic_republic_of_the_congo", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "democratic_republic_of_the_congo"
        }

        return NSLocalizedString("democratic_republic_of_the_congo", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Denmark
      ///
      /// Locales: en, ka, hy
      static func denmark(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("denmark", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "denmark"
        }

        return NSLocalizedString("denmark", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Deposit
      ///
      /// Locales: en, ka, hy
      static func deposit_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deposit_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "deposit_button_title"
        }

        return NSLocalizedString("deposit_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Deposit
      ///
      /// Locales: en, ka, hy
      static func security_levels_deposit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("security_levels_deposit", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "security_levels_deposit"
        }

        return NSLocalizedString("security_levels_deposit", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Desktop
      ///
      /// Locales: en, ka, hy
      static func access_history_device_desktop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("access_history_device_desktop", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "access_history_device_desktop"
        }

        return NSLocalizedString("access_history_device_desktop", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Did not receive message?
      ///
      /// Locales: en, ka, hy
      static func sms_did_not_receive_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sms_did_not_receive_message", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sms_did_not_receive_message"
        }

        return NSLocalizedString("sms_did_not_receive_message", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Djibouti
      ///
      /// Locales: en, ka, hy
      static func djibouti(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("djibouti", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "djibouti"
        }

        return NSLocalizedString("djibouti", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Do you want to activate an individual package?
      ///
      /// Locales: en, ka, hy
      static func security_levels_switched_to_individual(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("security_levels_switched_to_individual", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "security_levels_switched_to_individual"
        }

        return NSLocalizedString("security_levels_switched_to_individual", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Dominica
      ///
      /// Locales: en, ka, hy
      static func dominica(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dominica", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "dominica"
        }

        return NSLocalizedString("dominica", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Dominican Republic
      ///
      /// Locales: en, ka, hy
      static func dominican_republic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dominican_republic", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "dominican_republic"
        }

        return NSLocalizedString("dominican_republic", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, ka, hy
      static func cashflow_done_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cashflow_done_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "cashflow_done_button_title"
        }

        return NSLocalizedString("cashflow_done_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Ecuador
      ///
      /// Locales: en, ka, hy
      static func ecuador(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ecuador", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "ecuador"
        }

        return NSLocalizedString("ecuador", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Egypt
      ///
      /// Locales: en, ka, hy
      static func egypt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("egypt", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "egypt"
        }

        return NSLocalizedString("egypt", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: El Salvador
      ///
      /// Locales: en, ka, hy
      static func el_salvador(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("el_salvador", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "el_salvador"
        }

        return NSLocalizedString("el_salvador", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Emails
      ///
      /// Locales: en, ka, hy
      static func account_parameters_messages_email_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_parameters_messages_email_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_parameters_messages_email_title"
        }

        return NSLocalizedString("account_parameters_messages_email_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Enter New Address
      ///
      /// Locales: en, ka, hy
      static func new_address_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_address_placeholder", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "new_address_placeholder"
        }

        return NSLocalizedString("new_address_placeholder", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Enter New Address
      ///
      /// Locales: en, ka, hy
      static func new_address_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_address_subtitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "new_address_subtitle"
        }

        return NSLocalizedString("new_address_subtitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Enter New Phone Number
      ///
      /// Locales: en, ka, hy
      static func phone_number_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phone_number_subtitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "phone_number_subtitle"
        }

        return NSLocalizedString("phone_number_subtitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Enter Number
      ///
      /// Locales: en, ka, hy
      static func enter_card_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_card_number", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "enter_card_number"
        }

        return NSLocalizedString("enter_card_number", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Equatorial Guinea
      ///
      /// Locales: en, ka, hy
      static func equatorial_guinea(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("equatorial_guinea", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "equatorial_guinea"
        }

        return NSLocalizedString("equatorial_guinea", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Eritrea
      ///
      /// Locales: en, ka, hy
      static func eritrea(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eritrea", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "eritrea"
        }

        return NSLocalizedString("eritrea", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Estonia
      ///
      /// Locales: en, ka, hy
      static func estonia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("estonia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "estonia"
        }

        return NSLocalizedString("estonia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Ethiopia
      ///
      /// Locales: en, ka, hy
      static func ethiopia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ethiopia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "ethiopia"
        }

        return NSLocalizedString("ethiopia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Falkland Islands
      ///
      /// Locales: en, ka, hy
      static func falkland_islands(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("falkland_islands", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "falkland_islands"
        }

        return NSLocalizedString("falkland_islands", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Faroe Islands
      ///
      /// Locales: en, ka, hy
      static func faroe_islands(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("faroe_islands", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "faroe_islands"
        }

        return NSLocalizedString("faroe_islands", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: February
      ///
      /// Locales: en, ka, hy
      static func february(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("february", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "february"
        }

        return NSLocalizedString("february", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Female
      ///
      /// Locales: en, ka, hy
      static func gender_female(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gender_female", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "gender_female"
        }

        return NSLocalizedString("gender_female", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Fiji
      ///
      /// Locales: en, ka, hy
      static func fiji(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fiji", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "fiji"
        }

        return NSLocalizedString("fiji", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Filter
      ///
      /// Locales: en, ka, hy
      static func transactions_filter_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactions_filter_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "transactions_filter_title"
        }

        return NSLocalizedString("transactions_filter_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Finland
      ///
      /// Locales: en, ka, hy
      static func finland(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finland", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "finland"
        }

        return NSLocalizedString("finland", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Forgot Password?
      ///
      /// Locales: en, ka, hy
      static func login_forgot_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_forgot_password", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_forgot_password"
        }

        return NSLocalizedString("login_forgot_password", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Forgot Username?
      ///
      /// Locales: en, ka, hy
      static func login_forgot_username(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_forgot_username", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_forgot_username"
        }

        return NSLocalizedString("login_forgot_username", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: France
      ///
      /// Locales: en, ka, hy
      static func france(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("france", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "france"
        }

        return NSLocalizedString("france", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: French Guiana
      ///
      /// Locales: en, ka, hy
      static func french_guiana(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("french_guiana", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "french_guiana"
        }

        return NSLocalizedString("french_guiana", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: French Polynesia
      ///
      /// Locales: en, ka, hy
      static func french_polynesia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("french_polynesia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "french_polynesia"
        }

        return NSLocalizedString("french_polynesia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Friend ID
      ///
      /// Locales: en, ka, hy
      static func p2p_transfer_friend_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p2p_transfer_friend_id", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "p2p_transfer_friend_id"
        }

        return NSLocalizedString("p2p_transfer_friend_id", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Gabon
      ///
      /// Locales: en, ka, hy
      static func gabon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gabon", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "gabon"
        }

        return NSLocalizedString("gabon", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Gambia
      ///
      /// Locales: en, ka, hy
      static func gambia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gambia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "gambia"
        }

        return NSLocalizedString("gambia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Games
      ///
      /// Locales: en, ka, hy
      static func home_page_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home_page_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "home_page_title"
        }

        return NSLocalizedString("home_page_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Gender
      ///
      /// Locales: en, ka, hy
      static func account_info_gender(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_gender", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_gender"
        }

        return NSLocalizedString("account_info_gender", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Georgia
      ///
      /// Locales: en, ka, hy
      static func georgia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("georgia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "georgia"
        }

        return NSLocalizedString("georgia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Germany
      ///
      /// Locales: en, ka, hy
      static func germany(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("germany", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "germany"
        }

        return NSLocalizedString("germany", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Ghana
      ///
      /// Locales: en, ka, hy
      static func ghana(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ghana", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "ghana"
        }

        return NSLocalizedString("ghana", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Gibraltar
      ///
      /// Locales: en, ka, hy
      static func gibraltar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gibraltar", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "gibraltar"
        }

        return NSLocalizedString("gibraltar", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Greece
      ///
      /// Locales: en, ka, hy
      static func greece(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("greece", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "greece"
        }

        return NSLocalizedString("greece", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Greenland
      ///
      /// Locales: en, ka, hy
      static func greenland(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("greenland", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "greenland"
        }

        return NSLocalizedString("greenland", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Grenada
      ///
      /// Locales: en, ka, hy
      static func grenada(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("grenada", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "grenada"
        }

        return NSLocalizedString("grenada", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Guadaloupe
      ///
      /// Locales: en, ka, hy
      static func guadaloupe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guadaloupe", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "guadaloupe"
        }

        return NSLocalizedString("guadaloupe", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Guam
      ///
      /// Locales: en, ka, hy
      static func guam(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guam", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "guam"
        }

        return NSLocalizedString("guam", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Guatemala
      ///
      /// Locales: en, ka, hy
      static func guatemala(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guatemala", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "guatemala"
        }

        return NSLocalizedString("guatemala", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Guernsey
      ///
      /// Locales: en, ka, hy
      static func guernsey(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guernsey", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "guernsey"
        }

        return NSLocalizedString("guernsey", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Guinea
      ///
      /// Locales: en, ka, hy
      static func guinea(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guinea", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "guinea"
        }

        return NSLocalizedString("guinea", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Guinea Bissau
      ///
      /// Locales: en, ka, hy
      static func guinea_bissau(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guinea_bissau", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "guinea_bissau"
        }

        return NSLocalizedString("guinea_bissau", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Guyana
      ///
      /// Locales: en, ka, hy
      static func guyana(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guyana", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "guyana"
        }

        return NSLocalizedString("guyana", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Haiti
      ///
      /// Locales: en, ka, hy
      static func haiti(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("haiti", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "haiti"
        }

        return NSLocalizedString("haiti", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Heard & McDonald Islands
      ///
      /// Locales: en, ka, hy
      static func heard_island_and_mc_donald_islands(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("heard_island_and_mc_donald_islands", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "heard_island_and_mc_donald_islands"
        }

        return NSLocalizedString("heard_island_and_mc_donald_islands", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: High Security Activation / Deactivation
      ///
      /// Locales: en, ka, hy
      static func security_levels_high_security_activation_deactivation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("security_levels_high_security_activation_deactivation", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "security_levels_high_security_activation_deactivation"
        }

        return NSLocalizedString("security_levels_high_security_activation_deactivation", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: High Security Parameters
      ///
      /// Locales: en, ka, hy
      static func security_levels_high_security_parameters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("security_levels_high_security_parameters", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "security_levels_high_security_parameters"
        }

        return NSLocalizedString("security_levels_high_security_parameters", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: High Secutiry On
      ///
      /// Locales: en, ka, hy
      static func high_security_page_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("high_security_page_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "high_security_page_title"
        }

        return NSLocalizedString("high_security_page_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: High security mode
      ///
      /// Locales: en, ka, hy
      static func account_parameters_high_security(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_parameters_high_security", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_parameters_high_security"
        }

        return NSLocalizedString("account_parameters_high_security", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Home Page
      ///
      /// Locales: en, ka, hy
      static func profile_page_back_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_page_back_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "profile_page_back_title"
        }

        return NSLocalizedString("profile_page_back_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Honduras
      ///
      /// Locales: en, ka, hy
      static func honduras(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("honduras", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "honduras"
        }

        return NSLocalizedString("honduras", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Hong Kong
      ///
      /// Locales: en, ka, hy
      static func hong_kong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hong_kong", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "hong_kong"
        }

        return NSLocalizedString("hong_kong", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Hungary
      ///
      /// Locales: en, ka, hy
      static func hungary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hungary", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "hungary"
        }

        return NSLocalizedString("hungary", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: ID Document Change
      ///
      /// Locales: en, ka, hy
      static func security_levels_id_document_change(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("security_levels_id_document_change", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "security_levels_id_document_change"
        }

        return NSLocalizedString("security_levels_id_document_change", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Iceland
      ///
      /// Locales: en, ka, hy
      static func iceland(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iceland", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "iceland"
        }

        return NSLocalizedString("iceland", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Incognito Card
      ///
      /// Locales: en, ka, hy
      static func incognito_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("incognito_card", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "incognito_card"
        }

        return NSLocalizedString("incognito_card", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: India
      ///
      /// Locales: en, ka, hy
      static func india(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("india", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "india"
        }

        return NSLocalizedString("india", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Individual
      ///
      /// Locales: en, ka, hy
      static func security_levels_individual(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("security_levels_individual", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "security_levels_individual"
        }

        return NSLocalizedString("security_levels_individual", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Indonesia
      ///
      /// Locales: en, ka, hy
      static func indonesia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("indonesia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "indonesia"
        }

        return NSLocalizedString("indonesia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Iran
      ///
      /// Locales: en, ka, hy
      static func iran(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iran", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "iran"
        }

        return NSLocalizedString("iran", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Iraq
      ///
      /// Locales: en, ka, hy
      static func iraq(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iraq", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "iraq"
        }

        return NSLocalizedString("iraq", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Ireland
      ///
      /// Locales: en, ka, hy
      static func ireland(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ireland", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "ireland"
        }

        return NSLocalizedString("ireland", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Isle Of Man
      ///
      /// Locales: en, ka, hy
      static func isle_of_man(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("isle_of_man", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "isle_of_man"
        }

        return NSLocalizedString("isle_of_man", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Israel
      ///
      /// Locales: en, ka, hy
      static func israel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("israel", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "israel"
        }

        return NSLocalizedString("israel", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Italy
      ///
      /// Locales: en, ka, hy
      static func italy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("italy", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "italy"
        }

        return NSLocalizedString("italy", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Jamaica
      ///
      /// Locales: en, ka, hy
      static func jamaica(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jamaica", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "jamaica"
        }

        return NSLocalizedString("jamaica", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: January
      ///
      /// Locales: en, ka, hy
      static func january(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("january", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "january"
        }

        return NSLocalizedString("january", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Japan
      ///
      /// Locales: en, ka, hy
      static func japan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("japan", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "japan"
        }

        return NSLocalizedString("japan", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Jersey
      ///
      /// Locales: en, ka, hy
      static func jersey(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jersey", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "jersey"
        }

        return NSLocalizedString("jersey", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Join now
      ///
      /// Locales: en, ka, hy
      static func join_now(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("join_now", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "join_now"
        }

        return NSLocalizedString("join_now", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Jordan
      ///
      /// Locales: en, ka, hy
      static func jordan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jordan", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "jordan"
        }

        return NSLocalizedString("jordan", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: July
      ///
      /// Locales: en, ka, hy
      static func july(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("july", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "july"
        }

        return NSLocalizedString("july", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: June
      ///
      /// Locales: en, ka, hy
      static func june(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("june", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "june"
        }

        return NSLocalizedString("june", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Kazakhstan
      ///
      /// Locales: en, ka, hy
      static func kazakhstan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kazakhstan", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "kazakhstan"
        }

        return NSLocalizedString("kazakhstan", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Kenya
      ///
      /// Locales: en, ka, hy
      static func kenya(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kenya", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "kenya"
        }

        return NSLocalizedString("kenya", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Kiribati
      ///
      /// Locales: en, ka, hy
      static func kiribati(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kiribati", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "kiribati"
        }

        return NSLocalizedString("kiribati", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Kosovo
      ///
      /// Locales: en, ka, hy
      static func kosovo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kosovo", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "kosovo"
        }

        return NSLocalizedString("kosovo", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Kuwait
      ///
      /// Locales: en, ka, hy
      static func kuwait(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kuwait", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "kuwait"
        }

        return NSLocalizedString("kuwait", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Kyrgyzstan
      ///
      /// Locales: en, ka, hy
      static func kyrgyzstan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kyrgyzstan", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "kyrgyzstan"
        }

        return NSLocalizedString("kyrgyzstan", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: LOG IN
      ///
      /// Locales: en, ka, hy
      static func login_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_button_title"
        }

        return NSLocalizedString("login_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Laos
      ///
      /// Locales: en, ka, hy
      static func laos(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("laos", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "laos"
        }

        return NSLocalizedString("laos", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Latvia
      ///
      /// Locales: en, ka, hy
      static func latvia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("latvia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "latvia"
        }

        return NSLocalizedString("latvia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Lebanon
      ///
      /// Locales: en, ka, hy
      static func lebanon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lebanon", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "lebanon"
        }

        return NSLocalizedString("lebanon", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Lesotho
      ///
      /// Locales: en, ka, hy
      static func lesotho(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lesotho", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "lesotho"
        }

        return NSLocalizedString("lesotho", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Liberia
      ///
      /// Locales: en, ka, hy
      static func liberia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("liberia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "liberia"
        }

        return NSLocalizedString("liberia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Libya
      ///
      /// Locales: en, ka, hy
      static func libya(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("libya", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "libya"
        }

        return NSLocalizedString("libya", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Liechtenstein
      ///
      /// Locales: en, ka, hy
      static func liechtenstein(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("liechtenstein", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "liechtenstein"
        }

        return NSLocalizedString("liechtenstein", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Lithuania
      ///
      /// Locales: en, ka, hy
      static func lithuania(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lithuania", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "lithuania"
        }

        return NSLocalizedString("lithuania", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Log Out
      ///
      /// Locales: en, ka, hy
      static func log_out(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("log_out", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "log_out"
        }

        return NSLocalizedString("log_out", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Log in to
      ///
      /// Locales: en, ka, hy
      static func login_page_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_page_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_page_title"
        }

        return NSLocalizedString("login_page_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Log in with face ID
      ///
      /// Locales: en, ka, hy
      static func login_with_face_id_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_with_face_id_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_with_face_id_title"
        }

        return NSLocalizedString("login_with_face_id_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Log in with touch ID
      ///
      /// Locales: en, ka, hy
      static func login_with_touch_id_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_with_touch_id_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_with_touch_id_title"
        }

        return NSLocalizedString("login_with_touch_id_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en, ka, hy
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login"
        }

        return NSLocalizedString("login", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Login history
      ///
      /// Locales: en, ka, hy
      static func account_parameters_login_history(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_parameters_login_history", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_parameters_login_history"
        }

        return NSLocalizedString("account_parameters_login_history", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Luxembourg
      ///
      /// Locales: en, ka, hy
      static func luxembourg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("luxembourg", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "luxembourg"
        }

        return NSLocalizedString("luxembourg", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Macao
      ///
      /// Locales: en, ka, hy
      static func macao(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("macao", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "macao"
        }

        return NSLocalizedString("macao", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Macedonia
      ///
      /// Locales: en, ka, hy
      static func macedonia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("macedonia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "macedonia"
        }

        return NSLocalizedString("macedonia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Madagascar
      ///
      /// Locales: en, ka, hy
      static func madagascar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("madagascar", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "madagascar"
        }

        return NSLocalizedString("madagascar", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Mail
      ///
      /// Locales: en, ka, hy
      static func account_info_mail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_mail", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_mail"
        }

        return NSLocalizedString("account_info_mail", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Malawi
      ///
      /// Locales: en, ka, hy
      static func malawi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("malawi", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "malawi"
        }

        return NSLocalizedString("malawi", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Malaysia
      ///
      /// Locales: en, ka, hy
      static func malaysia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("malaysia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "malaysia"
        }

        return NSLocalizedString("malaysia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Maldives
      ///
      /// Locales: en, ka, hy
      static func maldives(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("maldives", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "maldives"
        }

        return NSLocalizedString("maldives", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Male
      ///
      /// Locales: en, ka, hy
      static func gender_male(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gender_male", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "gender_male"
        }

        return NSLocalizedString("gender_male", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Mali
      ///
      /// Locales: en, ka, hy
      static func mali(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mali", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "mali"
        }

        return NSLocalizedString("mali", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Malta
      ///
      /// Locales: en, ka, hy
      static func malta(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("malta", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "malta"
        }

        return NSLocalizedString("malta", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Manage my cards
      ///
      /// Locales: en, ka, hy
      static func my_cards_manage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("my_cards_manage", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "my_cards_manage"
        }

        return NSLocalizedString("my_cards_manage", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: March
      ///
      /// Locales: en, ka, hy
      static func march(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("march", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "march"
        }

        return NSLocalizedString("march", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Marshall Islands
      ///
      /// Locales: en, ka, hy
      static func marshall_islands(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("marshall_islands", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "marshall_islands"
        }

        return NSLocalizedString("marshall_islands", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Martinique
      ///
      /// Locales: en, ka, hy
      static func martinique(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("martinique", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "martinique"
        }

        return NSLocalizedString("martinique", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Mauritania
      ///
      /// Locales: en, ka, hy
      static func mauritania(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mauritania", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "mauritania"
        }

        return NSLocalizedString("mauritania", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Mauritius
      ///
      /// Locales: en, ka, hy
      static func mauritius(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mauritius", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "mauritius"
        }

        return NSLocalizedString("mauritius", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: May
      ///
      /// Locales: en, ka, hy
      static func may(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("may", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "may"
        }

        return NSLocalizedString("may", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Mayotte
      ///
      /// Locales: en, ka, hy
      static func mayotte(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mayotte", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "mayotte"
        }

        return NSLocalizedString("mayotte", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Mexico
      ///
      /// Locales: en, ka, hy
      static func mexico(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mexico", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "mexico"
        }

        return NSLocalizedString("mexico", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Micronesia
      ///
      /// Locales: en, ka, hy
      static func micronesia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("micronesia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "micronesia"
        }

        return NSLocalizedString("micronesia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Minimum Amount
      ///
      /// Locales: en, ka, hy
      static func add_card_minimum_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_card_minimum_amount", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "add_card_minimum_amount"
        }

        return NSLocalizedString("add_card_minimum_amount", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Mobile
      ///
      /// Locales: en, ka, hy
      static func access_history_device_mobile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("access_history_device_mobile", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "access_history_device_mobile"
        }

        return NSLocalizedString("access_history_device_mobile", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Moldava
      ///
      /// Locales: en, ka, hy
      static func moldava(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("moldava", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "moldava"
        }

        return NSLocalizedString("moldava", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Monaco
      ///
      /// Locales: en, ka, hy
      static func monaco(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("monaco", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "monaco"
        }

        return NSLocalizedString("monaco", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Mongolia
      ///
      /// Locales: en, ka, hy
      static func mongolia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mongolia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "mongolia"
        }

        return NSLocalizedString("mongolia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Montenegro
      ///
      /// Locales: en, ka, hy
      static func montenegro(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("montenegro", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "montenegro"
        }

        return NSLocalizedString("montenegro", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Month
      ///
      /// Locales: en, ka, hy
      static func card_month(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card_month", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "card_month"
        }

        return NSLocalizedString("card_month", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Montserrat
      ///
      /// Locales: en, ka, hy
      static func montserrat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("montserrat", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "montserrat"
        }

        return NSLocalizedString("montserrat", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Morocco
      ///
      /// Locales: en, ka, hy
      static func morocco(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("morocco", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "morocco"
        }

        return NSLocalizedString("morocco", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Mozambique
      ///
      /// Locales: en, ka, hy
      static func mozambique(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mozambique", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "mozambique"
        }

        return NSLocalizedString("mozambique", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: My Balance
      ///
      /// Locales: en, ka, hy
      static func balance_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("balance_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "balance_title"
        }

        return NSLocalizedString("balance_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: My Bonuses
      ///
      /// Locales: en, ka, hy
      static func my_bonuses(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("my_bonuses", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "my_bonuses"
        }

        return NSLocalizedString("my_bonuses", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: My Cards
      ///
      /// Locales: en, ka, hy
      static func my_cards(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("my_cards", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "my_cards"
        }

        return NSLocalizedString("my_cards", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Myanmar
      ///
      /// Locales: en, ka, hy
      static func myanmar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("myanmar", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "myanmar"
        }

        return NSLocalizedString("myanmar", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, ka, hy
      static func account_info_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_name", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_name"
        }

        return NSLocalizedString("account_info_name", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Namibia
      ///
      /// Locales: en, ka, hy
      static func namibia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("namibia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "namibia"
        }

        return NSLocalizedString("namibia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Nauru
      ///
      /// Locales: en, ka, hy
      static func nauru(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nauru", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "nauru"
        }

        return NSLocalizedString("nauru", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Nepal
      ///
      /// Locales: en, ka, hy
      static func nepal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nepal", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "nepal"
        }

        return NSLocalizedString("nepal", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Netherlands
      ///
      /// Locales: en, ka, hy
      static func netherlands(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("netherlands", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "netherlands"
        }

        return NSLocalizedString("netherlands", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: New Caledonia
      ///
      /// Locales: en, ka, hy
      static func new_caledonia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_caledonia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "new_caledonia"
        }

        return NSLocalizedString("new_caledonia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: New Password
      ///
      /// Locales: en, ka, hy
      static func new_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_password", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "new_password"
        }

        return NSLocalizedString("new_password", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: New Zealand
      ///
      /// Locales: en, ka, hy
      static func new_zealand(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_zealand", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "new_zealand"
        }

        return NSLocalizedString("new_zealand", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Nicaragua
      ///
      /// Locales: en, ka, hy
      static func nicaragua(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nicaragua", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "nicaragua"
        }

        return NSLocalizedString("nicaragua", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Niger
      ///
      /// Locales: en, ka, hy
      static func niger(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("niger", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "niger"
        }

        return NSLocalizedString("niger", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Nigeria
      ///
      /// Locales: en, ka, hy
      static func nigeria(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nigeria", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "nigeria"
        }

        return NSLocalizedString("nigeria", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Niue
      ///
      /// Locales: en, ka, hy
      static func niue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("niue", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "niue"
        }

        return NSLocalizedString("niue", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Norfolk Island
      ///
      /// Locales: en, ka, hy
      static func norfolk_island(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("norfolk_island", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "norfolk_island"
        }

        return NSLocalizedString("norfolk_island", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: North Korea
      ///
      /// Locales: en, ka, hy
      static func north_korea(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("north_korea", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "north_korea"
        }

        return NSLocalizedString("north_korea", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Northern Mariana Islands
      ///
      /// Locales: en, ka, hy
      static func northern_mariana_islands(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("northern_mariana_islands", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "northern_mariana_islands"
        }

        return NSLocalizedString("northern_mariana_islands", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Norway
      ///
      /// Locales: en, ka, hy
      static func norway(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("norway", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "norway"
        }

        return NSLocalizedString("norway", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Not a member?
      ///
      /// Locales: en, ka, hy
      static func not_member(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("not_member", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "not_member"
        }

        return NSLocalizedString("not_member", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Notifications
      ///
      /// Locales: en, ka, hy
      static func notifications_page_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notifications_page_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "notifications_page_title"
        }

        return NSLocalizedString("notifications_page_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: November
      ///
      /// Locales: en, ka, hy
      static func november(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("november", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "november"
        }

        return NSLocalizedString("november", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Octuber
      ///
      /// Locales: en, ka, hy
      static func october(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("october", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "october"
        }

        return NSLocalizedString("october", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Old Password
      ///
      /// Locales: en, ka, hy
      static func old_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("old_password", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "old_password"
        }

        return NSLocalizedString("old_password", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Oman
      ///
      /// Locales: en, ka, hy
      static func oman(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oman", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "oman"
        }

        return NSLocalizedString("oman", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Online bookmaking is operated by Cosmos LLC, (I/according to the Permit #19-05/284. Legal address: E. Akhvlediani Ascent, N6, Chugureti District, Tbilisi, Georgia. Online games of chance is operated by Aviator LLC (I/N 405076304), according to the Permit #19-06/252. Legal address: E. Akhvlediani Ascent, N6, Chugureti District, Tbilisi, Georgia
      ///
      /// Locales: en, ka, hy
      static func login_legal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_legal", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_legal"
        }

        return NSLocalizedString("login_legal", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Other
      ///
      /// Locales: en, ka, hy
      static func gender_other(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gender_other", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "gender_other"
        }

        return NSLocalizedString("gender_other", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Other IP Login
      ///
      /// Locales: en, ka, hy
      static func security_levels_other_ip_login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("security_levels_other_ip_login", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "security_levels_other_ip_login"
        }

        return NSLocalizedString("security_levels_other_ip_login", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: P2P Transfer
      ///
      /// Locales: en, ka, hy
      static func p2p_transfer_p2p_transfer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p2p_transfer_p2p_transfer", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "p2p_transfer_p2p_transfer"
        }

        return NSLocalizedString("p2p_transfer_p2p_transfer", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Pakistan
      ///
      /// Locales: en, ka, hy
      static func pakistan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pakistan", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "pakistan"
        }

        return NSLocalizedString("pakistan", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Palau
      ///
      /// Locales: en, ka, hy
      static func palau(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("palau", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "palau"
        }

        return NSLocalizedString("palau", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Palestine
      ///
      /// Locales: en, ka, hy
      static func palestine(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("palestine", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "palestine"
        }

        return NSLocalizedString("palestine", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Panama
      ///
      /// Locales: en, ka, hy
      static func panama(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("panama", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "panama"
        }

        return NSLocalizedString("panama", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Papua New Guinea
      ///
      /// Locales: en, ka, hy
      static func papua_new_guinea(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("papua_new_guinea", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "papua_new_guinea"
        }

        return NSLocalizedString("papua_new_guinea", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Paraguay
      ///
      /// Locales: en, ka, hy
      static func paraguay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paraguay", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "paraguay"
        }

        return NSLocalizedString("paraguay", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, ka, hy
      static func account_info_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_password", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_password"
        }

        return NSLocalizedString("account_info_password", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, ka, hy
      static func login_password_input_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_password_input_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_password_input_title"
        }

        return NSLocalizedString("login_password_input_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Password Change
      ///
      /// Locales: en, ka, hy
      static func security_levels_password_change(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("security_levels_password_change", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "security_levels_password_change"
        }

        return NSLocalizedString("security_levels_password_change", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Password Update
      ///
      /// Locales: en, ka, hy
      static func security_levels_password_update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("security_levels_password_update", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "security_levels_password_update"
        }

        return NSLocalizedString("security_levels_password_update", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Payment provider
      ///
      /// Locales: en, ka, hy
      static func transactions_details_payment_provider_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactions_details_payment_provider_name", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "transactions_details_payment_provider_name"
        }

        return NSLocalizedString("transactions_details_payment_provider_name", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Personal ID
      ///
      /// Locales: en, ka, hy
      static func account_info_personal_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_personal_id", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_personal_id"
        }

        return NSLocalizedString("account_info_personal_id", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Personal Info Change
      ///
      /// Locales: en, ka, hy
      static func security_levels_personal_info_change(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("security_levels_personal_info_change", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "security_levels_personal_info_change"
        }

        return NSLocalizedString("security_levels_personal_info_change", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Personal Information
      ///
      /// Locales: en, ka, hy
      static func account_info_personal_info_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_personal_info_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_personal_info_title"
        }

        return NSLocalizedString("account_info_personal_info_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Peru
      ///
      /// Locales: en, ka, hy
      static func peru(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("peru", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "peru"
        }

        return NSLocalizedString("peru", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Phillipines
      ///
      /// Locales: en, ka, hy
      static func phillipines(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phillipines", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "phillipines"
        }

        return NSLocalizedString("phillipines", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Phone Number
      ///
      /// Locales: en, ka, hy
      static func account_info_phone_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_phone_number", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_phone_number"
        }

        return NSLocalizedString("account_info_phone_number", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Phone Number
      ///
      /// Locales: en, ka, hy
      static func new_phone_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_phone_number", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "new_phone_number"
        }

        return NSLocalizedString("new_phone_number", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Pitcairn
      ///
      /// Locales: en, ka, hy
      static func pitcairn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pitcairn", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "pitcairn"
        }

        return NSLocalizedString("pitcairn", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Please, enter all required fields to make transaction
      ///
      /// Locales: en, ka, hy
      static func deposit_visa_some_field_is_not_specified(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deposit_visa_some_field_is_not_specified", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "deposit_visa_some_field_is_not_specified"
        }

        return NSLocalizedString("deposit_visa_some_field_is_not_specified", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Please, enter possitive amount
      ///
      /// Locales: en, ka, hy
      static func deposit_visa_negative_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deposit_visa_negative_amount", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "deposit_visa_negative_amount"
        }

        return NSLocalizedString("deposit_visa_negative_amount", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Poker Balance
      ///
      /// Locales: en, ka, hy
      static func poker_balance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("poker_balance", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "poker_balance"
        }

        return NSLocalizedString("poker_balance", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Poland
      ///
      /// Locales: en, ka, hy
      static func poland(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("poland", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "poland"
        }

        return NSLocalizedString("poland", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Portugal
      ///
      /// Locales: en, ka, hy
      static func portugal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("portugal", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "portugal"
        }

        return NSLocalizedString("portugal", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Prefer Not To Say
      ///
      /// Locales: en, ka, hy
      static func gender_prefer_not_to_say(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gender_prefer_not_to_say", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "gender_prefer_not_to_say"
        }

        return NSLocalizedString("gender_prefer_not_to_say", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Prexix
      ///
      /// Locales: en, ka, hy
      static func phone_prefix(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phone_prefix", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "phone_prefix"
        }

        return NSLocalizedString("phone_prefix", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Private Information
      ///
      /// Locales: en, ka, hy
      static func account_info_private_info_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_private_info_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_private_info_title"
        }

        return NSLocalizedString("account_info_private_info_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Proceed
      ///
      /// Locales: en, ka, hy
      static func withdraw_proceed_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_proceed_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_proceed_button_title"
        }

        return NSLocalizedString("withdraw_proceed_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Promotions
      ///
      /// Locales: en, ka, hy
      static func promotions_page_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("promotions_page_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "promotions_page_title"
        }

        return NSLocalizedString("promotions_page_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Puerto Rico
      ///
      /// Locales: en, ka, hy
      static func puerto_rico(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("puerto_rico", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "puerto_rico"
        }

        return NSLocalizedString("puerto_rico", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Qatar
      ///
      /// Locales: en, ka, hy
      static func qatar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qatar", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "qatar"
        }

        return NSLocalizedString("qatar", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Quick Actions
      ///
      /// Locales: en, ka, hy
      static func quick_actions_header_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("quick_actions_header_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "quick_actions_header_title"
        }

        return NSLocalizedString("quick_actions_header_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Recently Played
      ///
      /// Locales: en, ka, hy
      static func recently_played(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recently_played", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "recently_played"
        }

        return NSLocalizedString("recently_played", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Repeat New Password
      ///
      /// Locales: en, ka, hy
      static func repeat_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("repeat_password", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "repeat_password"
        }

        return NSLocalizedString("repeat_password", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Resend SMS
      ///
      /// Locales: en, ka, hy
      static func sms_resend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sms_resend", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sms_resend"
        }

        return NSLocalizedString("sms_resend", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Resend in
      ///
      /// Locales: en, ka, hy
      static func sms_resend_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sms_resend_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sms_resend_title"
        }

        return NSLocalizedString("sms_resend_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Reunion
      ///
      /// Locales: en, ka, hy
      static func reunion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reunion", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "reunion"
        }

        return NSLocalizedString("reunion", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Romania
      ///
      /// Locales: en, ka, hy
      static func romania(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("romania", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "romania"
        }

        return NSLocalizedString("romania", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Russia
      ///
      /// Locales: en, ka, hy
      static func russia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("russia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "russia"
        }

        return NSLocalizedString("russia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Rwanda
      ///
      /// Locales: en, ka, hy
      static func rwanda(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rwanda", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "rwanda"
        }

        return NSLocalizedString("rwanda", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: SELF SUSPEND
      ///
      /// Locales: en, ka, hy
      static func account_info_status_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_status_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_status_button_title"
        }

        return NSLocalizedString("account_info_status_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: SMS LOGIN
      ///
      /// Locales: en, ka, hy
      static func sms_login_page_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sms_login_page_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sms_login_page_title"
        }

        return NSLocalizedString("sms_login_page_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: SMS Login
      ///
      /// Locales: en, ka, hy
      static func login_sms_login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_sms_login", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_sms_login"
        }

        return NSLocalizedString("login_sms_login", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: SMS Messages
      ///
      /// Locales: en, ka, hy
      static func account_parameters_messages_sms_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_parameters_messages_sms_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_parameters_messages_sms_title"
        }

        return NSLocalizedString("account_parameters_messages_sms_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: SMS Messages
      ///
      /// Locales: en, ka, hy
      static func security_levels_scene_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("security_levels_scene_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "security_levels_scene_title"
        }

        return NSLocalizedString("security_levels_scene_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Saint Barthelemy
      ///
      /// Locales: en, ka, hy
      static func saint_barthelemy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("saint_barthelemy", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "saint_barthelemy"
        }

        return NSLocalizedString("saint_barthelemy", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Saint Helena
      ///
      /// Locales: en, ka, hy
      static func saint_helena(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("saint_helena", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "saint_helena"
        }

        return NSLocalizedString("saint_helena", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Saint Kitts And Nevis
      ///
      /// Locales: en, ka, hy
      static func saint_kitts_and_nevis(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("saint_kitts_and_nevis", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "saint_kitts_and_nevis"
        }

        return NSLocalizedString("saint_kitts_and_nevis", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Saint Lucia
      ///
      /// Locales: en, ka, hy
      static func saint_lucia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("saint_lucia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "saint_lucia"
        }

        return NSLocalizedString("saint_lucia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Saint Martin
      ///
      /// Locales: en, ka, hy
      static func saint_martin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("saint_martin", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "saint_martin"
        }

        return NSLocalizedString("saint_martin", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Saint Pierre And Miquelon
      ///
      /// Locales: en, ka, hy
      static func saint_pierre_and_miquelon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("saint_pierre_and_miquelon", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "saint_pierre_and_miquelon"
        }

        return NSLocalizedString("saint_pierre_and_miquelon", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Saint Vincent And The Grenadines
      ///
      /// Locales: en, ka, hy
      static func saint_vincent_and_the_grenadines(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("saint_vincent_and_the_grenadines", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "saint_vincent_and_the_grenadines"
        }

        return NSLocalizedString("saint_vincent_and_the_grenadines", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Samoa
      ///
      /// Locales: en, ka, hy
      static func samoa(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("samoa", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "samoa"
        }

        return NSLocalizedString("samoa", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: San Marino
      ///
      /// Locales: en, ka, hy
      static func san_marino(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("san_marino", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "san_marino"
        }

        return NSLocalizedString("san_marino", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Sao Tome And Principe
      ///
      /// Locales: en, ka, hy
      static func sao_tome_and_principe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sao_tome_and_principe", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sao_tome_and_principe"
        }

        return NSLocalizedString("sao_tome_and_principe", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Saudi Arabia
      ///
      /// Locales: en, ka, hy
      static func saudi_arabia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("saudi_arabia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "saudi_arabia"
        }

        return NSLocalizedString("saudi_arabia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en, ka, hy
      static func account_info_save_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_save_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_save_button_title"
        }

        return NSLocalizedString("account_info_save_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Scan Card
      ///
      /// Locales: en, ka, hy
      static func scan_card_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_card_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "scan_card_title"
        }

        return NSLocalizedString("scan_card_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Search for games
      ///
      /// Locales: en, ka, hy
      static func home_search_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home_search_placeholder", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "home_search_placeholder"
        }

        return NSLocalizedString("home_search_placeholder", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Seconds
      ///
      /// Locales: en, ka, hy
      static func sms_resend_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sms_resend_time", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sms_resend_time"
        }

        return NSLocalizedString("sms_resend_time", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Security messsages
      ///
      /// Locales: en, ka, hy
      static func account_parameters_messages_header(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_parameters_messages_header", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_parameters_messages_header"
        }

        return NSLocalizedString("account_parameters_messages_header", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Self Suspend
      ///
      /// Locales: en, ka, hy
      static func self_suspend_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("self_suspend_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "self_suspend_title"
        }

        return NSLocalizedString("self_suspend_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Senegal
      ///
      /// Locales: en, ka, hy
      static func senegal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("senegal", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "senegal"
        }

        return NSLocalizedString("senegal", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: September
      ///
      /// Locales: en, ka, hy
      static func september(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("september", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "september"
        }

        return NSLocalizedString("september", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Serbia
      ///
      /// Locales: en, ka, hy
      static func serbia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("serbia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "serbia"
        }

        return NSLocalizedString("serbia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, ka, hy
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "settings"
        }

        return NSLocalizedString("settings", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Seychelles
      ///
      /// Locales: en, ka, hy
      static func seychelles(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seychelles", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "seychelles"
        }

        return NSLocalizedString("seychelles", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Sierraleone
      ///
      /// Locales: en, ka, hy
      static func sierra_leone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sierra_leone", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sierra_leone"
        }

        return NSLocalizedString("sierra_leone", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Singapore
      ///
      /// Locales: en, ka, hy
      static func singapore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("singapore", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "singapore"
        }

        return NSLocalizedString("singapore", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Sint Maarten
      ///
      /// Locales: en, ka, hy
      static func sint_maarten(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sint_maarten", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sint_maarten"
        }

        return NSLocalizedString("sint_maarten", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Slovakia
      ///
      /// Locales: en, ka, hy
      static func slovakia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("slovakia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "slovakia"
        }

        return NSLocalizedString("slovakia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Slovenia
      ///
      /// Locales: en, ka, hy
      static func slovenia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("slovenia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "slovenia"
        }

        return NSLocalizedString("slovenia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Solomon Islands
      ///
      /// Locales: en, ka, hy
      static func solomon_islands(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("solomon_islands", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "solomon_islands"
        }

        return NSLocalizedString("solomon_islands", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Somalia
      ///
      /// Locales: en, ka, hy
      static func somalia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("somalia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "somalia"
        }

        return NSLocalizedString("somalia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: South Africa
      ///
      /// Locales: en, ka, hy
      static func south_africa(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("south_africa", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "south_africa"
        }

        return NSLocalizedString("south_africa", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: South Georgia & The South Sandwich Islands
      ///
      /// Locales: en, ka, hy
      static func south_georgia_and_the_south_sandwich_islands(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("south_georgia_and_the_south_sandwich_islands", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "south_georgia_and_the_south_sandwich_islands"
        }

        return NSLocalizedString("south_georgia_and_the_south_sandwich_islands", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: South Korea
      ///
      /// Locales: en, ka, hy
      static func south_korea(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("south_korea", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "south_korea"
        }

        return NSLocalizedString("south_korea", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: South Sudan
      ///
      /// Locales: en, ka, hy
      static func south_sudan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("south_sudan", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "south_sudan"
        }

        return NSLocalizedString("south_sudan", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Spain
      ///
      /// Locales: en, ka, hy
      static func spain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spain", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "spain"
        }

        return NSLocalizedString("spain", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Sports
      ///
      /// Locales: en, ka, hy
      static func sports_page_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sports_page_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sports_page_title"
        }

        return NSLocalizedString("sports_page_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Srilanka
      ///
      /// Locales: en, ka, hy
      static func sri_lanka(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sri_lanka", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sri_lanka"
        }

        return NSLocalizedString("sri_lanka", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Standart Packet
      ///
      /// Locales: en, ka, hy
      static func security_levels_standart_packet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("security_levels_standart_packet", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "security_levels_standart_packet"
        }

        return NSLocalizedString("security_levels_standart_packet", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Status
      ///
      /// Locales: en, ka, hy
      static func account_info_status(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_status", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_status"
        }

        return NSLocalizedString("account_info_status", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Sudan
      ///
      /// Locales: en, ka, hy
      static func sudan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sudan", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sudan"
        }

        return NSLocalizedString("sudan", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Suriname
      ///
      /// Locales: en, ka, hy
      static func suriname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("suriname", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "suriname"
        }

        return NSLocalizedString("suriname", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Surname
      ///
      /// Locales: en, ka, hy
      static func account_info_surname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_surname", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_surname"
        }

        return NSLocalizedString("account_info_surname", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Suspend Duration
      ///
      /// Locales: en, ka, hy
      static func suspend_duration(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("suspend_duration", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "suspend_duration"
        }

        return NSLocalizedString("suspend_duration", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Svalbard & Jan Mayen
      ///
      /// Locales: en, ka, hy
      static func svalbard_and_jan_mayen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("svalbard_and_jan_mayen", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "svalbard_and_jan_mayen"
        }

        return NSLocalizedString("svalbard_and_jan_mayen", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Swaziland
      ///
      /// Locales: en, ka, hy
      static func swaziland(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("swaziland", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "swaziland"
        }

        return NSLocalizedString("swaziland", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Sweden
      ///
      /// Locales: en, ka, hy
      static func sweden(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sweden", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sweden"
        }

        return NSLocalizedString("sweden", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Switzerland
      ///
      /// Locales: en, ka, hy
      static func switzerland(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("switzerland", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "switzerland"
        }

        return NSLocalizedString("switzerland", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Syria
      ///
      /// Locales: en, ka, hy
      static func syria(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("syria", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "syria"
        }

        return NSLocalizedString("syria", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Taiwan
      ///
      /// Locales: en, ka, hy
      static func taiwan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("taiwan", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "taiwan"
        }

        return NSLocalizedString("taiwan", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Tajikistan
      ///
      /// Locales: en, ka, hy
      static func tajikistan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tajikistan", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "tajikistan"
        }

        return NSLocalizedString("tajikistan", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Tanzania
      ///
      /// Locales: en, ka, hy
      static func tanzania(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tanzania", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "tanzania"
        }

        return NSLocalizedString("tanzania", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Thailand
      ///
      /// Locales: en, ka, hy
      static func thailand(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thailand", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "thailand"
        }

        return NSLocalizedString("thailand", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Timorleste
      ///
      /// Locales: en, ka, hy
      static func timor_leste(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timor_leste", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "timor_leste"
        }

        return NSLocalizedString("timor_leste", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Togo
      ///
      /// Locales: en, ka, hy
      static func togo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("togo", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "togo"
        }

        return NSLocalizedString("togo", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Tokelau
      ///
      /// Locales: en, ka, hy
      static func tokelau(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tokelau", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "tokelau"
        }

        return NSLocalizedString("tokelau", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Tonga
      ///
      /// Locales: en, ka, hy
      static func tonga(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tonga", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "tonga"
        }

        return NSLocalizedString("tonga", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Total Balance
      ///
      /// Locales: en, ka, hy
      static func total_balance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("total_balance", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "total_balance"
        }

        return NSLocalizedString("total_balance", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Total amount
      ///
      /// Locales: en, ka, hy
      static func p2p_transfer_total_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p2p_transfer_total_amount", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "p2p_transfer_total_amount"
        }

        return NSLocalizedString("p2p_transfer_total_amount", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Total amount
      ///
      /// Locales: en, ka, hy
      static func transactions_details_total_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactions_details_total_amount", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "transactions_details_total_amount"
        }

        return NSLocalizedString("transactions_details_total_amount", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Transaction History
      ///
      /// Locales: en, ka, hy
      static func transaction_history(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction_history", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "transaction_history"
        }

        return NSLocalizedString("transaction_history", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Transaction Successed
      ///
      /// Locales: en, ka, hy
      static func withdraw_transaction_successed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_transaction_successed", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_transaction_successed"
        }

        return NSLocalizedString("withdraw_transaction_successed", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Transaction commission
      ///
      /// Locales: en, ka, hy
      static func p2p_transfer_transaction_commission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p2p_transfer_transaction_commission", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "p2p_transfer_transaction_commission"
        }

        return NSLocalizedString("p2p_transfer_transaction_commission", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Transaction fee
      ///
      /// Locales: en, ka, hy
      static func transactions_details_fee_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactions_details_fee_amount", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "transactions_details_fee_amount"
        }

        return NSLocalizedString("transactions_details_fee_amount", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Transaction type
      ///
      /// Locales: en, ka, hy
      static func transactions_details_type(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactions_details_type", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "transactions_details_type"
        }

        return NSLocalizedString("transactions_details_type", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Transfer amount
      ///
      /// Locales: en, ka, hy
      static func p2p_transfer_tranfer_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p2p_transfer_tranfer_amount", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "p2p_transfer_tranfer_amount"
        }

        return NSLocalizedString("p2p_transfer_tranfer_amount", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Transfer to a Friend
      ///
      /// Locales: en, ka, hy
      static func transfer_to_a_friend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transfer_to_a_friend", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "transfer_to_a_friend"
        }

        return NSLocalizedString("transfer_to_a_friend", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Trinidad And Tobago
      ///
      /// Locales: en, ka, hy
      static func trinidad_and_tobago(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("trinidad_and_tobago", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "trinidad_and_tobago"
        }

        return NSLocalizedString("trinidad_and_tobago", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Tunisia
      ///
      /// Locales: en, ka, hy
      static func tunisia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tunisia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "tunisia"
        }

        return NSLocalizedString("tunisia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Turkey
      ///
      /// Locales: en, ka, hy
      static func turkey(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("turkey", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "turkey"
        }

        return NSLocalizedString("turkey", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Turkmenistan
      ///
      /// Locales: en, ka, hy
      static func turkmenistan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("turkmenistan", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "turkmenistan"
        }

        return NSLocalizedString("turkmenistan", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Turks And Caicos Islands
      ///
      /// Locales: en, ka, hy
      static func turks_and_caicos_islands(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("turks_and_caicos_islands", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "turks_and_caicos_islands"
        }

        return NSLocalizedString("turks_and_caicos_islands", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Tuvalu
      ///
      /// Locales: en, ka, hy
      static func tuvalu(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tuvalu", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "tuvalu"
        }

        return NSLocalizedString("tuvalu", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Uganda
      ///
      /// Locales: en, ka, hy
      static func uganda(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uganda", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "uganda"
        }

        return NSLocalizedString("uganda", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Ukraine
      ///
      /// Locales: en, ka, hy
      static func ukraine(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ukraine", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "ukraine"
        }

        return NSLocalizedString("ukraine", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: United Arab Emirates
      ///
      /// Locales: en, ka, hy
      static func united_arab_emirates(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("united_arab_emirates", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "united_arab_emirates"
        }

        return NSLocalizedString("united_arab_emirates", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: United Kingdom
      ///
      /// Locales: en, ka, hy
      static func united_kingdom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("united_kingdom", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "united_kingdom"
        }

        return NSLocalizedString("united_kingdom", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: United States
      ///
      /// Locales: en, ka, hy
      static func united_states(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("united_states", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "united_states"
        }

        return NSLocalizedString("united_states", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: United States Minor Outlying Islands
      ///
      /// Locales: en, ka, hy
      static func united_states_minor_outlying_islands(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("united_states_minor_outlying_islands", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "united_states_minor_outlying_islands"
        }

        return NSLocalizedString("united_states_minor_outlying_islands", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Update Password
      ///
      /// Locales: en, ka, hy
      static func update_password_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("update_password_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "update_password_button_title"
        }

        return NSLocalizedString("update_password_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Uruguay
      ///
      /// Locales: en, ka, hy
      static func uruguay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uruguay", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "uruguay"
        }

        return NSLocalizedString("uruguay", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Usage Date
      ///
      /// Locales: en, ka, hy
      static func card_usage_date_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card_usage_date_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "card_usage_date_title"
        }

        return NSLocalizedString("card_usage_date_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: User ID
      ///
      /// Locales: en, ka, hy
      static func account_info_user_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_user_id", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_user_id"
        }

        return NSLocalizedString("account_info_user_id", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Username
      ///
      /// Locales: en, ka, hy
      static func account_info_username(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_info_username", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_info_username"
        }

        return NSLocalizedString("account_info_username", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Username
      ///
      /// Locales: en, ka, hy
      static func login_username_input_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_username_input_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_username_input_title"
        }

        return NSLocalizedString("login_username_input_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Uzbekistan
      ///
      /// Locales: en, ka, hy
      static func uzbekistan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uzbekistan", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "uzbekistan"
        }

        return NSLocalizedString("uzbekistan", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Vanuatu
      ///
      /// Locales: en, ka, hy
      static func vanuatu(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vanuatu", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "vanuatu"
        }

        return NSLocalizedString("vanuatu", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Vatican
      ///
      /// Locales: en, ka, hy
      static func vatican_city(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vatican_city", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "vatican_city"
        }

        return NSLocalizedString("vatican_city", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Venezuela
      ///
      /// Locales: en, ka, hy
      static func venezuela(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("venezuela", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "venezuela"
        }

        return NSLocalizedString("venezuela", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Vietnam
      ///
      /// Locales: en, ka, hy
      static func vietnam(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vietnam", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "vietnam"
        }

        return NSLocalizedString("vietnam", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: View All
      ///
      /// Locales: en, ka, hy
      static func view_all(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_all", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "view_all"
        }

        return NSLocalizedString("view_all", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Virgin Islands, British
      ///
      /// Locales: en, ka, hy
      static func virgin_islands_british(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("virgin_islands_british", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "virgin_islands_british"
        }

        return NSLocalizedString("virgin_islands_british", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Virgin Islands, US
      ///
      /// Locales: en, ka, hy
      static func virgin_islands_us(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("virgin_islands_us", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "virgin_islands_us"
        }

        return NSLocalizedString("virgin_islands_us", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: WITHDRAW
      ///
      /// Locales: en, ka, hy
      static func transactions_details_type_withdraw(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactions_details_type_withdraw", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "transactions_details_type_withdraw"
        }

        return NSLocalizedString("transactions_details_type_withdraw", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Wallis And Futuna
      ///
      /// Locales: en, ka, hy
      static func wallis_and_futuna(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallis_and_futuna", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "wallis_and_futuna"
        }

        return NSLocalizedString("wallis_and_futuna", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Well done!
      ///
      /// Locales: en, ka, hy
      static func sms_well_done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sms_well_done", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "sms_well_done"
        }

        return NSLocalizedString("sms_well_done", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Western Sahara
      ///
      /// Locales: en, ka, hy
      static func western_sahara(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("western_sahara", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "western_sahara"
        }

        return NSLocalizedString("western_sahara", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Withdraw
      ///
      /// Locales: en, ka, hy
      static func security_levels_withdraw(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("security_levels_withdraw", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "security_levels_withdraw"
        }

        return NSLocalizedString("security_levels_withdraw", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Withdraw
      ///
      /// Locales: en, ka, hy
      static func withdraw_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_button_title"
        }

        return NSLocalizedString("withdraw_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Year
      ///
      /// Locales: en, ka, hy
      static func card_year(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card_year", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "card_year"
        }

        return NSLocalizedString("card_year", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Yemen
      ///
      /// Locales: en, ka, hy
      static func yemen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yemen", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "yemen"
        }

        return NSLocalizedString("yemen", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: You are transfering to
      ///
      /// Locales: en, ka, hy
      static func p2p_transfer_you_are_transfering_to(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p2p_transfer_you_are_transfering_to", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "p2p_transfer_you_are_transfering_to"
        }

        return NSLocalizedString("p2p_transfer_you_are_transfering_to", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: You must select at least one type of sms notification, when you choose individual package, or standart packet will be chosen
      ///
      /// Locales: en, ka, hy
      static func security_levels_individual_is_empty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("security_levels_individual_is_empty", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "security_levels_individual_is_empty"
        }

        return NSLocalizedString("security_levels_individual_is_empty", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: You'll recieve emails
      ///
      /// Locales: en, ka, hy
      static func account_parameters_messages_email_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_parameters_messages_email_description", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_parameters_messages_email_description"
        }

        return NSLocalizedString("account_parameters_messages_email_description", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: You'll recieve sms on your phone
      ///
      /// Locales: en, ka, hy
      static func account_parameters_messages_sms_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_parameters_messages_sms_description", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_parameters_messages_sms_description"
        }

        return NSLocalizedString("account_parameters_messages_sms_description", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Your Account is Verified
      ///
      /// Locales: en, ka, hy
      static func verified(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verified", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "verified"
        }

        return NSLocalizedString("verified", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Zambia
      ///
      /// Locales: en, ka, hy
      static func zambia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zambia", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "zambia"
        }

        return NSLocalizedString("zambia", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Zimbabwe
      ///
      /// Locales: en, ka, hy
      static func zimbabwe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zimbabwe", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "zimbabwe"
        }

        return NSLocalizedString("zimbabwe", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: configure parameters
      ///
      /// Locales: en, ka, hy
      static func account_parameters_messages_email_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_parameters_messages_email_button", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_parameters_messages_email_button"
        }

        return NSLocalizedString("account_parameters_messages_email_button", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: configure parameters
      ///
      /// Locales: en, ka, hy
      static func account_parameters_messages_sms_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_parameters_messages_sms_button", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "account_parameters_messages_sms_button"
        }

        return NSLocalizedString("account_parameters_messages_sms_button", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: service type can not be specified
      ///
      /// Locales: en, ka, hy
      static func withdraw_service_type_init_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_service_type_init_error", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_service_type_init_error"
        }

        return NSLocalizedString("withdraw_service_type_init_error", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: some parameters are missing
      ///
      /// Locales: en, ka, hy
      static func withdraw_missing_params_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_missing_params_error", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_missing_params_error"
        }

        return NSLocalizedString("withdraw_missing_params_error", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: აირჩიეთ სასურველი ბარათი
      ///
      /// Locales: en, ka, hy
      static func withdraw_description_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_description_card", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_description_card"
        }

        return NSLocalizedString("withdraw_description_card", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: ანგარიში
      ///
      /// Locales: en, ka, hy
      static func visa_card_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visa_card_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "visa_card_title"
        }

        return NSLocalizedString("visa_card_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: ახალი ელ.ფოსტის მისამართი
      ///
      /// Locales: en, ka, hy
      static func new_mail_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_mail_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "new_mail_title"
        }

        return NSLocalizedString("new_mail_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: ბალანსი
      ///
      /// Locales: en, ka, hy
      static func deposit_balance_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deposit_balance_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "deposit_balance_title"
        }

        return NSLocalizedString("deposit_balance_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: ბარათზე თანხის გასატანად, აუცილებელია ვებგვერდზე ატვირთული გქონდეთ პირადობის მოწმობის ფერადი ფოტო
      ///
      /// Locales: en, ka, hy
      static func withdraw_rule1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_rule1", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_rule1"
        }

        return NSLocalizedString("withdraw_rule1", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: ბარათი
      ///
      /// Locales: en, ka, hy
      static func withdraw_card_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_card_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_card_title"
        }

        return NSLocalizedString("withdraw_card_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: ბარათის დასამატებლად გთხოვთ მიუთითო მინიმალური თანხის ოდენობა
      ///
      /// Locales: en, ka, hy
      static func add_card_minimum_amount_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_card_minimum_amount_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "add_card_minimum_amount_title"
        }

        return NSLocalizedString("add_card_minimum_amount_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: გაგრძელება
      ///
      /// Locales: en, ka, hy
      static func visa_continue_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visa_continue_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "visa_continue_button_title"
        }

        return NSLocalizedString("visa_continue_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: გადასვლა
      ///
      /// Locales: en, ka, hy
      static func emoney_goto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emoney_goto", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "emoney_goto"
        }

        return NSLocalizedString("emoney_goto", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: გადახდის დასასრულებლად თქვენ გადამისამართდებით პროვაიდერის ვებ-გვერდზე
      ///
      /// Locales: en, ka, hy
      static func emoney_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emoney_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "emoney_title"
        }

        return NSLocalizedString("emoney_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: გაიარეთ ავტორიზაცია
      ///
      /// Locales: en, ka, hy
      static func login_sms_login_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_sms_login_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "login_sms_login_title"
        }

        return NSLocalizedString("login_sms_login_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: გაითვალისწინეთ, რომ განაღდების საკომისიო შეადგენს თანხის 1%-ს
      ///
      /// Locales: en, ka, hy
      static func withdraw_rule2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_rule2", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_rule2"
        }

        return NSLocalizedString("withdraw_rule2", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: გამოიყენეთ ერთი ან მეტი (e.g @$&!)
      ///
      /// Locales: en, ka, hy
      static func rule2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rule2", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "rule2"
        }

        return NSLocalizedString("rule2", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: გამოიყენეთ მთავრული სიმბოლოები
      ///
      /// Locales: en, ka, hy
      static func rule1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rule1", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "rule1"
        }

        return NSLocalizedString("rule1", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: გატანის ინსტრუქცია
      ///
      /// Locales: en, ka, hy
      static func emoney_instruction_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emoney_instruction_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "emoney_instruction_title"
        }

        return NSLocalizedString("emoney_instruction_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: გატანის ინსტრუქცია
      ///
      /// Locales: en, ka, hy
      static func visa_instruction_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visa_instruction_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "visa_instruction_title"
        }

        return NSLocalizedString("visa_instruction_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: გატანის ინსტრუქცია
      ///
      /// Locales: en, ka, hy
      static func withdraw_description_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_description_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_description_title"
        }

        return NSLocalizedString("withdraw_description_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: გრაფაში 'თანხა' ჩაწერეთ თვენთვის სასურველი თანხა
      ///
      /// Locales: en, ka, hy
      static func withdraw_description_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_description_amount", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_description_amount"
        }

        return NSLocalizedString("withdraw_description_amount", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: დაადასტურეთ პაროლი უსაფრთხოებისთვის
      ///
      /// Locales: en, ka, hy
      static func approve_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("approve_password", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "approve_password"
        }

        return NSLocalizedString("approve_password", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: დააჭირეთ ღილაკს 'გაგრძელება' და თანხა გადაირიცხება თქვენს ბარათზე
      ///
      /// Locales: en, ka, hy
      static func withdraw_description_proceed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_description_proceed", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_description_proceed"
        }

        return NSLocalizedString("withdraw_description_proceed", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: დააჭირეთ ღილაკს გაგრძელება
      ///
      /// Locales: en, ka, hy
      static func visa_description_proceed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visa_description_proceed", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "visa_description_proceed"
        }

        return NSLocalizedString("visa_description_proceed", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: დღეს განხორციელებული
      ///
      /// Locales: en, ka, hy
      static func component_date_header_today(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("component_date_header_today", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "component_date_header_today"
        }

        return NSLocalizedString("component_date_header_today", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: დღიური
      ///
      /// Locales: en, ka, hy
      static func visa_max_limit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visa_max_limit", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "visa_max_limit"
        }

        return NSLocalizedString("visa_max_limit", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: ელ.ფოსტის შეცვლა
      ///
      /// Locales: en, ka, hy
      static func change_mail_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("change_mail_button_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "change_mail_button_title"
        }

        return NSLocalizedString("change_mail_button_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: ერთჯერადი
      ///
      /// Locales: en, ka, hy
      static func visa_daily_limit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visa_daily_limit", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "visa_daily_limit"
        }

        return NSLocalizedString("visa_daily_limit", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: თანახმა ვარ, შემდგომი გადახდებისთვის მოხდეს ბარათის მონაცემების დამახსოვრება
      ///
      /// Locales: en, ka, hy
      static func add_card_terms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_card_terms", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "add_card_terms"
        }

        return NSLocalizedString("add_card_terms", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: თანხა
      ///
      /// Locales: en, ka, hy
      static func visa_amount_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visa_amount_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "visa_amount_title"
        }

        return NSLocalizedString("visa_amount_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: თანხა
      ///
      /// Locales: en, ka, hy
      static func withdraw_amount_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_amount_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_amount_title"
        }

        return NSLocalizedString("withdraw_amount_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: თანხის შევსება
      ///
      /// Locales: en, ka, hy
      static func deposit_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deposit_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "deposit_title"
        }

        return NSLocalizedString("deposit_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: თუ გსურთ ანგარიშის ბლოკირებული ვადის გახანგრძლივება დაგვიკავშირდით ცხელ ხაზზე
      ///
      /// Locales: en, ka, hy
      static func suspend_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("suspend_subtitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "suspend_subtitle"
        }

        return NSLocalizedString("suspend_subtitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: ლიმიტი ერთ ბარათზე
      ///
      /// Locales: en, ka, hy
      static func visa_description_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visa_description_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "visa_description_title"
        }

        return NSLocalizedString("visa_description_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: მინიმალური
      ///
      /// Locales: en, ka, hy
      static func visa_min_limit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visa_min_limit", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "visa_min_limit"
        }

        return NSLocalizedString("visa_min_limit", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: მინიმუმ 6 და მაქსიმუმ 30 სიმბოლო
      ///
      /// Locales: en, ka, hy
      static func rule3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rule3", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "rule3"
        }

        return NSLocalizedString("rule3", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: მონიშნე სასურველი დამახსოვრებული ბარათი
      ///
      /// Locales: en, ka, hy
      static func visa_description_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visa_description_card", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "visa_description_card"
        }

        return NSLocalizedString("visa_description_card", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: საათის წინ
      ///
      /// Locales: en, ka, hy
      static func notifications_hours_ago(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notifications_hours_ago", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "notifications_hours_ago"
        }

        return NSLocalizedString("notifications_hours_ago", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: ტრანზაქციის საკომისიო
      ///
      /// Locales: en, ka, hy
      static func withdraw_commission_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_commission_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_commission_title"
        }

        return NSLocalizedString("withdraw_commission_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: შეიყვანე სასურველი თანხა
      ///
      /// Locales: en, ka, hy
      static func visa_description_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visa_description_amount", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "visa_description_amount"
        }

        return NSLocalizedString("visa_description_amount", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: შეიყვანეთ eMoney-ს ვებ გვერდზე შესასვლელი პაროლი
      ///
      /// Locales: en, ka, hy
      static func emoney_rule2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emoney_rule2", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "emoney_rule2"
        }

        return NSLocalizedString("emoney_rule2", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: შეიყვანეთ eMoney-ს მომხმარებლის სახელი
      ///
      /// Locales: en, ka, hy
      static func emoney_rule1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emoney_rule1", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "emoney_rule1"
        }

        return NSLocalizedString("emoney_rule1", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: შეიყვანეთ მითითებული უსაფრთხოების კოდი და დააჭირეთ 'გადახდას'
      ///
      /// Locales: en, ka, hy
      static func emoney_rule3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emoney_rule3", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "emoney_rule3"
        }

        return NSLocalizedString("emoney_rule3", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: წუთის წინ
      ///
      /// Locales: en, ka, hy
      static func notifications_minutes_ago(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notifications_minutes_ago", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "notifications_minutes_ago"
        }

        return NSLocalizedString("notifications_minutes_ago", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: ჯამური თანხა
      ///
      /// Locales: en, ka, hy
      static func withdraw_total_amount_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw_total_amount_title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "withdraw_total_amount_title"
        }

        return NSLocalizedString("withdraw_total_amount_title", tableName: "Localization", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AccountParametersComponentView.validate()
      try _BalanceComponentView.validate()
      try _CalendarComponentView.validate()
      try _EmoneyButton.validate()
      try _FooterComponentView.validate()
      try _GameLauncherComponentView.validate()
      try _ProfileInfoComponentView.validate()
      try _TransactionHistoryComponentView.validate()
      try _WithdrawTermsView.validate()
    }

    struct _ABInputView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ABInputView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _AccessHistoryComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AccessHistoryComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _AccessHistoryTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AccessHistoryTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AccessHistoryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccessHistoryTableViewCell
      }

      fileprivate init() {}
    }

    struct _AccountInfoComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AccountInfoComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _AccountParametersComponentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AccountParametersComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "AccountParameters/BlockSelf", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AccountParameters/BlockSelf' is used in nib 'AccountParametersComponentView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AccountParametersHeaderComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AccountParametersHeaderComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _AccountParametersHeaderTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AccountParametersHeaderTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AccountParametersHeaderTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccountParametersHeaderTableViewCell
      }

      fileprivate init() {}
    }

    struct _AccountParametersTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AccountParametersTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AccountParametersTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccountParametersTableViewCell
      }

      fileprivate init() {}
    }

    struct _AccountSecurityMessagesComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AccountSecurityMessagesComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _AccountSecurityMessagesTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AccountSecurityMessagesTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AccountSecurityMessagesTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccountSecurityMessagesTableViewCell
      }

      fileprivate init() {}
    }

    struct _AddMyCardComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddMyCardComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _AddMyCardTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddMyCardTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddMyCardTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddMyCardTableViewCell
      }

      fileprivate init() {}
    }

    struct _AgreementComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AgreementComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _BalanceComponentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BalanceComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Components/GameLauncher/in", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Components/GameLauncher/in' is used in nib 'BalanceComponentView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _BalanceTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BalanceTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BalanceTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BalanceTableViewCell
      }

      fileprivate init() {}
    }

    struct _CalendarComponentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CalendarComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "TransactionsHistory/arrow-left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TransactionsHistory/arrow-left' is used in nib 'CalendarComponentView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TransactionsHistory/arrow-right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TransactionsHistory/arrow-right' is used in nib 'CalendarComponentView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DateHeaderCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DateHeaderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DateHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DateHeaderCell
      }

      fileprivate init() {}
    }

    struct _DateHeaderComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DateHeaderComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _EmoneyButton: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EmoneyButton"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Deposit/emoney_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Deposit/emoney_logo' is used in nib 'EmoneyButton', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EmoneyInstructionsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EmoneyInstructionsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _FooterComponentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FooterComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Shared/phone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Shared/phone' is used in nib 'FooterComponentView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Login/legal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Login/legal' is used in nib 'FooterComponentView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FooterTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FooterTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FooterTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FooterTableViewCell
      }

      fileprivate init() {}
    }

    struct _GameLauncherCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GameLauncherCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GameLauncherCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GameLauncherCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _GameLauncherComponentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GameLauncherComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Components/GameLauncher/in", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Components/GameLauncher/in' is used in nib 'GameLauncherComponentView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ColorGuide/Neutral/neutral700", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ColorGuide/Neutral/neutral700' is used in nib 'GameLauncherComponentView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "ColorGuide/Neutral/neutral600", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ColorGuide/Neutral/neutral600' is used in nib 'GameLauncherComponentView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _GameLauncherGridCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GameLauncherGridCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GameLauncherGridCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GameLauncherGridCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _GameLauncherGridComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GameLauncherGridComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _GameLoaderComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GameLoaderComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _HomeBannerCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeBannerCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBannerCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBannerCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _HomeBannerComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeBannerComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _HomeBannerContainerCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeBannerContainerCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBannerContainerCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBannerContainerCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _HomeBannerContainerComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeBannerContainerComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _LabelComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LabelComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _LoadingCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LoadingCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoadingCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoadingCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _LoadingComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LoadingComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MinAmountComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MinAmountComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MyCardComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyCardComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MyCardTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyCardTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyCardTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyCardTableViewCell
      }

      fileprivate init() {}
    }

    struct _NotificationComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NotificationComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _NotificationTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NotificationTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTableViewCell
      }

      fileprivate init() {}
    }

    struct _NotificationsHeaderCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NotificationsHeaderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationsHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationsHeaderCell
      }

      fileprivate init() {}
    }

    struct _NotificationsHeaderComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NotificationsHeaderComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PasswordChangeRulesView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PasswordChangeRulesView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PaymentMethodCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PaymentMethodCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentMethodCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentMethodCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _PaymentMethodComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PaymentMethodComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PaymentMethodGridComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PaymentMethodGridComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PlayedGameLauncherCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PlayedGameLauncherCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlayedGameLauncherCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlayedGameLauncherCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _PlayedGameLauncherComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PlayedGameLauncherComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ProfileInfoComponentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProfileInfoComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Components/ProfileCell/verified", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Components/ProfileCell/verified' is used in nib 'ProfileInfoComponentView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Components/ProfileCell/copy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Components/ProfileCell/copy' is used in nib 'ProfileInfoComponentView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProfileInfoTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProfileInfoTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileInfoTableViewCell
      }

      fileprivate init() {}
    }

    struct _PromotionComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PromotionComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PromotionTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PromotionTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PromotionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PromotionTableViewCell
      }

      fileprivate init() {}
    }

    struct _QuickActionComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "QuickActionComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _QuickActionTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "QuickActionTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuickActionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuickActionTableViewCell
      }

      fileprivate init() {}
    }

    struct _QuickActionsHeaderCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "QuickActionsHeaderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuickActionsHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuickActionsHeaderCell
      }

      fileprivate init() {}
    }

    struct _QuickActionsHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "QuickActionsHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _RecentlyPlayedCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RecentlyPlayedCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecentlyPlayedCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecentlyPlayedCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _RecentlyPlayedComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RecentlyPlayedComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SecurityLevelComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SecurityLevelComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SecurityLevelTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SecurityLevelTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SecurityLevelTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SecurityLevelTableViewCell
      }

      fileprivate init() {}
    }

    struct _SecurityLevelTypeComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SecurityLevelTypeComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SecurityLevelTypeTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SecurityLevelTypeTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SecurityLevelTypeTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SecurityLevelTypeTableViewCell
      }

      fileprivate init() {}
    }

    struct _SuggestedAmountCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SuggestedAmountCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SuggestedAmountCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SuggestedAmountCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _SuggestedAmountComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SuggestedAmountComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SuggestedAmountGridComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SuggestedAmountGridComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _TimerComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TimerComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _TransactionDetailsComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionDetailsComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _TransactionDetailsTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionDetailsTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionDetailsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionDetailsTableViewCell
      }

      fileprivate init() {}
    }

    struct _TransactionFilterComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionFilterComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _TransactionFilterTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionFilterTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionFilterTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionFilterTableViewCell
      }

      fileprivate init() {}
    }

    struct _TransactionHistoryComponentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TransactionHistoryComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "TransactionsHistory/deposit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TransactionsHistory/deposit' is used in nib 'TransactionHistoryComponentView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ColorGuide/SystemGrays/systemGrey2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ColorGuide/SystemGrays/systemGrey2' is used in nib 'TransactionHistoryComponentView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _TransactionHistoryTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionHistoryTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionHistoryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionHistoryTableViewCell
      }

      fileprivate init() {}
    }

    struct _VideoCardComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VideoCardComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _VideoCardTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VideoCardTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VideoCardTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoCardTableViewCell
      }

      fileprivate init() {}
    }

    struct _VisaInstructionsComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VisaInstructionsComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _VisaLimitComponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VisaLimitComponentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _WithdrawInstructionView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WithdrawInstructionView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _WithdrawTermsView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WithdrawTermsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Withdraw/info", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Withdraw/info' is used in nib 'WithdrawTermsView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try accessHistory.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try accessHistoryCalendar.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try accountInfo.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try accountParameters.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try addCard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try addressChange.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try biometricSettingsView.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try deposit.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try emoney.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try game.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try home.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try login.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mailChange.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mainContainer.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mainTabBar.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try myCards.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try notificationContent.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try notifications.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try otpLogin.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try p2PTransferView.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try passwordChange.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try phoneNumberChange.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profile.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try promotions.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try securityLevels.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try selfSuspend.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try sports.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try transactionDetails.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try transactions.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try transactionsFilter.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try visa.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try web.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try withdraw.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct accessHistory: Rswift.StoryboardResourceType, Rswift.Validatable {
      let accessHistoryViewController = StoryboardViewControllerResource<AccessHistoryViewController>(identifier: "AccessHistoryViewController")
      let bundle = R.hostingBundle
      let name = "AccessHistory"

      func accessHistoryViewController(_: Void = ()) -> AccessHistoryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: accessHistoryViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.accessHistory().accessHistoryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'accessHistoryViewController' could not be loaded from storyboard 'AccessHistory' as 'AccessHistoryViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct accessHistoryCalendar: Rswift.StoryboardResourceType, Rswift.Validatable {
      let accessHistoryCalendarViewController = StoryboardViewControllerResource<AccessHistoryCalendarViewController>(identifier: "AccessHistoryCalendarViewController")
      let bundle = R.hostingBundle
      let name = "AccessHistoryCalendar"

      func accessHistoryCalendarViewController(_: Void = ()) -> AccessHistoryCalendarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: accessHistoryCalendarViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.accessHistoryCalendar().accessHistoryCalendarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'accessHistoryCalendarViewController' could not be loaded from storyboard 'AccessHistoryCalendar' as 'AccessHistoryCalendarViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct accountInfo: Rswift.StoryboardResourceType, Rswift.Validatable {
      let accountInfoViewController = StoryboardViewControllerResource<AccountInfoViewController>(identifier: "AccountInfoViewController")
      let bundle = R.hostingBundle
      let name = "AccountInfo"

      func accountInfoViewController(_: Void = ()) -> AccountInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: accountInfoViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Components/GameLauncher/in", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Components/GameLauncher/in' is used in storyboard 'AccountInfo', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.accountInfo().accountInfoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'accountInfoViewController' could not be loaded from storyboard 'AccountInfo' as 'AccountInfoViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct accountParameters: Rswift.StoryboardResourceType, Rswift.Validatable {
      let accountParametersViewController = StoryboardViewControllerResource<AccountParametersViewController>(identifier: "AccountParametersViewController")
      let bundle = R.hostingBundle
      let name = "AccountParameters"

      func accountParametersViewController(_: Void = ()) -> AccountParametersViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: accountParametersViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.accountParameters().accountParametersViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'accountParametersViewController' could not be loaded from storyboard 'AccountParameters' as 'AccountParametersViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct addCard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addCardViewController = StoryboardViewControllerResource<AddCardViewController>(identifier: "AddCardViewController")
      let bundle = R.hostingBundle
      let name = "AddCard"

      func addCardViewController(_: Void = ()) -> AddCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addCardViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.addCard().addCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addCardViewController' could not be loaded from storyboard 'AddCard' as 'AddCardViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct addressChange: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addressChangeViewController = StoryboardViewControllerResource<AddressChangeViewController>(identifier: "AddressChangeViewController")
      let bundle = R.hostingBundle
      let name = "AddressChange"

      func addressChangeViewController(_: Void = ()) -> AddressChangeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addressChangeViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.addressChange().addressChangeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addressChangeViewController' could not be loaded from storyboard 'AddressChange' as 'AddressChangeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct biometricSettingsView: Rswift.StoryboardResourceType, Rswift.Validatable {
      let biometricSettingsViewController = StoryboardViewControllerResource<BiometricSettingsViewController>(identifier: "BiometricSettingsViewController")
      let bundle = R.hostingBundle
      let name = "BiometricSettingsView"

      func biometricSettingsViewController(_: Void = ()) -> BiometricSettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: biometricSettingsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.biometricSettingsView().biometricSettingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'biometricSettingsViewController' could not be loaded from storyboard 'BiometricSettingsView' as 'BiometricSettingsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct deposit: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let depositViewController = StoryboardViewControllerResource<DepositViewController>(identifier: "DepositViewController")
      let name = "Deposit"

      func depositViewController(_: Void = ()) -> DepositViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: depositViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Deposit/icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Deposit/icon' is used in storyboard 'Deposit', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.deposit().depositViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'depositViewController' could not be loaded from storyboard 'Deposit' as 'DepositViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct emoney: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let emoneyViewController = StoryboardViewControllerResource<EmoneyViewController>(identifier: "EmoneyViewController")
      let name = "Emoney"

      func emoneyViewController(_: Void = ()) -> EmoneyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: emoneyViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.emoney().emoneyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'emoneyViewController' could not be loaded from storyboard 'Emoney' as 'EmoneyViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct game: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let gameViewController = StoryboardViewControllerResource<GameViewController>(identifier: "GameViewController")
      let name = "Game"

      func gameViewController(_: Void = ()) -> GameViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: gameViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.game().gameViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'gameViewController' could not be loaded from storyboard 'Game' as 'GameViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct home: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HomeViewController

      let bundle = R.hostingBundle
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let name = "Home"

      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.home().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Home' as 'HomeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginViewController

      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Login"

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Shared/faceID", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Shared/faceID' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Login/logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Login/logo' is used in storyboard 'Login', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.login().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mailChange: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mailChangeViewController = StoryboardViewControllerResource<MailChangeViewController>(identifier: "MailChangeViewController")
      let name = "MailChange"

      func mailChangeViewController(_: Void = ()) -> MailChangeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mailChangeViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.mailChange().mailChangeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mailChangeViewController' could not be loaded from storyboard 'MailChange' as 'MailChangeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mainContainer: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mainContainerViewController = StoryboardViewControllerResource<MainContainerViewController>(identifier: "MainContainerViewController")
      let name = "MainContainer"

      func mainContainerViewController(_: Void = ()) -> MainContainerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainContainerViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.mainContainer().mainContainerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainContainerViewController' could not be loaded from storyboard 'MainContainer' as 'MainContainerViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mainTabBar: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainTabBarViewController

      let bundle = R.hostingBundle
      let mainTabBarViewController = StoryboardViewControllerResource<MainTabBarViewController>(identifier: "MainTabBarViewController")
      let name = "MainTabBar"

      func mainTabBarViewController(_: Void = ()) -> MainTabBarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabBarViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.mainTabBar().mainTabBarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabBarViewController' could not be loaded from storyboard 'MainTabBar' as 'MainTabBarViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct myCards: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let myCardsViewController = StoryboardViewControllerResource<MyCardsViewController>(identifier: "MyCardsViewController")
      let name = "MyCards"

      func myCardsViewController(_: Void = ()) -> MyCardsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myCardsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.myCards().myCardsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myCardsViewController' could not be loaded from storyboard 'MyCards' as 'MyCardsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct notificationContent: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NotificationContent"
      let notificationContentViewController = StoryboardViewControllerResource<NotificationContentViewController>(identifier: "NotificationContentViewController")

      func notificationContentViewController(_: Void = ()) -> NotificationContentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationContentViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.notificationContent().notificationContentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationContentViewController' could not be loaded from storyboard 'NotificationContent' as 'NotificationContentViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct notifications: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NotificationsViewController

      let bundle = R.hostingBundle
      let name = "Notifications"
      let notificationsViewController = StoryboardViewControllerResource<NotificationsViewController>(identifier: "NotificationsViewController")

      func notificationsViewController(_: Void = ()) -> NotificationsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.notifications().notificationsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationsViewController' could not be loaded from storyboard 'Notifications' as 'NotificationsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct otpLogin: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = OTPViewController

      let bundle = R.hostingBundle
      let name = "OTPLogin"
      let otpViewController = StoryboardViewControllerResource<OTPViewController>(identifier: "OTPViewController")

      func otpViewController(_: Void = ()) -> OTPViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: otpViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "OTP/resend", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'OTP/resend' is used in storyboard 'OTPLogin', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.otpLogin().otpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'otpViewController' could not be loaded from storyboard 'OTPLogin' as 'OTPViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct p2PTransferView: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "P2PTransferView"
      let p2PTransferViewController = StoryboardViewControllerResource<P2PTransferViewController>(identifier: "P2PTransferViewController")

      func p2PTransferViewController(_: Void = ()) -> P2PTransferViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: p2PTransferViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Withdraw/info", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Withdraw/info' is used in storyboard 'P2PTransferView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.p2PTransferView().p2PTransferViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'p2PTransferViewController' could not be loaded from storyboard 'P2PTransferView' as 'P2PTransferViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct passwordChange: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PasswordChange"
      let passwordChangeViewController = StoryboardViewControllerResource<PasswordChangeViewController>(identifier: "PasswordChangeViewController")

      func passwordChangeViewController(_: Void = ()) -> PasswordChangeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: passwordChangeViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.passwordChange().passwordChangeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'passwordChangeViewController' could not be loaded from storyboard 'PasswordChange' as 'PasswordChangeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct phoneNumberChange: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PhoneNumberChange"
      let phoneNumberChangeViewController = StoryboardViewControllerResource<PhoneNumberChangeViewController>(identifier: "PhoneNumberChangeViewController")

      func phoneNumberChangeViewController(_: Void = ()) -> PhoneNumberChangeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: phoneNumberChangeViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.phoneNumberChange().phoneNumberChangeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'phoneNumberChangeViewController' could not be loaded from storyboard 'PhoneNumberChange' as 'PhoneNumberChangeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profile: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Profile"
      let profileViewController = StoryboardViewControllerResource<ProfileViewController>(identifier: "ProfileViewController")

      func profileViewController(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.profile().profileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'Profile' as 'ProfileViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct promotions: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Promotions"
      let promotionsViewController = StoryboardViewControllerResource<PromotionsViewController>(identifier: "PromotionsViewController")

      func promotionsViewController(_: Void = ()) -> PromotionsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: promotionsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.promotions().promotionsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'promotionsViewController' could not be loaded from storyboard 'Promotions' as 'PromotionsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct securityLevels: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SecurityLevels"
      let securityLevelsViewController = StoryboardViewControllerResource<SecurityLevelsViewController>(identifier: "SecurityLevelsViewController")

      func securityLevelsViewController(_: Void = ()) -> SecurityLevelsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: securityLevelsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.securityLevels().securityLevelsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'securityLevelsViewController' could not be loaded from storyboard 'SecurityLevels' as 'SecurityLevelsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct selfSuspend: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SelfSuspend"
      let selfSuspendViewController = StoryboardViewControllerResource<SelfSuspendViewController>(identifier: "SelfSuspendViewController")

      func selfSuspendViewController(_: Void = ()) -> SelfSuspendViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selfSuspendViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.selfSuspend().selfSuspendViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selfSuspendViewController' could not be loaded from storyboard 'SelfSuspend' as 'SelfSuspendViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct sports: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SportsViewController

      let bundle = R.hostingBundle
      let name = "Sports"
      let sportsViewController = StoryboardViewControllerResource<SportsViewController>(identifier: "SportsViewController")

      func sportsViewController(_: Void = ()) -> SportsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sportsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.sports().sportsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sportsViewController' could not be loaded from storyboard 'Sports' as 'SportsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct transactionDetails: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TransactionDetails"
      let transactionDetailsViewController = StoryboardViewControllerResource<TransactionDetailsViewController>(identifier: "TransactionDetailsViewController")

      func transactionDetailsViewController(_: Void = ()) -> TransactionDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: transactionDetailsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.transactionDetails().transactionDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'transactionDetailsViewController' could not be loaded from storyboard 'TransactionDetails' as 'TransactionDetailsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct transactions: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Transactions"
      let transactionsViewController = StoryboardViewControllerResource<TransactionsViewController>(identifier: "TransactionsViewController")

      func transactionsViewController(_: Void = ()) -> TransactionsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: transactionsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.transactions().transactionsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'transactionsViewController' could not be loaded from storyboard 'Transactions' as 'TransactionsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct transactionsFilter: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TransactionsFilter"
      let transactionsFilterViewController = StoryboardViewControllerResource<TransactionsFilterViewController>(identifier: "TransactionsFilterViewController")

      func transactionsFilterViewController(_: Void = ()) -> TransactionsFilterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: transactionsFilterViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ColorGuide/SystemGrays/systemGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ColorGuide/SystemGrays/systemGrey' is used in storyboard 'TransactionsFilter', but couldn't be loaded.") }
        }
        if _R.storyboard.transactionsFilter().transactionsFilterViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'transactionsFilterViewController' could not be loaded from storyboard 'TransactionsFilter' as 'TransactionsFilterViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct visa: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Visa"
      let visaViewController = StoryboardViewControllerResource<VisaViewController>(identifier: "VisaViewController")

      func visaViewController(_: Void = ()) -> VisaViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: visaViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Deposit/addCard", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Deposit/addCard' is used in storyboard 'Visa', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.visa().visaViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'visaViewController' could not be loaded from storyboard 'Visa' as 'VisaViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct web: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Web"
      let webViewController = StoryboardViewControllerResource<WebViewController>(identifier: "WebViewController")

      func webViewController(_: Void = ()) -> WebViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: webViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.web().webViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'webViewController' could not be loaded from storyboard 'Web' as 'WebViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct withdraw: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Withdraw"
      let withdrawViewController = StoryboardViewControllerResource<WithdrawViewController>(identifier: "WithdrawViewController")

      func withdrawViewController(_: Void = ()) -> WithdrawViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: withdrawViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.withdraw().withdrawViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'withdrawViewController' could not be loaded from storyboard 'Withdraw' as 'WithdrawViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
